.. _catalog:

----------

Catalog
=======



.. _.formats:

----------

formats
-------



.. _formats.human_assistant:

----------

human_assistant
^^^^^^^^^^^^^^^

.. note:: ID: ``formats.human_assistant``  |  Type: :class:`ICLFormat <unitxt.formats.ICLFormat>`

   .. code-block:: json

      {
          "input_output_separator": "\n",
          "input_prefix": "Human: ",
          "output_prefix": "Assistant: ",
          "type": "icl_format"
      }


|
|



.. _formats.empty_input_output_separator:

----------

empty_input_output_separator
^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. note:: ID: ``formats.empty_input_output_separator``  |  Type: :class:`ICLFormat <unitxt.formats.ICLFormat>`

   .. code-block:: json

      {
          "input_output_separator": "",
          "type": "icl_format"
      }


|
|



.. _formats.user_assistant:

----------

user_assistant
^^^^^^^^^^^^^^

.. note:: ID: ``formats.user_assistant``  |  Type: :class:`ICLFormat <unitxt.formats.ICLFormat>`

   .. code-block:: json

      {
          "input_output_separator": "\n",
          "input_prefix": "<|user|>\n",
          "output_prefix": "<|assistant|>\n",
          "type": "icl_format"
      }


|
|



.. _formats.user_agent:

----------

user_agent
^^^^^^^^^^

.. note:: ID: ``formats.user_agent``  |  Type: :class:`ICLFormat <unitxt.formats.ICLFormat>`

   .. code-block:: json

      {
          "input_prefix": "User: ",
          "output_prefix": "Agent: ",
          "type": "icl_format"
      }


|
|



.. _formats.empty:

----------

empty
^^^^^

.. note:: ID: ``formats.empty``  |  Type: :class:`ICLFormat <unitxt.formats.ICLFormat>`

   .. code-block:: json

      {
          "type": "icl_format"
      }


|
|



.. _formats.llama:

----------

llama
^^^^^

.. note:: ID: ``formats.llama``  |  Type: :class:`ICLFormat <unitxt.formats.ICLFormat>`

   .. code-block:: json

      {
          "prefix": "[INST] ",
          "suffix": "[/INST]",
          "target_prefix": "",
          "type": "icl_format"
      }


|
|



.. _.augmentors:

----------

augmentors
----------



.. _augmentors.augment_whitespace_model_input:

----------

augment_whitespace_model_input
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. note:: ID: ``augmentors.augment_whitespace_model_input``  |  Type: :class:`AugmentWhitespace <unitxt.operators.AugmentWhitespace>`

   .. code-block:: json

      {
          "augment_model_input": true,
          "type": "augment_whitespace"
      }


|
|



.. _augmentors.no_augmentation:

----------

no_augmentation
^^^^^^^^^^^^^^^

.. note:: ID: ``augmentors.no_augmentation``  |  Type: :class:`NullAugmentor <unitxt.operators.NullAugmentor>`

   .. code-block:: json

      {
          "type": "null_augmentor"
      }


|
|



.. _augmentors.augment_whitespace_task_input:

----------

augment_whitespace_task_input
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. note:: ID: ``augmentors.augment_whitespace_task_input``  |  Type: :class:`AugmentWhitespace <unitxt.operators.AugmentWhitespace>`

   .. code-block:: json

      {
          "augment_task_input": true,
          "type": "augment_whitespace"
      }


|
|



.. _.templates:

----------

templates
---------



.. _.templates.qa:

----------

qa
^^



.. _.templates.qa.open:

----------

open
""""



.. _templates.qa.open.simple:

----------

simple
''''''

.. note:: ID: ``templates.qa.open.simple``  |  Type: :class:`MultiReferenceTemplate <unitxt.templates.MultiReferenceTemplate>`

   .. code-block:: json

      {
          "input_format": "Question: {question}",
          "references_field": "answers",
          "type": "multi_reference_template"
      }


|
|



.. _templates.qa.open.simple2:

----------

simple2
'''''''

.. note:: ID: ``templates.qa.open.simple2``  |  Type: :class:`MultiReferenceTemplate <unitxt.templates.MultiReferenceTemplate>`

   .. code-block:: json

      {
          "input_format": "answer the question: {question}",
          "references_field": "answers",
          "type": "multi_reference_template"
      }


|
|



.. _templates.qa.open.all:

----------

all
'''

.. note:: ID: ``templates.qa.open.all``  |  Type: :class:`TemplatesList <unitxt.templates.TemplatesList>`

   .. code-block:: json

      {
          "items": [
              "templates.qa.open.simple",
              "templates.qa.open.simple2"
          ],
          "type": "templates_list"
      }

References: :ref:`templates.qa.open.simple <templates.qa.open.simple>`, :ref:`templates.qa.open.simple2 <templates.qa.open.simple2>`

|
|



.. _.templates.qa.multiple_choice:

----------

multiple_choice
"""""""""""""""



.. _.templates.qa.multiple_choice.no_intro:

----------

no_intro
''''''''



.. _templates.qa.multiple_choice.no_intro.mmlu:

----------

mmlu
~~~~

.. note:: ID: ``templates.qa.multiple_choice.no_intro.mmlu``  |  Type: :class:`InputOutputTemplate <unitxt.templates.InputOutputTemplate>`

   .. code-block:: json

      {
          "input_format": "{sentence1}.\nAnswers: {choices}.\nAnswer:",
          "output_format": "{label}",
          "postprocessors": [
              "processors.first_character"
          ],
          "type": "input_output_template"
      }

References: :ref:`processors.first_character <processors.first_character>`

|
|



.. _templates.qa.multiple_choice.no_intro.fm_eval:

----------

fm_eval
~~~~~~~

.. note:: ID: ``templates.qa.multiple_choice.no_intro.fm_eval``  |  Type: :class:`InputOutputTemplate <unitxt.templates.InputOutputTemplate>`

   .. code-block:: json

      {
          "input_format": "Question: {sentence1}\nChoose from {numbers}\nAnswers: {choices}\nAnswer:",
          "output_format": "{label}",
          "postprocessors": [
              "processors.first_character"
          ],
          "type": "input_output_template"
      }

References: :ref:`processors.first_character <processors.first_character>`

|
|



.. _templates.qa.multiple_choice.no_intro.all:

----------

all
~~~

.. note:: ID: ``templates.qa.multiple_choice.no_intro.all``  |  Type: :class:`TemplatesList <unitxt.templates.TemplatesList>`

   .. code-block:: json

      {
          "items": [
              "templates.qa.multiple_choice.no_intro.mmlu",
              "templates.qa.multiple_choice.no_intro.helm",
              "templates.qa.multiple_choice.no_intro.lm_eval_harness",
              "templates.qa.multiple_choice.no_intro.fm_eval"
          ],
          "type": "templates_list"
      }

References: :ref:`templates.qa.multiple_choice.no_intro.helm <templates.qa.multiple_choice.no_intro.helm>`, :ref:`templates.qa.multiple_choice.no_intro.fm_eval <templates.qa.multiple_choice.no_intro.fm_eval>`, :ref:`templates.qa.multiple_choice.no_intro.mmlu <templates.qa.multiple_choice.no_intro.mmlu>`, :ref:`templates.qa.multiple_choice.no_intro.lm_eval_harness <templates.qa.multiple_choice.no_intro.lm_eval_harness>`

|
|



.. _templates.qa.multiple_choice.no_intro.lm_eval_harness:

----------

lm_eval_harness
~~~~~~~~~~~~~~~

.. note:: ID: ``templates.qa.multiple_choice.no_intro.lm_eval_harness``  |  Type: :class:`InputOutputTemplate <unitxt.templates.InputOutputTemplate>`

   .. code-block:: json

      {
          "input_format": "Question: {sentence1}.\nChoices:\n{choices}.\nAnswer:",
          "output_format": "{label}",
          "postprocessors": [
              "processors.first_character"
          ],
          "type": "input_output_template"
      }

References: :ref:`processors.first_character <processors.first_character>`

|
|



.. _templates.qa.multiple_choice.no_intro.helm:

----------

helm
~~~~

.. note:: ID: ``templates.qa.multiple_choice.no_intro.helm``  |  Type: :class:`InputOutputTemplate <unitxt.templates.InputOutputTemplate>`

   .. code-block:: json

      {
          "input_format": "Question: {sentence1}.\nAnswers: {choices}.\nAnswer:",
          "output_format": "{label}",
          "postprocessors": [
              "processors.first_character"
          ],
          "type": "input_output_template"
      }

References: :ref:`processors.first_character <processors.first_character>`

|
|



.. _.templates.qa.multiple_choice.context:

----------

context
'''''''



.. _templates.qa.multiple_choice.context.mmlu:

----------

mmlu
~~~~

.. note:: ID: ``templates.qa.multiple_choice.context.mmlu``  |  Type: :class:`InputOutputTemplate <unitxt.templates.InputOutputTemplate>`

   .. code-block:: json

      {
          "input_format": "The following are multiple choice questions (with answers) about {topic}.\n{context}\n{sentence1}.\nAnswers: {choices}.\nAnswer:",
          "output_format": "{label}",
          "postprocessors": [
              "processors.first_character"
          ],
          "type": "input_output_template"
      }

References: :ref:`processors.first_character <processors.first_character>`

|
|



.. _templates.qa.multiple_choice.context.fm_eval:

----------

fm_eval
~~~~~~~

.. note:: ID: ``templates.qa.multiple_choice.context.fm_eval``  |  Type: :class:`InputOutputTemplate <unitxt.templates.InputOutputTemplate>`

   .. code-block:: json

      {
          "input_format": "The following are multiple choice questions (with answers) about {topic}.\n\nContext: {context}\nQuestion: {sentence1}\nChoose from {numbers}\nAnswers: {choices}\nAnswer:",
          "output_format": "{label}",
          "postprocessors": [
              "processors.first_character"
          ],
          "type": "input_output_template"
      }

References: :ref:`processors.first_character <processors.first_character>`

|
|



.. _templates.qa.multiple_choice.context.all:

----------

all
~~~

.. note:: ID: ``templates.qa.multiple_choice.context.all``  |  Type: :class:`TemplatesList <unitxt.templates.TemplatesList>`

   .. code-block:: json

      {
          "items": [
              "templates.qa.multiple_choice.context.mmlu",
              "templates.qa.multiple_choice.context.helm",
              "templates.qa.multiple_choice.context.lm_eval_harness",
              "templates.qa.multiple_choice.context.fm_eval"
          ],
          "type": "templates_list"
      }

References: :ref:`templates.qa.multiple_choice.context.lm_eval_harness <templates.qa.multiple_choice.context.lm_eval_harness>`, :ref:`templates.qa.multiple_choice.context.mmlu <templates.qa.multiple_choice.context.mmlu>`, :ref:`templates.qa.multiple_choice.context.fm_eval <templates.qa.multiple_choice.context.fm_eval>`, :ref:`templates.qa.multiple_choice.context.helm <templates.qa.multiple_choice.context.helm>`

|
|



.. _templates.qa.multiple_choice.context.lm_eval_harness:

----------

lm_eval_harness
~~~~~~~~~~~~~~~

.. note:: ID: ``templates.qa.multiple_choice.context.lm_eval_harness``  |  Type: :class:`InputOutputTemplate <unitxt.templates.InputOutputTemplate>`

   .. code-block:: json

      {
          "input_format": "Context: {context}\nQuestion: {sentence1}.\nChoices:\n{choices}.\nAnswer:",
          "output_format": "{label}",
          "postprocessors": [
              "processors.first_character"
          ],
          "type": "input_output_template"
      }

References: :ref:`processors.first_character <processors.first_character>`

|
|



.. _templates.qa.multiple_choice.context.helm:

----------

helm
~~~~

.. note:: ID: ``templates.qa.multiple_choice.context.helm``  |  Type: :class:`InputOutputTemplate <unitxt.templates.InputOutputTemplate>`

   .. code-block:: json

      {
          "input_format": "The following are multiple choice questions (with answers) about {topic}.\n\nContext: {context}\nQuestion: {sentence1}.\nAnswers: {choices}.\nAnswer:",
          "output_format": "{label}",
          "postprocessors": [
              "processors.first_character"
          ],
          "type": "input_output_template"
      }

References: :ref:`processors.first_character <processors.first_character>`

|
|



.. _.templates.qa.multiple_choice.context_no_intro:

----------

context_no_intro
''''''''''''''''



.. _templates.qa.multiple_choice.context_no_intro.mmlu:

----------

mmlu
~~~~

.. note:: ID: ``templates.qa.multiple_choice.context_no_intro.mmlu``  |  Type: :class:`InputOutputTemplate <unitxt.templates.InputOutputTemplate>`

   .. code-block:: json

      {
          "input_format": "{context}\n{sentence1}.\nAnswers: {choices}.\nAnswer:",
          "output_format": "{label}",
          "postprocessors": [
              "processors.first_character"
          ],
          "type": "input_output_template"
      }

References: :ref:`processors.first_character <processors.first_character>`

|
|



.. _templates.qa.multiple_choice.context_no_intro.fm_eval:

----------

fm_eval
~~~~~~~

.. note:: ID: ``templates.qa.multiple_choice.context_no_intro.fm_eval``  |  Type: :class:`InputOutputTemplate <unitxt.templates.InputOutputTemplate>`

   .. code-block:: json

      {
          "input_format": "Context: {context}\nQuestion: {sentence1}\nChoose from {numbers}\nAnswers: {choices}\nAnswer:",
          "output_format": "{label}",
          "postprocessors": [
              "processors.first_character"
          ],
          "type": "input_output_template"
      }

References: :ref:`processors.first_character <processors.first_character>`

|
|



.. _templates.qa.multiple_choice.context_no_intro.all:

----------

all
~~~

.. note:: ID: ``templates.qa.multiple_choice.context_no_intro.all``  |  Type: :class:`TemplatesList <unitxt.templates.TemplatesList>`

   .. code-block:: json

      {
          "items": [
              "templates.qa.multiple_choice.context_no_intro.mmlu",
              "templates.qa.multiple_choice.context_no_intro.helm",
              "templates.qa.multiple_choice.context_no_intro.lm_eval_harness",
              "templates.qa.multiple_choice.context_no_intro.fm_eval"
          ],
          "type": "templates_list"
      }

References: :ref:`templates.qa.multiple_choice.context_no_intro.mmlu <templates.qa.multiple_choice.context_no_intro.mmlu>`, :ref:`templates.qa.multiple_choice.context_no_intro.lm_eval_harness <templates.qa.multiple_choice.context_no_intro.lm_eval_harness>`, :ref:`templates.qa.multiple_choice.context_no_intro.fm_eval <templates.qa.multiple_choice.context_no_intro.fm_eval>`, :ref:`templates.qa.multiple_choice.context_no_intro.helm <templates.qa.multiple_choice.context_no_intro.helm>`

|
|



.. _templates.qa.multiple_choice.context_no_intro.lm_eval_harness:

----------

lm_eval_harness
~~~~~~~~~~~~~~~

.. note:: ID: ``templates.qa.multiple_choice.context_no_intro.lm_eval_harness``  |  Type: :class:`InputOutputTemplate <unitxt.templates.InputOutputTemplate>`

   .. code-block:: json

      {
          "input_format": "Context: {context}\nQuestion: {sentence1}.\nChoices:\n{choices}.\nAnswer:",
          "output_format": "{label}",
          "postprocessors": [
              "processors.first_character"
          ],
          "type": "input_output_template"
      }

References: :ref:`processors.first_character <processors.first_character>`

|
|



.. _templates.qa.multiple_choice.context_no_intro.helm:

----------

helm
~~~~

.. note:: ID: ``templates.qa.multiple_choice.context_no_intro.helm``  |  Type: :class:`InputOutputTemplate <unitxt.templates.InputOutputTemplate>`

   .. code-block:: json

      {
          "input_format": "Context: {context}\nQuestion: {sentence1}.\nAnswers: {choices}.\nAnswer:",
          "output_format": "{label}",
          "postprocessors": [
              "processors.first_character"
          ],
          "type": "input_output_template"
      }

References: :ref:`processors.first_character <processors.first_character>`

|
|



.. _templates.qa.multiple_choice.all:

----------

all
'''

.. note:: ID: ``templates.qa.multiple_choice.all``  |  Type: :class:`TemplatesList <unitxt.templates.TemplatesList>`

   .. code-block:: json

      {
          "items": [
              {
                  "input_format": "The following are multiple choice questions (with answers) about {topic}.\n{sentence1}.\nAnswers: {choices}.\nAnswer:",
                  "output_format": "{label}",
                  "postprocessors": [
                      "processors.first_character"
                  ],
                  "type": "input_output_template"
              },
              {
                  "input_format": "The following are multiple choice questions (with answers) about {topic}.\n\nQuestion: {sentence1}.\nAnswers: {choices}.\nAnswer:",
                  "output_format": "{label}",
                  "postprocessors": [
                      "processors.first_character"
                  ],
                  "type": "input_output_template"
              },
              {
                  "input_format": "Question: {sentence1}.\nChoices:\n{choices}.\nAnswer:",
                  "output_format": "{label}",
                  "postprocessors": [
                      "processors.first_character"
                  ],
                  "type": "input_output_template"
              },
              {
                  "input_format": "The following are multiple choice questions (with answers) about {topic}.\n\nQuestion: {sentence1}\nChoose from {numbers}\nAnswers: {choices}\nAnswer:",
                  "output_format": "{label}",
                  "postprocessors": [
                      "processors.first_character"
                  ],
                  "type": "input_output_template"
              },
              {
                  "input_format": "{context}\n{sentence1}.\nAnswers: {choices}.\nAnswer:",
                  "output_format": "{label}",
                  "postprocessors": [
                      "processors.first_character"
                  ],
                  "type": "input_output_template"
              },
              {
                  "input_format": "Context: {context}\nQuestion: {sentence1}.\nAnswers: {choices}.\nAnswer:",
                  "output_format": "{label}",
                  "postprocessors": [
                      "processors.first_character"
                  ],
                  "type": "input_output_template"
              },
              {
                  "input_format": "Context: {context}\nQuestion: {sentence1}.\nChoices:\n{choices}.\nAnswer:",
                  "output_format": "{label}",
                  "postprocessors": [
                      "processors.first_character"
                  ],
                  "type": "input_output_template"
              },
              {
                  "input_format": "Context: {context}\nQuestion: {sentence1}\nChoose from {numbers}\nAnswers: {choices}\nAnswer:",
                  "output_format": "{label}",
                  "postprocessors": [
                      "processors.first_character"
                  ],
                  "type": "input_output_template"
              },
              {
                  "input_format": "{sentence1}.\nAnswers: {choices}.\nAnswer:",
                  "output_format": "{label}",
                  "postprocessors": [
                      "processors.first_character"
                  ],
                  "type": "input_output_template"
              },
              {
                  "input_format": "Question: {sentence1}.\nAnswers: {choices}.\nAnswer:",
                  "output_format": "{label}",
                  "postprocessors": [
                      "processors.first_character"
                  ],
                  "type": "input_output_template"
              },
              {
                  "input_format": "Question: {sentence1}.\nChoices:\n{choices}.\nAnswer:",
                  "output_format": "{label}",
                  "postprocessors": [
                      "processors.first_character"
                  ],
                  "type": "input_output_template"
              },
              {
                  "input_format": "Question: {sentence1}\nChoose from {numbers}\nAnswers: {choices}\nAnswer:",
                  "output_format": "{label}",
                  "postprocessors": [
                      "processors.first_character"
                  ],
                  "type": "input_output_template"
              },
              {
                  "input_format": "The following are multiple choice questions (with answers) about {topic}.\n{context}\n{sentence1}.\nAnswers: {choices}.\nAnswer:",
                  "output_format": "{label}",
                  "postprocessors": [
                      "processors.first_character"
                  ],
                  "type": "input_output_template"
              },
              {
                  "input_format": "The following are multiple choice questions (with answers) about {topic}.\n\nContext: {context}\nQuestion: {sentence1}.\nAnswers: {choices}.\nAnswer:",
                  "output_format": "{label}",
                  "postprocessors": [
                      "processors.first_character"
                  ],
                  "type": "input_output_template"
              },
              {
                  "input_format": "Context: {context}\nQuestion: {sentence1}.\nChoices:\n{choices}.\nAnswer:",
                  "output_format": "{label}",
                  "postprocessors": [
                      "processors.first_character"
                  ],
                  "type": "input_output_template"
              },
              {
                  "input_format": "The following are multiple choice questions (with answers) about {topic}.\n\nContext: {context}\nQuestion: {sentence1}\nChoose from {numbers}\nAnswers: {choices}\nAnswer:",
                  "output_format": "{label}",
                  "postprocessors": [
                      "processors.first_character"
                  ],
                  "type": "input_output_template"
              }
          ],
          "type": "templates_list"
      }

References: :ref:`processors.first_character <processors.first_character>`

|
|



.. _.templates.qa.multiple_choice.original:

----------

original
''''''''



.. _templates.qa.multiple_choice.original.mmlu:

----------

mmlu
~~~~

.. note:: ID: ``templates.qa.multiple_choice.original.mmlu``  |  Type: :class:`InputOutputTemplate <unitxt.templates.InputOutputTemplate>`

   .. code-block:: json

      {
          "input_format": "The following are multiple choice questions (with answers) about {topic}.\n{sentence1}.\nAnswers: {choices}.\nAnswer:",
          "output_format": "{label}",
          "postprocessors": [
              "processors.first_character"
          ],
          "type": "input_output_template"
      }

References: :ref:`processors.first_character <processors.first_character>`

|
|



.. _templates.qa.multiple_choice.original.fm_eval:

----------

fm_eval
~~~~~~~

.. note:: ID: ``templates.qa.multiple_choice.original.fm_eval``  |  Type: :class:`InputOutputTemplate <unitxt.templates.InputOutputTemplate>`

   .. code-block:: json

      {
          "input_format": "The following are multiple choice questions (with answers) about {topic}.\n\nQuestion: {sentence1}\nChoose from {numbers}\nAnswers: {choices}\nAnswer:",
          "output_format": "{label}",
          "postprocessors": [
              "processors.first_character"
          ],
          "type": "input_output_template"
      }

References: :ref:`processors.first_character <processors.first_character>`

|
|



.. _templates.qa.multiple_choice.original.all:

----------

all
~~~

.. note:: ID: ``templates.qa.multiple_choice.original.all``  |  Type: :class:`TemplatesList <unitxt.templates.TemplatesList>`

   .. code-block:: json

      {
          "items": [
              "templates.qa.multiple_choice.original.mmlu",
              "templates.qa.multiple_choice.original.helm",
              "templates.qa.multiple_choice.original.lm_eval_harness",
              "templates.qa.multiple_choice.original.fm_eval"
          ],
          "type": "templates_list"
      }

References: :ref:`templates.qa.multiple_choice.original.mmlu <templates.qa.multiple_choice.original.mmlu>`, :ref:`templates.qa.multiple_choice.original.lm_eval_harness <templates.qa.multiple_choice.original.lm_eval_harness>`, :ref:`templates.qa.multiple_choice.original.fm_eval <templates.qa.multiple_choice.original.fm_eval>`, :ref:`templates.qa.multiple_choice.original.helm <templates.qa.multiple_choice.original.helm>`

|
|



.. _templates.qa.multiple_choice.original.lm_eval_harness:

----------

lm_eval_harness
~~~~~~~~~~~~~~~

.. note:: ID: ``templates.qa.multiple_choice.original.lm_eval_harness``  |  Type: :class:`InputOutputTemplate <unitxt.templates.InputOutputTemplate>`

   .. code-block:: json

      {
          "input_format": "Question: {sentence1}.\nChoices:\n{choices}.\nAnswer:",
          "output_format": "{label}",
          "postprocessors": [
              "processors.first_character"
          ],
          "type": "input_output_template"
      }

References: :ref:`processors.first_character <processors.first_character>`

|
|



.. _templates.qa.multiple_choice.original.helm:

----------

helm
~~~~

.. note:: ID: ``templates.qa.multiple_choice.original.helm``  |  Type: :class:`InputOutputTemplate <unitxt.templates.InputOutputTemplate>`

   .. code-block:: json

      {
          "input_format": "The following are multiple choice questions (with answers) about {topic}.\n\nQuestion: {sentence1}.\nAnswers: {choices}.\nAnswer:",
          "output_format": "{label}",
          "postprocessors": [
              "processors.first_character"
          ],
          "type": "input_output_template"
      }

References: :ref:`processors.first_character <processors.first_character>`

|
|



.. _.templates.qa.contextual:

----------

contextual
""""""""""



.. _templates.qa.contextual.simple:

----------

simple
''''''

.. note:: ID: ``templates.qa.contextual.simple``  |  Type: :class:`MultiReferenceTemplate <unitxt.templates.MultiReferenceTemplate>`

   .. code-block:: json

      {
          "input_format": "Context: {context}\nQuestion: {question}",
          "references_field": "answers",
          "type": "multi_reference_template"
      }


|
|



.. _templates.qa.contextual.simple2:

----------

simple2
'''''''

.. note:: ID: ``templates.qa.contextual.simple2``  |  Type: :class:`MultiReferenceTemplate <unitxt.templates.MultiReferenceTemplate>`

   .. code-block:: json

      {
          "input_format": "based on this text: {context}\n answer the question: {question}",
          "references_field": "answers",
          "type": "multi_reference_template"
      }


|
|



.. _templates.qa.contextual.all:

----------

all
'''

.. note:: ID: ``templates.qa.contextual.all``  |  Type: :class:`TemplatesList <unitxt.templates.TemplatesList>`

   .. code-block:: json

      {
          "items": [
              "templates.qa.contextual.simple",
              "templates.qa.contextual.simple2"
          ],
          "type": "templates_list"
      }

References: :ref:`templates.qa.contextual.simple2 <templates.qa.contextual.simple2>`, :ref:`templates.qa.contextual.simple <templates.qa.contextual.simple>`

|
|



.. _.templates.translation:

----------

translation
^^^^^^^^^^^



.. _.templates.translation.directed:

----------

directed
""""""""



.. _templates.translation.directed.simple:

----------

simple
''''''

.. note:: ID: ``templates.translation.directed.simple``  |  Type: :class:`InputOutputTemplate <unitxt.templates.InputOutputTemplate>`

   .. code-block:: json

      {
          "input_format": "Translate from {source_language} to {target_language}: {text}",
          "output_format": "{translation}",
          "type": "input_output_template"
      }


|
|



.. _templates.translation.directed.all:

----------

all
'''

.. note:: ID: ``templates.translation.directed.all``  |  Type: :class:`TemplatesList <unitxt.templates.TemplatesList>`

   .. code-block:: json

      {
          "items": [
              "templates.translation.directed.simple"
          ],
          "type": "templates_list"
      }

References: :ref:`templates.translation.directed.simple <templates.translation.directed.simple>`

|
|



.. _templates.key_val:

----------

key_val
^^^^^^^

.. note:: ID: ``templates.key_val``  |  Type: :class:`KeyValTemplate <unitxt.templates.KeyValTemplate>`

   .. code-block:: json

      {
          "type": "key_val_template"
      }


|
|



.. _templates.nli:

----------

nli
^^^

.. note:: ID: ``templates.nli``  |  Type: :class:`TemplatesList <unitxt.templates.TemplatesList>`

   .. code-block:: json

      {
          "items": [
              {
                  "input_format": "Given this sentence: {premise}, classify if this sentence: {hypothesis} is {choices}.",
                  "output_format": "{label}",
                  "type": "input_output_template"
              }
          ],
          "type": "templates_list"
      }


|
|



.. _templates.empty:

----------

empty
^^^^^

.. note:: ID: ``templates.empty``  |  Type: :class:`KeyValTemplate <unitxt.templates.KeyValTemplate>`

   .. code-block:: json

      {
          "type": "key_val_template",
          "use_keys_for_inputs": false
      }


|
|



.. _.templates.mmlu:

----------

mmlu
^^^^



.. _templates.mmlu.fm_eval:

----------

fm_eval
"""""""

.. note:: ID: ``templates.mmlu.fm_eval``  |  Type: :class:`InputOutputTemplate <unitxt.templates.InputOutputTemplate>`

   .. code-block:: json

      {
          "input_format": "The following are multiple choice questions (with answers) about {topic}.\n\nQuestion: {sentence1}\nChoose from {numbers}\nAnswers: {choices}\nAnswer:",
          "output_format": "{label}",
          "postprocessors": [
              "processors.first_character"
          ],
          "type": "input_output_template"
      }

References: :ref:`processors.first_character <processors.first_character>`

|
|



.. _templates.mmlu.lm_eval_harness:

----------

lm_eval_harness
"""""""""""""""

.. note:: ID: ``templates.mmlu.lm_eval_harness``  |  Type: :class:`InputOutputTemplate <unitxt.templates.InputOutputTemplate>`

   .. code-block:: json

      {
          "input_format": "Question: {sentence1}.\nChoices:\n{choices}.\nAnswer:",
          "output_format": "{label}",
          "postprocessors": [
              "processors.first_character"
          ],
          "type": "input_output_template"
      }

References: :ref:`processors.first_character <processors.first_character>`

|
|



.. _templates.mmlu.original:

----------

original
""""""""

.. note:: ID: ``templates.mmlu.original``  |  Type: :class:`InputOutputTemplate <unitxt.templates.InputOutputTemplate>`

   .. code-block:: json

      {
          "input_format": "The following are multiple choice questions (with answers) about {topic}.\n{sentence1}.\nAnswers: {choices}.\nAnswer:",
          "output_format": "{label}",
          "postprocessors": [
              "processors.first_character"
          ],
          "type": "input_output_template"
      }

References: :ref:`processors.first_character <processors.first_character>`

|
|



.. _templates.mmlu.helm:

----------

helm
""""

.. note:: ID: ``templates.mmlu.helm``  |  Type: :class:`InputOutputTemplate <unitxt.templates.InputOutputTemplate>`

   .. code-block:: json

      {
          "input_format": "The following are multiple choice questions (with answers) about {topic}.\n\nQuestion: {sentence1}.\nAnswers: {choices}.\nAnswer:",
          "output_format": "{label}",
          "postprocessors": [
              "processors.first_character"
          ],
          "type": "input_output_template"
      }

References: :ref:`processors.first_character <processors.first_character>`

|
|



.. _.templates.classification:

----------

classification
^^^^^^^^^^^^^^



.. _.templates.classification.multi_class:

----------

multi_class
"""""""""""



.. _templates.classification.multi_class.default:

----------

default
'''''''

.. note:: ID: ``templates.classification.multi_class.default``  |  Type: :class:`InputOutputTemplate <unitxt.templates.InputOutputTemplate>`

   .. code-block:: json

      {
          "input_format": "Classify the {type_of_class} of following {text_type} to one of these options: {classes}. Text: {text}",
          "output_format": "{label}",
          "postprocessors": [
              "processors.take_first_non_empty_line",
              "processors.lower_case_till_punc"
          ],
          "type": "input_output_template"
      }

References: :ref:`processors.take_first_non_empty_line <processors.take_first_non_empty_line>`, :ref:`processors.lower_case_till_punc <processors.lower_case_till_punc>`

|
|



.. _templates.classification.multi_class.all:

----------

all
'''

.. note:: ID: ``templates.classification.multi_class.all``  |  Type: :class:`TemplatesList <unitxt.templates.TemplatesList>`

   .. code-block:: json

      {
          "items": [
              "templates.classification.multi_class.default",
              "templates.classification.multi_class.empty"
          ],
          "type": "templates_list"
      }

References: :ref:`templates.classification.multi_class.default <templates.classification.multi_class.default>`, :ref:`templates.classification.multi_class.empty <templates.classification.multi_class.empty>`

|
|



.. _templates.classification.multi_class.empty:

----------

empty
'''''

.. note:: ID: ``templates.classification.multi_class.empty``  |  Type: :class:`InputOutputTemplate <unitxt.templates.InputOutputTemplate>`

   .. code-block:: json

      {
          "input_format": "{text}",
          "output_format": "{label}",
          "type": "input_output_template"
      }


|
|



.. _.templates.classification.nli:

----------

nli
"""



.. _templates.classification.nli.simple:

----------

simple
''''''

.. note:: ID: ``templates.classification.nli.simple``  |  Type: :class:`InputOutputTemplate <unitxt.templates.InputOutputTemplate>`

   .. code-block:: json

      {
          "input_format": "Given this sentence: {premise}, classify if this sentence: {hypothesis} is {choices}.",
          "output_format": "{label}",
          "postprocessors": [
              "processors.take_first_non_empty_line",
              "processors.lower_case_till_punc"
          ],
          "type": "input_output_template"
      }

References: :ref:`processors.take_first_non_empty_line <processors.take_first_non_empty_line>`, :ref:`processors.lower_case_till_punc <processors.lower_case_till_punc>`

|
|



.. _templates.classification.nli.all:

----------

all
'''

.. note:: ID: ``templates.classification.nli.all``  |  Type: :class:`TemplatesList <unitxt.templates.TemplatesList>`

   .. code-block:: json

      {
          "items": [
              "templates.classification.nli.simple"
          ],
          "type": "templates_list"
      }

References: :ref:`templates.classification.nli.simple <templates.classification.nli.simple>`

|
|



.. _.metrics:

----------

metrics
-------



.. _metrics.wer:

----------

wer
^^^

.. note:: ID: ``metrics.wer``  |  Type: :class:`Wer <unitxt.metrics.Wer>`

   .. code-block:: json

      {
          "type": "wer"
      }


|
|



.. _metrics.spearman:

----------

spearman
^^^^^^^^

.. note:: ID: ``metrics.spearman``  |  Type: :class:`MetricPipeline <unitxt.metrics.MetricPipeline>`

   .. code-block:: json

      {
          "main_score": "spearmanr",
          "metric": {
              "hf_metric_name": "spearmanr",
              "main_score": "spearmanr",
              "type": "huggingface_metric"
          },
          "preprocess_steps": [
              {
                  "field_to_field": [
                      [
                          "references/0",
                          "references"
                      ]
                  ],
                  "type": "copy_fields",
                  "use_query": true
              },
              {
                  "failure_defaults": {
                      "prediction": 0.0
                  },
                  "fields": {
                      "prediction": "float",
                      "references": "float"
                  },
                  "type": "cast_fields",
                  "use_nested_query": true
              }
          ],
          "type": "metric_pipeline"
      }


|
|



.. _.metrics.reward:

----------

reward
^^^^^^



.. _.metrics.reward.deberta:

----------

deberta
"""""""



.. _.metrics.reward.deberta.v3:

----------

v3
''



.. _.metrics.reward.deberta.v3.large:

----------

large
~~~~~



.. _metrics.reward.deberta.v3.large.v2:

----------

v2
**

.. note:: ID: ``metrics.reward.deberta.v3.large.v2``  |  Type: :class:`Reward <unitxt.metrics.Reward>`

   .. code-block:: json

      {
          "model_name": "OpenAssistant/reward-model-deberta-v3-large-v2",
          "type": "reward"
      }


|
|



.. _metrics.matthews_correlation:

----------

matthews_correlation
^^^^^^^^^^^^^^^^^^^^

.. note:: ID: ``metrics.matthews_correlation``  |  Type: :class:`MatthewsCorrelation <unitxt.metrics.MatthewsCorrelation>`

   .. code-block:: json

      {
          "type": "matthews_correlation"
      }


|
|



.. _metrics.bleu:

----------

bleu
^^^^

.. note:: ID: ``metrics.bleu``  |  Type: :class:`HuggingfaceMetric <unitxt.metrics.HuggingfaceMetric>`

   .. code-block:: json

      {
          "hf_metric_name": "bleu",
          "main_score": "bleu",
          "scale": 1.0,
          "type": "huggingface_metric"
      }


|
|



.. _metrics.normalized_sacrebleu:

----------

normalized_sacrebleu
^^^^^^^^^^^^^^^^^^^^

.. note:: ID: ``metrics.normalized_sacrebleu``  |  Type: :class:`HuggingfaceMetric <unitxt.metrics.HuggingfaceMetric>`

   .. code-block:: json

      {
          "hf_main_score": "score",
          "hf_metric_name": "sacrebleu",
          "main_score": "sacrebleu",
          "scale": 100.0,
          "scaled_fields": [
              "sacrebleu",
              "precisions"
          ],
          "type": "huggingface_metric"
      }


|
|



.. _metrics.ner:

----------

ner
^^^

.. note:: ID: ``metrics.ner``  |  Type: :class:`NER <unitxt.metrics.NER>`

   .. code-block:: json

      {
          "type": "ner"
      }


|
|



.. _metrics.rouge:

----------

rouge
^^^^^

.. note:: ID: ``metrics.rouge``  |  Type: :class:`Rouge <unitxt.metrics.Rouge>`

   .. code-block:: json

      {
          "n_resamples": null,
          "type": "rouge"
      }


|
|



.. _metrics.sacrebleu:

----------

sacrebleu
^^^^^^^^^

.. note:: ID: ``metrics.sacrebleu``  |  Type: :class:`HuggingfaceMetric <unitxt.metrics.HuggingfaceMetric>`

   .. code-block:: json

      {
          "hf_main_score": "score",
          "hf_metric_name": "sacrebleu",
          "main_score": "sacrebleu",
          "scale": 1.0,
          "type": "huggingface_metric"
      }


|
|



.. _metrics.ndcg:

----------

ndcg
^^^^

.. note:: ID: ``metrics.ndcg``  |  Type: :class:`MetricPipeline <unitxt.metrics.MetricPipeline>`

   .. code-block:: json

      {
          "main_score": "nDCG",
          "metric": {
              "type": "ndcg"
          },
          "preprocess_steps": [
              {
                  "field_to_field": [
                      [
                          "references/0",
                          "references"
                      ]
                  ],
                  "type": "copy_fields",
                  "use_query": true
              },
              {
                  "failure_defaults": {
                      "prediction": null
                  },
                  "fields": {
                      "prediction": "float",
                      "references": "float"
                  },
                  "type": "cast_fields",
                  "use_nested_query": true
              }
          ],
          "type": "metric_pipeline"
      }


|
|



.. _metrics.f1_macro_multi_label:

----------

f1_macro_multi_label
^^^^^^^^^^^^^^^^^^^^

.. note:: ID: ``metrics.f1_macro_multi_label``  |  Type: :class:`F1MacroMultiLabel <unitxt.metrics.F1MacroMultiLabel>`

   .. code-block:: json

      {
          "type": "f1_macro_multi_label"
      }


|
|



.. _metrics.char_edit_dist_accuracy:

----------

char_edit_dist_accuracy
^^^^^^^^^^^^^^^^^^^^^^^

.. note:: ID: ``metrics.char_edit_dist_accuracy``  |  Type: :class:`CharEditDistanceAccuracy <unitxt.metrics.CharEditDistanceAccuracy>`

   .. code-block:: json

      {
          "type": "char_edit_distance_accuracy"
      }


|
|



.. _metrics.f1_macro:

----------

f1_macro
^^^^^^^^

.. note:: ID: ``metrics.f1_macro``  |  Type: :class:`F1Macro <unitxt.metrics.F1Macro>`

   .. code-block:: json

      {
          "type": "f1_macro"
      }


|
|



.. _metrics.accuracy:

----------

accuracy
^^^^^^^^

.. note:: ID: ``metrics.accuracy``  |  Type: :class:`Accuracy <unitxt.metrics.Accuracy>`

   .. code-block:: json

      {
          "type": "accuracy"
      }


|
|



.. _metrics.token_overlap_with_context:

----------

token_overlap_with_context
^^^^^^^^^^^^^^^^^^^^^^^^^^

.. note:: ID: ``metrics.token_overlap_with_context``  |  Type: :class:`MetricPipeline <unitxt.metrics.MetricPipeline>`

   .. code-block:: json

      {
          "main_score": "score",
          "metric": {
              "type": "token_overlap"
          },
          "postpreprocess_steps": [
              {
                  "field_to_field": [
                      [
                          "score/global/f1",
                          "score/global/f1_overlap_with_context"
                      ],
                      [
                          "score/global/recall",
                          "score/global/recall_overlap_with_context"
                      ],
                      [
                          "score/global/precision",
                          "score/global/precision_overlap_with_context"
                      ]
                  ],
                  "type": "copy_fields",
                  "use_query": true
              }
          ],
          "preprocess_steps": [
              {
                  "field_to_field": [
                      [
                          "additional_inputs/context",
                          "references"
                      ]
                  ],
                  "type": "copy_fields",
                  "use_query": true
              },
              {
                  "fields": [
                      "references"
                  ],
                  "to_field": "references",
                  "type": "list_field_values"
              }
          ],
          "type": "metric_pipeline"
      }


|
|



.. _metrics.f1_micro:

----------

f1_micro
^^^^^^^^

.. note:: ID: ``metrics.f1_micro``  |  Type: :class:`F1Micro <unitxt.metrics.F1Micro>`

   .. code-block:: json

      {
          "type": "f1_micro"
      }


|
|



.. _metrics.token_overlap:

----------

token_overlap
^^^^^^^^^^^^^

.. note:: ID: ``metrics.token_overlap``  |  Type: :class:`TokenOverlap <unitxt.metrics.TokenOverlap>`

   .. code-block:: json

      {
          "type": "token_overlap"
      }


|
|



.. _.metrics.sentence_bert:

----------

sentence_bert
^^^^^^^^^^^^^



.. _.metrics.sentence_bert.mpnet:

----------

mpnet
"""""



.. _.metrics.sentence_bert.mpnet.base:

----------

base
''''



.. _metrics.sentence_bert.mpnet.base.v2:

----------

v2
~~

.. note:: ID: ``metrics.sentence_bert.mpnet.base.v2``  |  Type: :class:`SentenceBert <unitxt.metrics.SentenceBert>`

   .. code-block:: json

      {
          "model_name": "sentence-transformers/all-mpnet-base-v2",
          "type": "sentence_bert"
      }


|
|



.. _metrics.f1_micro_multi_label:

----------

f1_micro_multi_label
^^^^^^^^^^^^^^^^^^^^

.. note:: ID: ``metrics.f1_micro_multi_label``  |  Type: :class:`F1MicroMultiLabel <unitxt.metrics.F1MicroMultiLabel>`

   .. code-block:: json

      {
          "type": "f1_micro_multi_label"
      }


|
|



.. _metrics.rouge_with_confidence_intervals:

----------

rouge_with_confidence_intervals
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. note:: ID: ``metrics.rouge_with_confidence_intervals``  |  Type: :class:`Rouge <unitxt.metrics.Rouge>`

   .. code-block:: json

      {
          "type": "rouge"
      }


|
|



.. _metrics.squad:

----------

squad
^^^^^

.. note:: ID: ``metrics.squad``  |  Type: :class:`MetricPipeline <unitxt.metrics.MetricPipeline>`

   .. code-block:: json

      {
          "main_score": "f1",
          "metric": {
              "hf_metric_name": "squad",
              "main_score": "f1",
              "scale": 100.0,
              "scaled_fields": [
                  "f1",
                  "exact_match"
              ],
              "type": "huggingface_metric"
          },
          "preprocess_steps": [
              {
                  "type": "add_id"
              },
              {
                  "fields": {
                      "prediction_template": {
                          "id": "ID",
                          "prediction_text": "PRED"
                      },
                      "reference_template": {
                          "answers": {
                              "answer_start": [
                                  -1
                              ],
                              "text": "REF"
                          },
                          "id": "ID"
                      }
                  },
                  "type": "add_fields",
                  "use_deepcopy": true
              },
              {
                  "field_to_field": [
                      [
                          "references",
                          "reference_template/answers/text"
                      ],
                      [
                          "prediction",
                          "prediction_template/prediction_text"
                      ],
                      [
                          "id",
                          "prediction_template/id"
                      ],
                      [
                          "id",
                          "reference_template/id"
                      ]
                  ],
                  "type": "copy_fields",
                  "use_query": true
              },
              {
                  "field_to_field": [
                      [
                          "reference_template",
                          "references"
                      ],
                      [
                          "prediction_template",
                          "prediction"
                      ]
                  ],
                  "type": "copy_fields",
                  "use_query": true
              }
          ],
          "type": "metric_pipeline"
      }


|
|



.. _.metrics.bert_score:

----------

bert_score
^^^^^^^^^^



.. _.metrics.bert_score.deberta:

----------

deberta
"""""""



.. _.metrics.bert_score.deberta.xlarge:

----------

xlarge
''''''



.. _metrics.bert_score.deberta.xlarge.mnli:

----------

mnli
~~~~

.. note:: ID: ``metrics.bert_score.deberta.xlarge.mnli``  |  Type: :class:`BertScore <unitxt.metrics.BertScore>`

   .. code-block:: json

      {
          "model_name": "microsoft/deberta-xlarge-mnli",
          "type": "bert_score"
      }


|
|



.. _metrics.f1_weighted:

----------

f1_weighted
^^^^^^^^^^^

.. note:: ID: ``metrics.f1_weighted``  |  Type: :class:`F1Weighted <unitxt.metrics.F1Weighted>`

   .. code-block:: json

      {
          "type": "f1_weighted"
      }


|
|



.. _.cards:

----------

cards
-----



.. _.cards.xnli:

----------

xnli
^^^^



.. _cards.xnli.vi:

----------

vi
""

.. note:: ID: ``cards.xnli.vi``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "vi",
              "path": "xnli",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "mapper": {
                      "validation_matched": "validation"
                  },
                  "type": "rename_splits"
              },
              "splitters.small_no_test",
              {
                  "mappers": {
                      "label": {
                          "0": "entailment",
                          "1": "neutral",
                          "2": "contradiction"
                      }
                  },
                  "type": "map_instance_values"
              },
              {
                  "fields": {
                      "choices": [
                          "entailment",
                          "neutral",
                          "contradiction"
                      ]
                  },
                  "type": "add_fields"
              }
          ],
          "task": "tasks.nli",
          "templates": "templates.classification.nli.all",
          "type": "task_card"
      }

References: :ref:`tasks.nli <tasks.nli>`, :ref:`splitters.small_no_test <splitters.small_no_test>`, :ref:`templates.classification.nli.all <templates.classification.nli.all>`

|
|



.. _cards.xnli.fr:

----------

fr
""

.. note:: ID: ``cards.xnli.fr``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "fr",
              "path": "xnli",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "mapper": {
                      "validation_matched": "validation"
                  },
                  "type": "rename_splits"
              },
              "splitters.small_no_test",
              {
                  "mappers": {
                      "label": {
                          "0": "entailment",
                          "1": "neutral",
                          "2": "contradiction"
                      }
                  },
                  "type": "map_instance_values"
              },
              {
                  "fields": {
                      "choices": [
                          "entailment",
                          "neutral",
                          "contradiction"
                      ]
                  },
                  "type": "add_fields"
              }
          ],
          "task": "tasks.nli",
          "templates": "templates.classification.nli.all",
          "type": "task_card"
      }

References: :ref:`tasks.nli <tasks.nli>`, :ref:`splitters.small_no_test <splitters.small_no_test>`, :ref:`templates.classification.nli.all <templates.classification.nli.all>`

|
|



.. _cards.xnli.ur:

----------

ur
""

.. note:: ID: ``cards.xnli.ur``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "ur",
              "path": "xnli",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "mapper": {
                      "validation_matched": "validation"
                  },
                  "type": "rename_splits"
              },
              "splitters.small_no_test",
              {
                  "mappers": {
                      "label": {
                          "0": "entailment",
                          "1": "neutral",
                          "2": "contradiction"
                      }
                  },
                  "type": "map_instance_values"
              },
              {
                  "fields": {
                      "choices": [
                          "entailment",
                          "neutral",
                          "contradiction"
                      ]
                  },
                  "type": "add_fields"
              }
          ],
          "task": "tasks.nli",
          "templates": "templates.classification.nli.all",
          "type": "task_card"
      }

References: :ref:`tasks.nli <tasks.nli>`, :ref:`splitters.small_no_test <splitters.small_no_test>`, :ref:`templates.classification.nli.all <templates.classification.nli.all>`

|
|



.. _cards.xnli.bg:

----------

bg
""

.. note:: ID: ``cards.xnli.bg``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "bg",
              "path": "xnli",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "mapper": {
                      "validation_matched": "validation"
                  },
                  "type": "rename_splits"
              },
              "splitters.small_no_test",
              {
                  "mappers": {
                      "label": {
                          "0": "entailment",
                          "1": "neutral",
                          "2": "contradiction"
                      }
                  },
                  "type": "map_instance_values"
              },
              {
                  "fields": {
                      "choices": [
                          "entailment",
                          "neutral",
                          "contradiction"
                      ]
                  },
                  "type": "add_fields"
              }
          ],
          "task": "tasks.nli",
          "templates": "templates.classification.nli.all",
          "type": "task_card"
      }

References: :ref:`tasks.nli <tasks.nli>`, :ref:`splitters.small_no_test <splitters.small_no_test>`, :ref:`templates.classification.nli.all <templates.classification.nli.all>`

|
|



.. _cards.xnli.es:

----------

es
""

.. note:: ID: ``cards.xnli.es``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "es",
              "path": "xnli",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "mapper": {
                      "validation_matched": "validation"
                  },
                  "type": "rename_splits"
              },
              "splitters.small_no_test",
              {
                  "mappers": {
                      "label": {
                          "0": "entailment",
                          "1": "neutral",
                          "2": "contradiction"
                      }
                  },
                  "type": "map_instance_values"
              },
              {
                  "fields": {
                      "choices": [
                          "entailment",
                          "neutral",
                          "contradiction"
                      ]
                  },
                  "type": "add_fields"
              }
          ],
          "task": "tasks.nli",
          "templates": "templates.classification.nli.all",
          "type": "task_card"
      }

References: :ref:`tasks.nli <tasks.nli>`, :ref:`splitters.small_no_test <splitters.small_no_test>`, :ref:`templates.classification.nli.all <templates.classification.nli.all>`

|
|



.. _cards.xnli.en:

----------

en
""

.. note:: ID: ``cards.xnli.en``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "en",
              "path": "xnli",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "mapper": {
                      "validation_matched": "validation"
                  },
                  "type": "rename_splits"
              },
              "splitters.small_no_test",
              {
                  "mappers": {
                      "label": {
                          "0": "entailment",
                          "1": "neutral",
                          "2": "contradiction"
                      }
                  },
                  "type": "map_instance_values"
              },
              {
                  "fields": {
                      "choices": [
                          "entailment",
                          "neutral",
                          "contradiction"
                      ]
                  },
                  "type": "add_fields"
              }
          ],
          "task": "tasks.nli",
          "templates": "templates.classification.nli.all",
          "type": "task_card"
      }

References: :ref:`tasks.nli <tasks.nli>`, :ref:`splitters.small_no_test <splitters.small_no_test>`, :ref:`templates.classification.nli.all <templates.classification.nli.all>`

|
|



.. _cards.xnli.el:

----------

el
""

.. note:: ID: ``cards.xnli.el``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "el",
              "path": "xnli",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "mapper": {
                      "validation_matched": "validation"
                  },
                  "type": "rename_splits"
              },
              "splitters.small_no_test",
              {
                  "mappers": {
                      "label": {
                          "0": "entailment",
                          "1": "neutral",
                          "2": "contradiction"
                      }
                  },
                  "type": "map_instance_values"
              },
              {
                  "fields": {
                      "choices": [
                          "entailment",
                          "neutral",
                          "contradiction"
                      ]
                  },
                  "type": "add_fields"
              }
          ],
          "task": "tasks.nli",
          "templates": "templates.classification.nli.all",
          "type": "task_card"
      }

References: :ref:`tasks.nli <tasks.nli>`, :ref:`splitters.small_no_test <splitters.small_no_test>`, :ref:`templates.classification.nli.all <templates.classification.nli.all>`

|
|



.. _cards.xnli.tr:

----------

tr
""

.. note:: ID: ``cards.xnli.tr``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "tr",
              "path": "xnli",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "mapper": {
                      "validation_matched": "validation"
                  },
                  "type": "rename_splits"
              },
              "splitters.small_no_test",
              {
                  "mappers": {
                      "label": {
                          "0": "entailment",
                          "1": "neutral",
                          "2": "contradiction"
                      }
                  },
                  "type": "map_instance_values"
              },
              {
                  "fields": {
                      "choices": [
                          "entailment",
                          "neutral",
                          "contradiction"
                      ]
                  },
                  "type": "add_fields"
              }
          ],
          "task": "tasks.nli",
          "templates": "templates.classification.nli.all",
          "type": "task_card"
      }

References: :ref:`tasks.nli <tasks.nli>`, :ref:`splitters.small_no_test <splitters.small_no_test>`, :ref:`templates.classification.nli.all <templates.classification.nli.all>`

|
|



.. _cards.xnli.zh:

----------

zh
""

.. note:: ID: ``cards.xnli.zh``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "zh",
              "path": "xnli",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "mapper": {
                      "validation_matched": "validation"
                  },
                  "type": "rename_splits"
              },
              "splitters.small_no_test",
              {
                  "mappers": {
                      "label": {
                          "0": "entailment",
                          "1": "neutral",
                          "2": "contradiction"
                      }
                  },
                  "type": "map_instance_values"
              },
              {
                  "fields": {
                      "choices": [
                          "entailment",
                          "neutral",
                          "contradiction"
                      ]
                  },
                  "type": "add_fields"
              }
          ],
          "task": "tasks.nli",
          "templates": "templates.classification.nli.all",
          "type": "task_card"
      }

References: :ref:`tasks.nli <tasks.nli>`, :ref:`splitters.small_no_test <splitters.small_no_test>`, :ref:`templates.classification.nli.all <templates.classification.nli.all>`

|
|



.. _cards.xnli.th:

----------

th
""

.. note:: ID: ``cards.xnli.th``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "th",
              "path": "xnli",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "mapper": {
                      "validation_matched": "validation"
                  },
                  "type": "rename_splits"
              },
              "splitters.small_no_test",
              {
                  "mappers": {
                      "label": {
                          "0": "entailment",
                          "1": "neutral",
                          "2": "contradiction"
                      }
                  },
                  "type": "map_instance_values"
              },
              {
                  "fields": {
                      "choices": [
                          "entailment",
                          "neutral",
                          "contradiction"
                      ]
                  },
                  "type": "add_fields"
              }
          ],
          "task": "tasks.nli",
          "templates": "templates.classification.nli.all",
          "type": "task_card"
      }

References: :ref:`tasks.nli <tasks.nli>`, :ref:`splitters.small_no_test <splitters.small_no_test>`, :ref:`templates.classification.nli.all <templates.classification.nli.all>`

|
|



.. _cards.xnli.ar:

----------

ar
""

.. note:: ID: ``cards.xnli.ar``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "ar",
              "path": "xnli",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "mapper": {
                      "validation_matched": "validation"
                  },
                  "type": "rename_splits"
              },
              "splitters.small_no_test",
              {
                  "mappers": {
                      "label": {
                          "0": "entailment",
                          "1": "neutral",
                          "2": "contradiction"
                      }
                  },
                  "type": "map_instance_values"
              },
              {
                  "fields": {
                      "choices": [
                          "entailment",
                          "neutral",
                          "contradiction"
                      ]
                  },
                  "type": "add_fields"
              }
          ],
          "task": "tasks.nli",
          "templates": "templates.classification.nli.all",
          "type": "task_card"
      }

References: :ref:`tasks.nli <tasks.nli>`, :ref:`splitters.small_no_test <splitters.small_no_test>`, :ref:`templates.classification.nli.all <templates.classification.nli.all>`

|
|



.. _cards.xnli.sw:

----------

sw
""

.. note:: ID: ``cards.xnli.sw``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "sw",
              "path": "xnli",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "mapper": {
                      "validation_matched": "validation"
                  },
                  "type": "rename_splits"
              },
              "splitters.small_no_test",
              {
                  "mappers": {
                      "label": {
                          "0": "entailment",
                          "1": "neutral",
                          "2": "contradiction"
                      }
                  },
                  "type": "map_instance_values"
              },
              {
                  "fields": {
                      "choices": [
                          "entailment",
                          "neutral",
                          "contradiction"
                      ]
                  },
                  "type": "add_fields"
              }
          ],
          "task": "tasks.nli",
          "templates": "templates.classification.nli.all",
          "type": "task_card"
      }

References: :ref:`tasks.nli <tasks.nli>`, :ref:`splitters.small_no_test <splitters.small_no_test>`, :ref:`templates.classification.nli.all <templates.classification.nli.all>`

|
|



.. _cards.xnli.de:

----------

de
""

.. note:: ID: ``cards.xnli.de``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "de",
              "path": "xnli",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "mapper": {
                      "validation_matched": "validation"
                  },
                  "type": "rename_splits"
              },
              "splitters.small_no_test",
              {
                  "mappers": {
                      "label": {
                          "0": "entailment",
                          "1": "neutral",
                          "2": "contradiction"
                      }
                  },
                  "type": "map_instance_values"
              },
              {
                  "fields": {
                      "choices": [
                          "entailment",
                          "neutral",
                          "contradiction"
                      ]
                  },
                  "type": "add_fields"
              }
          ],
          "task": "tasks.nli",
          "templates": "templates.classification.nli.all",
          "type": "task_card"
      }

References: :ref:`tasks.nli <tasks.nli>`, :ref:`splitters.small_no_test <splitters.small_no_test>`, :ref:`templates.classification.nli.all <templates.classification.nli.all>`

|
|



.. _cards.xnli.ru:

----------

ru
""

.. note:: ID: ``cards.xnli.ru``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "ru",
              "path": "xnli",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "mapper": {
                      "validation_matched": "validation"
                  },
                  "type": "rename_splits"
              },
              "splitters.small_no_test",
              {
                  "mappers": {
                      "label": {
                          "0": "entailment",
                          "1": "neutral",
                          "2": "contradiction"
                      }
                  },
                  "type": "map_instance_values"
              },
              {
                  "fields": {
                      "choices": [
                          "entailment",
                          "neutral",
                          "contradiction"
                      ]
                  },
                  "type": "add_fields"
              }
          ],
          "task": "tasks.nli",
          "templates": "templates.classification.nli.all",
          "type": "task_card"
      }

References: :ref:`tasks.nli <tasks.nli>`, :ref:`splitters.small_no_test <splitters.small_no_test>`, :ref:`templates.classification.nli.all <templates.classification.nli.all>`

|
|



.. _cards.xnli.hi:

----------

hi
""

.. note:: ID: ``cards.xnli.hi``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "hi",
              "path": "xnli",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "mapper": {
                      "validation_matched": "validation"
                  },
                  "type": "rename_splits"
              },
              "splitters.small_no_test",
              {
                  "mappers": {
                      "label": {
                          "0": "entailment",
                          "1": "neutral",
                          "2": "contradiction"
                      }
                  },
                  "type": "map_instance_values"
              },
              {
                  "fields": {
                      "choices": [
                          "entailment",
                          "neutral",
                          "contradiction"
                      ]
                  },
                  "type": "add_fields"
              }
          ],
          "task": "tasks.nli",
          "templates": "templates.classification.nli.all",
          "type": "task_card"
      }

References: :ref:`tasks.nli <tasks.nli>`, :ref:`splitters.small_no_test <splitters.small_no_test>`, :ref:`templates.classification.nli.all <templates.classification.nli.all>`

|
|



.. _.cards.mlsum:

----------

mlsum
^^^^^



.. _cards.mlsum.fr:

----------

fr
""

.. note:: ID: ``cards.mlsum.fr``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "fr",
              "path": "mlsum",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "field_to_field": {
                      "text": "document"
                  },
                  "type": "rename_fields"
              },
              {
                  "fields": {
                      "document_type": "document"
                  },
                  "type": "add_fields"
              }
          ],
          "task": {
              "inputs": [
                  "document",
                  "document_type"
              ],
              "metrics": [
                  "metrics.rouge"
              ],
              "outputs": [
                  "summary"
              ],
              "type": "form_task"
          },
          "templates": {
              "items": [
                  {
                      "input_format": "{document}",
                      "output_format": "{summary}",
                      "type": "input_output_template"
                  }
              ],
              "type": "templates_list"
          },
          "type": "task_card"
      }

References: :ref:`metrics.rouge <metrics.rouge>`

|
|



.. _cards.mlsum.es:

----------

es
""

.. note:: ID: ``cards.mlsum.es``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "es",
              "path": "mlsum",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "field_to_field": {
                      "text": "document"
                  },
                  "type": "rename_fields"
              },
              {
                  "fields": {
                      "document_type": "document"
                  },
                  "type": "add_fields"
              }
          ],
          "task": {
              "inputs": [
                  "document",
                  "document_type"
              ],
              "metrics": [
                  "metrics.rouge"
              ],
              "outputs": [
                  "summary"
              ],
              "type": "form_task"
          },
          "templates": {
              "items": [
                  {
                      "input_format": "{document}",
                      "output_format": "{summary}",
                      "type": "input_output_template"
                  }
              ],
              "type": "templates_list"
          },
          "type": "task_card"
      }

References: :ref:`metrics.rouge <metrics.rouge>`

|
|



.. _cards.mlsum.tu:

----------

tu
""

.. note:: ID: ``cards.mlsum.tu``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "tu",
              "path": "mlsum",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "field_to_field": {
                      "text": "document"
                  },
                  "type": "rename_fields"
              },
              {
                  "fields": {
                      "document_type": "document"
                  },
                  "type": "add_fields"
              }
          ],
          "task": {
              "inputs": [
                  "document",
                  "document_type"
              ],
              "metrics": [
                  "metrics.rouge"
              ],
              "outputs": [
                  "summary"
              ],
              "type": "form_task"
          },
          "templates": {
              "items": [
                  {
                      "input_format": "{document}",
                      "output_format": "{summary}",
                      "type": "input_output_template"
                  }
              ],
              "type": "templates_list"
          },
          "type": "task_card"
      }

References: :ref:`metrics.rouge <metrics.rouge>`

|
|



.. _cards.mlsum.de:

----------

de
""

.. note:: ID: ``cards.mlsum.de``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "de",
              "path": "mlsum",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "field_to_field": {
                      "text": "document"
                  },
                  "type": "rename_fields"
              },
              {
                  "fields": {
                      "document_type": "document"
                  },
                  "type": "add_fields"
              }
          ],
          "task": {
              "inputs": [
                  "document",
                  "document_type"
              ],
              "metrics": [
                  "metrics.rouge"
              ],
              "outputs": [
                  "summary"
              ],
              "type": "form_task"
          },
          "templates": {
              "items": [
                  {
                      "input_format": "{document}",
                      "output_format": "{summary}",
                      "type": "input_output_template"
                  }
              ],
              "type": "templates_list"
          },
          "type": "task_card"
      }

References: :ref:`metrics.rouge <metrics.rouge>`

|
|



.. _cards.mlsum.ru:

----------

ru
""

.. note:: ID: ``cards.mlsum.ru``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "ru",
              "path": "mlsum",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "field_to_field": {
                      "text": "document"
                  },
                  "type": "rename_fields"
              },
              {
                  "fields": {
                      "document_type": "document"
                  },
                  "type": "add_fields"
              }
          ],
          "task": {
              "inputs": [
                  "document",
                  "document_type"
              ],
              "metrics": [
                  "metrics.rouge"
              ],
              "outputs": [
                  "summary"
              ],
              "type": "form_task"
          },
          "templates": {
              "items": [
                  {
                      "input_format": "{document}",
                      "output_format": "{summary}",
                      "type": "input_output_template"
                  }
              ],
              "type": "templates_list"
          },
          "type": "task_card"
      }

References: :ref:`metrics.rouge <metrics.rouge>`

|
|



.. _cards.race_all:

----------

race_all
^^^^^^^^

.. note:: ID: ``cards.race_all``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "all",
              "path": "race",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "fields": {
                      "numbering": [
                          "A",
                          "B",
                          "C",
                          "D",
                          "E",
                          "F",
                          "G",
                          "H",
                          "I",
                          "J",
                          "K",
                          "L",
                          "M",
                          "N",
                          "O",
                          "P",
                          "Q",
                          "R",
                          "S",
                          "T",
                          "U",
                          "V",
                          "W",
                          "X",
                          "Y",
                          "Z"
                      ],
                      "topic": "reading comprehension"
                  },
                  "type": "add_fields"
              },
              {
                  "index_of": "answer",
                  "search_in": "numbering",
                  "to_field": "index",
                  "type": "index_of"
              },
              {
                  "field_to_field": {
                      "article": "context",
                      "index": "_index",
                      "numbering": "_numbering",
                      "options": "_options",
                      "question": "sentence1",
                      "topic": "topic"
                  },
                  "type": "rename_fields"
              },
              {
                  "field": "_numbering",
                  "index": "_index",
                  "to_field": "number",
                  "type": "take_by_field"
              },
              {
                  "field": "_options",
                  "index": "_index",
                  "to_field": "answer",
                  "type": "take_by_field"
              },
              {
                  "fields": [
                      "_numbering",
                      "_options"
                  ],
                  "to_field": "choices",
                  "type": "zip_field_values"
              },
              {
                  "field": "choices/*",
                  "process_every_value": true,
                  "separator": ". ",
                  "to_field": "choices_list",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "field": "choices_list",
                  "index": "_index",
                  "to_field": "number_and_answer",
                  "type": "take_by_field"
              },
              {
                  "field": "choices/*/0",
                  "separator": ",",
                  "to_field": "numbers",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "add": [
                      ""
                  ],
                  "field": "choices_list",
                  "to_field": "choices_list",
                  "type": "add_constant"
              },
              {
                  "field": "choices_list",
                  "separator": "\n",
                  "to_field": "choices",
                  "type": "join_str"
              },
              {
                  "field_to_field": {
                      "number": "label"
                  },
                  "type": "rename_fields"
              }
          ],
          "task": {
              "inputs": [
                  "choices",
                  "sentence1",
                  "numbers",
                  "topic",
                  "context"
              ],
              "metrics": [
                  "metrics.accuracy"
              ],
              "outputs": [
                  "label"
              ],
              "type": "form_task"
          },
          "templates": "templates.qa.multiple_choice.context.all",
          "type": "task_card"
      }

References: :ref:`metrics.accuracy <metrics.accuracy>`, :ref:`templates.qa.multiple_choice.context.all <templates.qa.multiple_choice.context.all>`

|
|



.. _.cards.almostEvilML_qa_by_lang:

----------

almostEvilML_qa_by_lang
^^^^^^^^^^^^^^^^^^^^^^^



.. _cards.almostEvilML_qa_by_lang.fr:

----------

fr
""

.. note:: ID: ``cards.almostEvilML_qa_by_lang.fr``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "path": "0x22almostEvil/multilingual-wikihow-qa-16k",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "_argv": [
                      "METADATA"
                  ],
                  "function": "json.loads",
                  "to_field": "metadata",
                  "type": "apply"
              },
              {
                  "field_to_field": [
                      [
                          "metadata/language",
                          "extracted_language"
                      ]
                  ],
                  "type": "copy_fields",
                  "use_query": true
              },
              {
                  "required_values": {
                      "extracted_language": "fr"
                  },
                  "type": "filter_by_values"
              },
              {
                  "fields": [
                      "extracted_language",
                      "metadata"
                  ],
                  "type": "remove_fields"
              },
              {
                  "mix": {
                      "test": "train[5%]",
                      "train": "train[90%]",
                      "validation": "train[5%]"
                  },
                  "type": "split_random_mix"
              },
              {
                  "field_to_field": {
                      "INSTRUCTION": "question"
                  },
                  "type": "rename_fields"
              },
              {
                  "fields": [
                      "RESPONSE"
                  ],
                  "to_field": "answers",
                  "type": "list_field_values"
              }
          ],
          "task": {
              "inputs": [
                  "question"
              ],
              "metrics": [
                  "metrics.rouge"
              ],
              "outputs": [
                  "answers"
              ],
              "type": "form_task"
          },
          "templates": "templates.qa.open.all",
          "type": "task_card"
      }

References: :ref:`metrics.rouge <metrics.rouge>`, :ref:`templates.qa.open.all <templates.qa.open.all>`

|
|



.. _cards.almostEvilML_qa_by_lang.es:

----------

es
""

.. note:: ID: ``cards.almostEvilML_qa_by_lang.es``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "path": "0x22almostEvil/multilingual-wikihow-qa-16k",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "_argv": [
                      "METADATA"
                  ],
                  "function": "json.loads",
                  "to_field": "metadata",
                  "type": "apply"
              },
              {
                  "field_to_field": [
                      [
                          "metadata/language",
                          "extracted_language"
                      ]
                  ],
                  "type": "copy_fields",
                  "use_query": true
              },
              {
                  "required_values": {
                      "extracted_language": "es"
                  },
                  "type": "filter_by_values"
              },
              {
                  "fields": [
                      "extracted_language",
                      "metadata"
                  ],
                  "type": "remove_fields"
              },
              {
                  "mix": {
                      "test": "train[5%]",
                      "train": "train[90%]",
                      "validation": "train[5%]"
                  },
                  "type": "split_random_mix"
              },
              {
                  "field_to_field": {
                      "INSTRUCTION": "question"
                  },
                  "type": "rename_fields"
              },
              {
                  "fields": [
                      "RESPONSE"
                  ],
                  "to_field": "answers",
                  "type": "list_field_values"
              }
          ],
          "task": {
              "inputs": [
                  "question"
              ],
              "metrics": [
                  "metrics.rouge"
              ],
              "outputs": [
                  "answers"
              ],
              "type": "form_task"
          },
          "templates": "templates.qa.open.all",
          "type": "task_card"
      }

References: :ref:`metrics.rouge <metrics.rouge>`, :ref:`templates.qa.open.all <templates.qa.open.all>`

|
|



.. _cards.almostEvilML_qa_by_lang.en:

----------

en
""

.. note:: ID: ``cards.almostEvilML_qa_by_lang.en``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "path": "0x22almostEvil/multilingual-wikihow-qa-16k",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "_argv": [
                      "METADATA"
                  ],
                  "function": "json.loads",
                  "to_field": "metadata",
                  "type": "apply"
              },
              {
                  "field_to_field": [
                      [
                          "metadata/language",
                          "extracted_language"
                      ]
                  ],
                  "type": "copy_fields",
                  "use_query": true
              },
              {
                  "required_values": {
                      "extracted_language": "en"
                  },
                  "type": "filter_by_values"
              },
              {
                  "fields": [
                      "extracted_language",
                      "metadata"
                  ],
                  "type": "remove_fields"
              },
              {
                  "mix": {
                      "test": "train[5%]",
                      "train": "train[90%]",
                      "validation": "train[5%]"
                  },
                  "type": "split_random_mix"
              },
              {
                  "field_to_field": {
                      "INSTRUCTION": "question"
                  },
                  "type": "rename_fields"
              },
              {
                  "fields": [
                      "RESPONSE"
                  ],
                  "to_field": "answers",
                  "type": "list_field_values"
              }
          ],
          "task": {
              "inputs": [
                  "question"
              ],
              "metrics": [
                  "metrics.rouge"
              ],
              "outputs": [
                  "answers"
              ],
              "type": "form_task"
          },
          "templates": "templates.qa.open.all",
          "type": "task_card"
      }

References: :ref:`metrics.rouge <metrics.rouge>`, :ref:`templates.qa.open.all <templates.qa.open.all>`

|
|



.. _cards.almostEvilML_qa_by_lang.pt:

----------

pt
""

.. note:: ID: ``cards.almostEvilML_qa_by_lang.pt``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "path": "0x22almostEvil/multilingual-wikihow-qa-16k",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "_argv": [
                      "METADATA"
                  ],
                  "function": "json.loads",
                  "to_field": "metadata",
                  "type": "apply"
              },
              {
                  "field_to_field": [
                      [
                          "metadata/language",
                          "extracted_language"
                      ]
                  ],
                  "type": "copy_fields",
                  "use_query": true
              },
              {
                  "required_values": {
                      "extracted_language": "pt"
                  },
                  "type": "filter_by_values"
              },
              {
                  "fields": [
                      "extracted_language",
                      "metadata"
                  ],
                  "type": "remove_fields"
              },
              {
                  "mix": {
                      "test": "train[5%]",
                      "train": "train[90%]",
                      "validation": "train[5%]"
                  },
                  "type": "split_random_mix"
              },
              {
                  "field_to_field": {
                      "INSTRUCTION": "question"
                  },
                  "type": "rename_fields"
              },
              {
                  "fields": [
                      "RESPONSE"
                  ],
                  "to_field": "answers",
                  "type": "list_field_values"
              }
          ],
          "task": {
              "inputs": [
                  "question"
              ],
              "metrics": [
                  "metrics.rouge"
              ],
              "outputs": [
                  "answers"
              ],
              "type": "form_task"
          },
          "templates": "templates.qa.open.all",
          "type": "task_card"
      }

References: :ref:`metrics.rouge <metrics.rouge>`, :ref:`templates.qa.open.all <templates.qa.open.all>`

|
|



.. _cards.almostEvilML_qa_by_lang.de:

----------

de
""

.. note:: ID: ``cards.almostEvilML_qa_by_lang.de``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "path": "0x22almostEvil/multilingual-wikihow-qa-16k",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "_argv": [
                      "METADATA"
                  ],
                  "function": "json.loads",
                  "to_field": "metadata",
                  "type": "apply"
              },
              {
                  "field_to_field": [
                      [
                          "metadata/language",
                          "extracted_language"
                      ]
                  ],
                  "type": "copy_fields",
                  "use_query": true
              },
              {
                  "required_values": {
                      "extracted_language": "de"
                  },
                  "type": "filter_by_values"
              },
              {
                  "fields": [
                      "extracted_language",
                      "metadata"
                  ],
                  "type": "remove_fields"
              },
              {
                  "mix": {
                      "test": "train[5%]",
                      "train": "train[90%]",
                      "validation": "train[5%]"
                  },
                  "type": "split_random_mix"
              },
              {
                  "field_to_field": {
                      "INSTRUCTION": "question"
                  },
                  "type": "rename_fields"
              },
              {
                  "fields": [
                      "RESPONSE"
                  ],
                  "to_field": "answers",
                  "type": "list_field_values"
              }
          ],
          "task": {
              "inputs": [
                  "question"
              ],
              "metrics": [
                  "metrics.rouge"
              ],
              "outputs": [
                  "answers"
              ],
              "type": "form_task"
          },
          "templates": "templates.qa.open.all",
          "type": "task_card"
      }

References: :ref:`metrics.rouge <metrics.rouge>`, :ref:`templates.qa.open.all <templates.qa.open.all>`

|
|



.. _cards.almostEvilML_qa_by_lang.it:

----------

it
""

.. note:: ID: ``cards.almostEvilML_qa_by_lang.it``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "path": "0x22almostEvil/multilingual-wikihow-qa-16k",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "_argv": [
                      "METADATA"
                  ],
                  "function": "json.loads",
                  "to_field": "metadata",
                  "type": "apply"
              },
              {
                  "field_to_field": [
                      [
                          "metadata/language",
                          "extracted_language"
                      ]
                  ],
                  "type": "copy_fields",
                  "use_query": true
              },
              {
                  "required_values": {
                      "extracted_language": "it"
                  },
                  "type": "filter_by_values"
              },
              {
                  "fields": [
                      "extracted_language",
                      "metadata"
                  ],
                  "type": "remove_fields"
              },
              {
                  "mix": {
                      "test": "train[5%]",
                      "train": "train[90%]",
                      "validation": "train[5%]"
                  },
                  "type": "split_random_mix"
              },
              {
                  "field_to_field": {
                      "INSTRUCTION": "question"
                  },
                  "type": "rename_fields"
              },
              {
                  "fields": [
                      "RESPONSE"
                  ],
                  "to_field": "answers",
                  "type": "list_field_values"
              }
          ],
          "task": {
              "inputs": [
                  "question"
              ],
              "metrics": [
                  "metrics.rouge"
              ],
              "outputs": [
                  "answers"
              ],
              "type": "form_task"
          },
          "templates": "templates.qa.open.all",
          "type": "task_card"
      }

References: :ref:`metrics.rouge <metrics.rouge>`, :ref:`templates.qa.open.all <templates.qa.open.all>`

|
|



.. _cards.almostEvilML_qa_by_lang.ru:

----------

ru
""

.. note:: ID: ``cards.almostEvilML_qa_by_lang.ru``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "path": "0x22almostEvil/multilingual-wikihow-qa-16k",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "_argv": [
                      "METADATA"
                  ],
                  "function": "json.loads",
                  "to_field": "metadata",
                  "type": "apply"
              },
              {
                  "field_to_field": [
                      [
                          "metadata/language",
                          "extracted_language"
                      ]
                  ],
                  "type": "copy_fields",
                  "use_query": true
              },
              {
                  "required_values": {
                      "extracted_language": "ru"
                  },
                  "type": "filter_by_values"
              },
              {
                  "fields": [
                      "extracted_language",
                      "metadata"
                  ],
                  "type": "remove_fields"
              },
              {
                  "mix": {
                      "test": "train[5%]",
                      "train": "train[90%]",
                      "validation": "train[5%]"
                  },
                  "type": "split_random_mix"
              },
              {
                  "field_to_field": {
                      "INSTRUCTION": "question"
                  },
                  "type": "rename_fields"
              },
              {
                  "fields": [
                      "RESPONSE"
                  ],
                  "to_field": "answers",
                  "type": "list_field_values"
              }
          ],
          "task": {
              "inputs": [
                  "question"
              ],
              "metrics": [
                  "metrics.rouge"
              ],
              "outputs": [
                  "answers"
              ],
              "type": "form_task"
          },
          "templates": "templates.qa.open.all",
          "type": "task_card"
      }

References: :ref:`metrics.rouge <metrics.rouge>`, :ref:`templates.qa.open.all <templates.qa.open.all>`

|
|



.. _cards.almostEvilML_qa_by_lang.nl:

----------

nl
""

.. note:: ID: ``cards.almostEvilML_qa_by_lang.nl``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "path": "0x22almostEvil/multilingual-wikihow-qa-16k",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "_argv": [
                      "METADATA"
                  ],
                  "function": "json.loads",
                  "to_field": "metadata",
                  "type": "apply"
              },
              {
                  "field_to_field": [
                      [
                          "metadata/language",
                          "extracted_language"
                      ]
                  ],
                  "type": "copy_fields",
                  "use_query": true
              },
              {
                  "required_values": {
                      "extracted_language": "nl"
                  },
                  "type": "filter_by_values"
              },
              {
                  "fields": [
                      "extracted_language",
                      "metadata"
                  ],
                  "type": "remove_fields"
              },
              {
                  "mix": {
                      "test": "train[5%]",
                      "train": "train[90%]",
                      "validation": "train[5%]"
                  },
                  "type": "split_random_mix"
              },
              {
                  "field_to_field": {
                      "INSTRUCTION": "question"
                  },
                  "type": "rename_fields"
              },
              {
                  "fields": [
                      "RESPONSE"
                  ],
                  "to_field": "answers",
                  "type": "list_field_values"
              }
          ],
          "task": {
              "inputs": [
                  "question"
              ],
              "metrics": [
                  "metrics.rouge"
              ],
              "outputs": [
                  "answers"
              ],
              "type": "form_task"
          },
          "templates": "templates.qa.open.all",
          "type": "task_card"
      }

References: :ref:`metrics.rouge <metrics.rouge>`, :ref:`templates.qa.open.all <templates.qa.open.all>`

|
|



.. _cards.race_middle:

----------

race_middle
^^^^^^^^^^^

.. note:: ID: ``cards.race_middle``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "middle",
              "path": "race",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "fields": {
                      "numbering": [
                          "A",
                          "B",
                          "C",
                          "D",
                          "E",
                          "F",
                          "G",
                          "H",
                          "I",
                          "J",
                          "K",
                          "L",
                          "M",
                          "N",
                          "O",
                          "P",
                          "Q",
                          "R",
                          "S",
                          "T",
                          "U",
                          "V",
                          "W",
                          "X",
                          "Y",
                          "Z"
                      ],
                      "topic": "reading comprehension"
                  },
                  "type": "add_fields"
              },
              {
                  "index_of": "answer",
                  "search_in": "numbering",
                  "to_field": "index",
                  "type": "index_of"
              },
              {
                  "field_to_field": {
                      "article": "context",
                      "index": "_index",
                      "numbering": "_numbering",
                      "options": "_options",
                      "question": "sentence1",
                      "topic": "topic"
                  },
                  "type": "rename_fields"
              },
              {
                  "field": "_numbering",
                  "index": "_index",
                  "to_field": "number",
                  "type": "take_by_field"
              },
              {
                  "field": "_options",
                  "index": "_index",
                  "to_field": "answer",
                  "type": "take_by_field"
              },
              {
                  "fields": [
                      "_numbering",
                      "_options"
                  ],
                  "to_field": "choices",
                  "type": "zip_field_values"
              },
              {
                  "field": "choices/*",
                  "process_every_value": true,
                  "separator": ". ",
                  "to_field": "choices_list",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "field": "choices_list",
                  "index": "_index",
                  "to_field": "number_and_answer",
                  "type": "take_by_field"
              },
              {
                  "field": "choices/*/0",
                  "separator": ",",
                  "to_field": "numbers",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "add": [
                      ""
                  ],
                  "field": "choices_list",
                  "to_field": "choices_list",
                  "type": "add_constant"
              },
              {
                  "field": "choices_list",
                  "separator": "\n",
                  "to_field": "choices",
                  "type": "join_str"
              },
              {
                  "field_to_field": {
                      "number": "label"
                  },
                  "type": "rename_fields"
              }
          ],
          "task": {
              "inputs": [
                  "choices",
                  "sentence1",
                  "numbers",
                  "topic",
                  "context"
              ],
              "metrics": [
                  "metrics.accuracy"
              ],
              "outputs": [
                  "label"
              ],
              "type": "form_task"
          },
          "templates": "templates.qa.multiple_choice.context.all",
          "type": "task_card"
      }

References: :ref:`metrics.accuracy <metrics.accuracy>`, :ref:`templates.qa.multiple_choice.context.all <templates.qa.multiple_choice.context.all>`

|
|



.. _cards.boolq:

----------

boolq
^^^^^

.. note:: ID: ``cards.boolq``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "path": "boolq",
              "type": "load_hf"
          },
          "preprocess_steps": [
              "splitters.small_no_test",
              {
                  "fields": {
                      "answers": [
                          "yes",
                          "false"
                      ],
                      "topic": "boolean questions"
                  },
                  "type": "add_fields"
              },
              {
                  "fields": {
                      "answer": "str"
                  },
                  "type": "cast_fields"
              },
              {
                  "field_to_field": {
                      "answer": "label",
                      "answers": "answers",
                      "passage": "context",
                      "question": "question",
                      "topic": "topic"
                  },
                  "type": "rename_fields"
              },
              {
                  "field": "answers",
                  "separator": ",",
                  "to_field": "answers",
                  "type": "join_str"
              }
          ],
          "task": {
              "inputs": [
                  "question",
                  "label",
                  "context",
                  "topic"
              ],
              "metrics": [
                  "metrics.accuracy"
              ],
              "outputs": [
                  "label"
              ],
              "type": "form_task"
          },
          "templates": {
              "clean": {
                  "input_format": "Context: {context}\nQuestion: {question}.\nAnswer:",
                  "output_format": "{label}",
                  "type": "input_output_template"
              }
          },
          "type": "task_card"
      }

References: :ref:`metrics.accuracy <metrics.accuracy>`, :ref:`splitters.small_no_test <splitters.small_no_test>`

|
|



.. _cards.piqa_high:

----------

piqa_high
^^^^^^^^^

.. note:: ID: ``cards.piqa_high``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "high",
              "path": "race",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "fields": {
                      "numbering": [
                          "A",
                          "B",
                          "C",
                          "D",
                          "E",
                          "F",
                          "G",
                          "H",
                          "I",
                          "J",
                          "K",
                          "L",
                          "M",
                          "N",
                          "O",
                          "P",
                          "Q",
                          "R",
                          "S",
                          "T",
                          "U",
                          "V",
                          "W",
                          "X",
                          "Y",
                          "Z"
                      ],
                      "topic": "reading comprehension"
                  },
                  "type": "add_fields"
              },
              {
                  "index_of": "answer",
                  "search_in": "numbering",
                  "to_field": "index",
                  "type": "index_of"
              },
              {
                  "field_to_field": {
                      "article": "context",
                      "index": "_index",
                      "numbering": "_numbering",
                      "options": "_options",
                      "question": "sentence1",
                      "topic": "topic"
                  },
                  "type": "rename_fields"
              },
              {
                  "field": "_numbering",
                  "index": "_index",
                  "to_field": "number",
                  "type": "take_by_field"
              },
              {
                  "field": "_options",
                  "index": "_index",
                  "to_field": "answer",
                  "type": "take_by_field"
              },
              {
                  "fields": [
                      "_numbering",
                      "_options"
                  ],
                  "to_field": "choices",
                  "type": "zip_field_values"
              },
              {
                  "field": "choices/*",
                  "process_every_value": true,
                  "separator": ". ",
                  "to_field": "choices_list",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "field": "choices_list",
                  "index": "_index",
                  "to_field": "number_and_answer",
                  "type": "take_by_field"
              },
              {
                  "field": "choices/*/0",
                  "separator": ",",
                  "to_field": "numbers",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "field": "choices_list",
                  "separator": " ",
                  "to_field": "choices",
                  "type": "join_str"
              },
              {
                  "field_to_field": {
                      "number": "label"
                  },
                  "type": "rename_fields"
              }
          ],
          "task": {
              "inputs": [
                  "choices",
                  "sentence1",
                  "numbers",
                  "topic",
                  "context"
              ],
              "metrics": [
                  "metrics.accuracy"
              ],
              "outputs": [
                  "label"
              ],
              "type": "form_task"
          },
          "templates": {
              "fm-eval": {
                  "input_format": "The following are multiple choice questions (with answers) about {topic}.\n\n\n                            Context: {context}\nQuestion: {context}\n{sentence1}\nChoose from {numbers}\nAnswers: {choices}\nAnswer:",
                  "output_format": "{label}",
                  "type": "input_output_template"
              },
              "helm": {
                  "input_format": "The following are multiple choice questions (with answers) about {topic}.\n\n\n                            Context: {context}\nQuestion: {context}\n{sentence1}.\nAnswers: {choices}.\nAnswer:",
                  "output_format": "{label}",
                  "type": "input_output_template"
              },
              "lm_eval_harness": {
                  "input_format": "Context: {context}\nQuestion: {context}\n{sentence1}.\nChoices:\n{choices}.\nAnswer:",
                  "output_format": "{label}",
                  "type": "input_output_template"
              },
              "original": {
                  "input_format": "The following are multiple choice questions (with answers) about {topic}.\n\n                            {context}\n{sentence1}.\nAnswers: {choices}.\nAnswer:",
                  "output_format": "{label}",
                  "type": "input_output_template"
              }
          },
          "type": "task_card"
      }

References: :ref:`metrics.accuracy <metrics.accuracy>`

|
|



.. _cards.mrpc:

----------

mrpc
^^^^

.. note:: ID: ``cards.mrpc``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "mrpc",
              "path": "glue",
              "streaming": false,
              "type": "load_hf"
          },
          "preprocess_steps": [
              "splitters.default",
              {
                  "mappers": {
                      "label": {
                          "0": "not equivalent",
                          "1": "equivalent"
                      }
                  },
                  "type": "map_instance_values"
              },
              {
                  "fields": {
                      "choices": [
                          "not equivalent",
                          "equivalent"
                      ]
                  },
                  "type": "add_fields"
              }
          ],
          "task": {
              "inputs": [
                  "choices",
                  "sentence1",
                  "sentence2"
              ],
              "metrics": [
                  "metrics.accuracy"
              ],
              "outputs": [
                  "label"
              ],
              "type": "form_task"
          },
          "templates": {
              "items": [
                  {
                      "input_format": "Given this sentence: {sentence1}, classify if this sentence: {sentence2} is {choices}.",
                      "output_format": "{label}",
                      "type": "input_output_template"
                  }
              ],
              "type": "templates_list"
          },
          "type": "task_card"
      }

References: :ref:`splitters.default <splitters.default>`, :ref:`metrics.accuracy <metrics.accuracy>`

|
|



.. _.cards.winogrande:

----------

winogrande
^^^^^^^^^^



.. _cards.winogrande.l:

----------

l
"

.. note:: ID: ``cards.winogrande.l``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "winogrande_l",
              "path": "winogrande",
              "type": "load_hf"
          },
          "preprocess_steps": [
              "splitters.small_no_test",
              {
                  "fields": {
                      "numbering": [
                          "A",
                          "B",
                          "C",
                          "D",
                          "E",
                          "F",
                          "G",
                          "H",
                          "I",
                          "J",
                          "K",
                          "L",
                          "M",
                          "N",
                          "O",
                          "P",
                          "Q",
                          "R",
                          "S",
                          "T",
                          "U",
                          "V",
                          "W",
                          "X",
                          "Y",
                          "Z"
                      ],
                      "topic": "common sense"
                  },
                  "type": "add_fields"
              },
              {
                  "fields": [
                      "option1",
                      "option2"
                  ],
                  "to_field": "choices",
                  "type": "list_field_values"
              },
              {
                  "fields": {
                      "answer": "int"
                  },
                  "type": "cast_fields"
              },
              {
                  "add": -1,
                  "field": "answer",
                  "type": "add_constant"
              },
              {
                  "field_to_field": {
                      "answer": "_answer",
                      "choices": "_choices",
                      "numbering": "_numbering",
                      "sentence": "sentence1",
                      "topic": "topic"
                  },
                  "type": "rename_fields"
              },
              {
                  "field": "_numbering",
                  "index": "_answer",
                  "to_field": "number",
                  "type": "take_by_field"
              },
              {
                  "field": "_choices",
                  "index": "_answer",
                  "to_field": "answer",
                  "type": "take_by_field"
              },
              {
                  "fields": [
                      "_numbering",
                      "_choices"
                  ],
                  "to_field": "choices",
                  "type": "zip_field_values"
              },
              {
                  "field": "choices/*",
                  "process_every_value": true,
                  "separator": ". ",
                  "to_field": "choices_list",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "field": "choices_list",
                  "index": "_answer",
                  "to_field": "number_and_answer",
                  "type": "take_by_field"
              },
              {
                  "field": "choices/*/0",
                  "separator": ",",
                  "to_field": "numbers",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "add": [
                      ""
                  ],
                  "field": "choices_list",
                  "to_field": "choices_list",
                  "type": "add_constant"
              },
              {
                  "field": "choices_list",
                  "separator": "\n",
                  "to_field": "choices",
                  "type": "join_str"
              },
              {
                  "field_to_field": {
                      "number": "label"
                  },
                  "type": "rename_fields"
              }
          ],
          "task": {
              "inputs": [
                  "choices",
                  "sentence1",
                  "numbers",
                  "topic"
              ],
              "metrics": [
                  "metrics.accuracy"
              ],
              "outputs": [
                  "label"
              ],
              "type": "form_task"
          },
          "templates": "templates.qa.multiple_choice.original.all",
          "type": "task_card"
      }

References: :ref:`metrics.accuracy <metrics.accuracy>`, :ref:`splitters.small_no_test <splitters.small_no_test>`, :ref:`templates.qa.multiple_choice.original.all <templates.qa.multiple_choice.original.all>`

|
|



.. _cards.winogrande.m:

----------

m
"

.. note:: ID: ``cards.winogrande.m``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "winogrande_m",
              "path": "winogrande",
              "type": "load_hf"
          },
          "preprocess_steps": [
              "splitters.small_no_test",
              {
                  "fields": {
                      "numbering": [
                          "A",
                          "B",
                          "C",
                          "D",
                          "E",
                          "F",
                          "G",
                          "H",
                          "I",
                          "J",
                          "K",
                          "L",
                          "M",
                          "N",
                          "O",
                          "P",
                          "Q",
                          "R",
                          "S",
                          "T",
                          "U",
                          "V",
                          "W",
                          "X",
                          "Y",
                          "Z"
                      ],
                      "topic": "common sense"
                  },
                  "type": "add_fields"
              },
              {
                  "fields": [
                      "option1",
                      "option2"
                  ],
                  "to_field": "choices",
                  "type": "list_field_values"
              },
              {
                  "fields": {
                      "answer": "int"
                  },
                  "type": "cast_fields"
              },
              {
                  "add": -1,
                  "field": "answer",
                  "type": "add_constant"
              },
              {
                  "field_to_field": {
                      "answer": "_answer",
                      "choices": "_choices",
                      "numbering": "_numbering",
                      "sentence": "sentence1",
                      "topic": "topic"
                  },
                  "type": "rename_fields"
              },
              {
                  "field": "_numbering",
                  "index": "_answer",
                  "to_field": "number",
                  "type": "take_by_field"
              },
              {
                  "field": "_choices",
                  "index": "_answer",
                  "to_field": "answer",
                  "type": "take_by_field"
              },
              {
                  "fields": [
                      "_numbering",
                      "_choices"
                  ],
                  "to_field": "choices",
                  "type": "zip_field_values"
              },
              {
                  "field": "choices/*",
                  "process_every_value": true,
                  "separator": ". ",
                  "to_field": "choices_list",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "field": "choices_list",
                  "index": "_answer",
                  "to_field": "number_and_answer",
                  "type": "take_by_field"
              },
              {
                  "field": "choices/*/0",
                  "separator": ",",
                  "to_field": "numbers",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "add": [
                      ""
                  ],
                  "field": "choices_list",
                  "to_field": "choices_list",
                  "type": "add_constant"
              },
              {
                  "field": "choices_list",
                  "separator": "\n",
                  "to_field": "choices",
                  "type": "join_str"
              },
              {
                  "field_to_field": {
                      "number": "label"
                  },
                  "type": "rename_fields"
              }
          ],
          "task": {
              "inputs": [
                  "choices",
                  "sentence1",
                  "numbers",
                  "topic"
              ],
              "metrics": [
                  "metrics.accuracy"
              ],
              "outputs": [
                  "label"
              ],
              "type": "form_task"
          },
          "templates": "templates.qa.multiple_choice.original.all",
          "type": "task_card"
      }

References: :ref:`metrics.accuracy <metrics.accuracy>`, :ref:`splitters.small_no_test <splitters.small_no_test>`, :ref:`templates.qa.multiple_choice.original.all <templates.qa.multiple_choice.original.all>`

|
|



.. _cards.winogrande.s:

----------

s
"

.. note:: ID: ``cards.winogrande.s``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "winogrande_s",
              "path": "winogrande",
              "type": "load_hf"
          },
          "preprocess_steps": [
              "splitters.small_no_test",
              {
                  "fields": {
                      "numbering": [
                          "A",
                          "B",
                          "C",
                          "D",
                          "E",
                          "F",
                          "G",
                          "H",
                          "I",
                          "J",
                          "K",
                          "L",
                          "M",
                          "N",
                          "O",
                          "P",
                          "Q",
                          "R",
                          "S",
                          "T",
                          "U",
                          "V",
                          "W",
                          "X",
                          "Y",
                          "Z"
                      ],
                      "topic": "common sense"
                  },
                  "type": "add_fields"
              },
              {
                  "fields": [
                      "option1",
                      "option2"
                  ],
                  "to_field": "choices",
                  "type": "list_field_values"
              },
              {
                  "fields": {
                      "answer": "int"
                  },
                  "type": "cast_fields"
              },
              {
                  "add": -1,
                  "field": "answer",
                  "type": "add_constant"
              },
              {
                  "field_to_field": {
                      "answer": "_answer",
                      "choices": "_choices",
                      "numbering": "_numbering",
                      "sentence": "sentence1",
                      "topic": "topic"
                  },
                  "type": "rename_fields"
              },
              {
                  "field": "_numbering",
                  "index": "_answer",
                  "to_field": "number",
                  "type": "take_by_field"
              },
              {
                  "field": "_choices",
                  "index": "_answer",
                  "to_field": "answer",
                  "type": "take_by_field"
              },
              {
                  "fields": [
                      "_numbering",
                      "_choices"
                  ],
                  "to_field": "choices",
                  "type": "zip_field_values"
              },
              {
                  "field": "choices/*",
                  "process_every_value": true,
                  "separator": ". ",
                  "to_field": "choices_list",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "field": "choices_list",
                  "index": "_answer",
                  "to_field": "number_and_answer",
                  "type": "take_by_field"
              },
              {
                  "field": "choices/*/0",
                  "separator": ",",
                  "to_field": "numbers",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "add": [
                      ""
                  ],
                  "field": "choices_list",
                  "to_field": "choices_list",
                  "type": "add_constant"
              },
              {
                  "field": "choices_list",
                  "separator": "\n",
                  "to_field": "choices",
                  "type": "join_str"
              },
              {
                  "field_to_field": {
                      "number": "label"
                  },
                  "type": "rename_fields"
              }
          ],
          "task": {
              "inputs": [
                  "choices",
                  "sentence1",
                  "numbers",
                  "topic"
              ],
              "metrics": [
                  "metrics.accuracy"
              ],
              "outputs": [
                  "label"
              ],
              "type": "form_task"
          },
          "templates": "templates.qa.multiple_choice.original.all",
          "type": "task_card"
      }

References: :ref:`metrics.accuracy <metrics.accuracy>`, :ref:`splitters.small_no_test <splitters.small_no_test>`, :ref:`templates.qa.multiple_choice.original.all <templates.qa.multiple_choice.original.all>`

|
|



.. _cards.winogrande.xs:

----------

xs
""

.. note:: ID: ``cards.winogrande.xs``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "winogrande_xs",
              "path": "winogrande",
              "type": "load_hf"
          },
          "preprocess_steps": [
              "splitters.small_no_test",
              {
                  "fields": {
                      "numbering": [
                          "A",
                          "B",
                          "C",
                          "D",
                          "E",
                          "F",
                          "G",
                          "H",
                          "I",
                          "J",
                          "K",
                          "L",
                          "M",
                          "N",
                          "O",
                          "P",
                          "Q",
                          "R",
                          "S",
                          "T",
                          "U",
                          "V",
                          "W",
                          "X",
                          "Y",
                          "Z"
                      ],
                      "topic": "common sense"
                  },
                  "type": "add_fields"
              },
              {
                  "fields": [
                      "option1",
                      "option2"
                  ],
                  "to_field": "choices",
                  "type": "list_field_values"
              },
              {
                  "fields": {
                      "answer": "int"
                  },
                  "type": "cast_fields"
              },
              {
                  "add": -1,
                  "field": "answer",
                  "type": "add_constant"
              },
              {
                  "field_to_field": {
                      "answer": "_answer",
                      "choices": "_choices",
                      "numbering": "_numbering",
                      "sentence": "sentence1",
                      "topic": "topic"
                  },
                  "type": "rename_fields"
              },
              {
                  "field": "_numbering",
                  "index": "_answer",
                  "to_field": "number",
                  "type": "take_by_field"
              },
              {
                  "field": "_choices",
                  "index": "_answer",
                  "to_field": "answer",
                  "type": "take_by_field"
              },
              {
                  "fields": [
                      "_numbering",
                      "_choices"
                  ],
                  "to_field": "choices",
                  "type": "zip_field_values"
              },
              {
                  "field": "choices/*",
                  "process_every_value": true,
                  "separator": ". ",
                  "to_field": "choices_list",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "field": "choices_list",
                  "index": "_answer",
                  "to_field": "number_and_answer",
                  "type": "take_by_field"
              },
              {
                  "field": "choices/*/0",
                  "separator": ",",
                  "to_field": "numbers",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "add": [
                      ""
                  ],
                  "field": "choices_list",
                  "to_field": "choices_list",
                  "type": "add_constant"
              },
              {
                  "field": "choices_list",
                  "separator": "\n",
                  "to_field": "choices",
                  "type": "join_str"
              },
              {
                  "field_to_field": {
                      "number": "label"
                  },
                  "type": "rename_fields"
              }
          ],
          "task": {
              "inputs": [
                  "choices",
                  "sentence1",
                  "numbers",
                  "topic"
              ],
              "metrics": [
                  "metrics.accuracy"
              ],
              "outputs": [
                  "label"
              ],
              "type": "form_task"
          },
          "templates": "templates.qa.multiple_choice.original.all",
          "type": "task_card"
      }

References: :ref:`metrics.accuracy <metrics.accuracy>`, :ref:`splitters.small_no_test <splitters.small_no_test>`, :ref:`templates.qa.multiple_choice.original.all <templates.qa.multiple_choice.original.all>`

|
|



.. _cards.winogrande.xl:

----------

xl
""

.. note:: ID: ``cards.winogrande.xl``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "winogrande_xl",
              "path": "winogrande",
              "type": "load_hf"
          },
          "preprocess_steps": [
              "splitters.small_no_test",
              {
                  "fields": {
                      "numbering": [
                          "A",
                          "B",
                          "C",
                          "D",
                          "E",
                          "F",
                          "G",
                          "H",
                          "I",
                          "J",
                          "K",
                          "L",
                          "M",
                          "N",
                          "O",
                          "P",
                          "Q",
                          "R",
                          "S",
                          "T",
                          "U",
                          "V",
                          "W",
                          "X",
                          "Y",
                          "Z"
                      ],
                      "topic": "common sense"
                  },
                  "type": "add_fields"
              },
              {
                  "fields": [
                      "option1",
                      "option2"
                  ],
                  "to_field": "choices",
                  "type": "list_field_values"
              },
              {
                  "fields": {
                      "answer": "int"
                  },
                  "type": "cast_fields"
              },
              {
                  "add": -1,
                  "field": "answer",
                  "type": "add_constant"
              },
              {
                  "field_to_field": {
                      "answer": "_answer",
                      "choices": "_choices",
                      "numbering": "_numbering",
                      "sentence": "sentence1",
                      "topic": "topic"
                  },
                  "type": "rename_fields"
              },
              {
                  "field": "_numbering",
                  "index": "_answer",
                  "to_field": "number",
                  "type": "take_by_field"
              },
              {
                  "field": "_choices",
                  "index": "_answer",
                  "to_field": "answer",
                  "type": "take_by_field"
              },
              {
                  "fields": [
                      "_numbering",
                      "_choices"
                  ],
                  "to_field": "choices",
                  "type": "zip_field_values"
              },
              {
                  "field": "choices/*",
                  "process_every_value": true,
                  "separator": ". ",
                  "to_field": "choices_list",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "field": "choices_list",
                  "index": "_answer",
                  "to_field": "number_and_answer",
                  "type": "take_by_field"
              },
              {
                  "field": "choices/*/0",
                  "separator": ",",
                  "to_field": "numbers",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "add": [
                      ""
                  ],
                  "field": "choices_list",
                  "to_field": "choices_list",
                  "type": "add_constant"
              },
              {
                  "field": "choices_list",
                  "separator": "\n",
                  "to_field": "choices",
                  "type": "join_str"
              },
              {
                  "field_to_field": {
                      "number": "label"
                  },
                  "type": "rename_fields"
              }
          ],
          "task": {
              "inputs": [
                  "choices",
                  "sentence1",
                  "numbers",
                  "topic"
              ],
              "metrics": [
                  "metrics.accuracy"
              ],
              "outputs": [
                  "label"
              ],
              "type": "form_task"
          },
          "templates": "templates.qa.multiple_choice.original.all",
          "type": "task_card"
      }

References: :ref:`metrics.accuracy <metrics.accuracy>`, :ref:`splitters.small_no_test <splitters.small_no_test>`, :ref:`templates.qa.multiple_choice.original.all <templates.qa.multiple_choice.original.all>`

|
|



.. _cards.winogrande.debiased:

----------

debiased
""""""""

.. note:: ID: ``cards.winogrande.debiased``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "winogrande_debiased",
              "path": "winogrande",
              "type": "load_hf"
          },
          "preprocess_steps": [
              "splitters.small_no_test",
              {
                  "fields": {
                      "numbering": [
                          "A",
                          "B",
                          "C",
                          "D",
                          "E",
                          "F",
                          "G",
                          "H",
                          "I",
                          "J",
                          "K",
                          "L",
                          "M",
                          "N",
                          "O",
                          "P",
                          "Q",
                          "R",
                          "S",
                          "T",
                          "U",
                          "V",
                          "W",
                          "X",
                          "Y",
                          "Z"
                      ],
                      "topic": "common sense"
                  },
                  "type": "add_fields"
              },
              {
                  "fields": [
                      "option1",
                      "option2"
                  ],
                  "to_field": "choices",
                  "type": "list_field_values"
              },
              {
                  "fields": {
                      "answer": "int"
                  },
                  "type": "cast_fields"
              },
              {
                  "add": -1,
                  "field": "answer",
                  "type": "add_constant"
              },
              {
                  "field_to_field": {
                      "answer": "_answer",
                      "choices": "_choices",
                      "numbering": "_numbering",
                      "sentence": "sentence1",
                      "topic": "topic"
                  },
                  "type": "rename_fields"
              },
              {
                  "field": "_numbering",
                  "index": "_answer",
                  "to_field": "number",
                  "type": "take_by_field"
              },
              {
                  "field": "_choices",
                  "index": "_answer",
                  "to_field": "answer",
                  "type": "take_by_field"
              },
              {
                  "fields": [
                      "_numbering",
                      "_choices"
                  ],
                  "to_field": "choices",
                  "type": "zip_field_values"
              },
              {
                  "field": "choices/*",
                  "process_every_value": true,
                  "separator": ". ",
                  "to_field": "choices_list",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "field": "choices_list",
                  "index": "_answer",
                  "to_field": "number_and_answer",
                  "type": "take_by_field"
              },
              {
                  "field": "choices/*/0",
                  "separator": ",",
                  "to_field": "numbers",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "add": [
                      ""
                  ],
                  "field": "choices_list",
                  "to_field": "choices_list",
                  "type": "add_constant"
              },
              {
                  "field": "choices_list",
                  "separator": "\n",
                  "to_field": "choices",
                  "type": "join_str"
              },
              {
                  "field_to_field": {
                      "number": "label"
                  },
                  "type": "rename_fields"
              }
          ],
          "task": {
              "inputs": [
                  "choices",
                  "sentence1",
                  "numbers",
                  "topic"
              ],
              "metrics": [
                  "metrics.accuracy"
              ],
              "outputs": [
                  "label"
              ],
              "type": "form_task"
          },
          "templates": "templates.qa.multiple_choice.original.all",
          "type": "task_card"
      }

References: :ref:`metrics.accuracy <metrics.accuracy>`, :ref:`splitters.small_no_test <splitters.small_no_test>`, :ref:`templates.qa.multiple_choice.original.all <templates.qa.multiple_choice.original.all>`

|
|



.. _cards.rte:

----------

rte
^^^

.. note:: ID: ``cards.rte``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "rte",
              "path": "glue",
              "type": "load_hf"
          },
          "preprocess_steps": [
              "splitters.small_no_test",
              {
                  "mappers": {
                      "label": {
                          "0": "entailment",
                          "1": "not entailment"
                      }
                  },
                  "type": "map_instance_values"
              },
              {
                  "fields": {
                      "choices": [
                          "entailment",
                          "not entailment"
                      ]
                  },
                  "type": "add_fields"
              },
              {
                  "field_to_field": {
                      "sentence1": "premise",
                      "sentence2": "hypothesis"
                  },
                  "type": "rename_fields"
              }
          ],
          "task": "tasks.nli",
          "templates": "templates.classification.nli.all",
          "type": "task_card"
      }

References: :ref:`tasks.nli <tasks.nli>`, :ref:`splitters.small_no_test <splitters.small_no_test>`, :ref:`templates.classification.nli.all <templates.classification.nli.all>`

|
|



.. _cards.qnli:

----------

qnli
^^^^

.. note:: ID: ``cards.qnli``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "qnli",
              "path": "glue",
              "type": "load_hf"
          },
          "preprocess_steps": [
              "splitters.large_no_test",
              {
                  "mappers": {
                      "label": {
                          "0": "entailment",
                          "1": "not entailment"
                      }
                  },
                  "type": "map_instance_values"
              },
              {
                  "fields": {
                      "choices": [
                          "entailment",
                          "not entailment"
                      ]
                  },
                  "type": "add_fields"
              },
              {
                  "field_to_field": {
                      "question": "premise",
                      "sentence": "hypothesis"
                  },
                  "type": "rename_fields"
              }
          ],
          "task": "tasks.nli",
          "templates": "templates.classification.nli.all",
          "type": "task_card"
      }

References: :ref:`tasks.nli <tasks.nli>`, :ref:`splitters.large_no_test <splitters.large_no_test>`, :ref:`templates.classification.nli.all <templates.classification.nli.all>`

|
|



.. _cards.wmt_en_fr:

----------

wmt_en_fr
^^^^^^^^^

.. note:: ID: ``cards.wmt_en_fr``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "fr-en",
              "path": "wmt14",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "mix": {
                      "test": "test",
                      "train": "train",
                      "validation": "validation"
                  },
                  "type": "split_random_mix"
              },
              {
                  "field_to_field": [
                      [
                          "translation/en",
                          "en"
                      ],
                      [
                          "translation/fr",
                          "fr"
                      ]
                  ],
                  "type": "copy_fields",
                  "use_query": true
              }
          ],
          "task": {
              "inputs": [
                  "en"
              ],
              "metrics": [
                  "metrics.bleu"
              ],
              "outputs": [
                  "fr"
              ],
              "type": "form_task"
          },
          "templates": {
              "items": [
                  {
                      "input_format": "{en}",
                      "output_format": "{fr}",
                      "type": "input_output_template"
                  }
              ],
              "type": "templates_list"
          },
          "type": "task_card"
      }

References: :ref:`metrics.bleu <metrics.bleu>`

|
|



.. _cards.mnli:

----------

mnli
^^^^

.. note:: ID: ``cards.mnli``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "mnli",
              "path": "glue",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "mapper": {
                      "validation_matched": "validation"
                  },
                  "type": "rename_splits"
              },
              "splitters.small_no_test",
              {
                  "mappers": {
                      "label": {
                          "0": "entailment",
                          "1": "neutral",
                          "2": "contradiction"
                      }
                  },
                  "type": "map_instance_values"
              },
              {
                  "fields": {
                      "choices": [
                          "entailment",
                          "neutral",
                          "contradiction"
                      ]
                  },
                  "type": "add_fields"
              }
          ],
          "task": "tasks.nli",
          "templates": "templates.classification.nli.all",
          "type": "task_card"
      }

References: :ref:`tasks.nli <tasks.nli>`, :ref:`splitters.small_no_test <splitters.small_no_test>`, :ref:`templates.classification.nli.all <templates.classification.nli.all>`

|
|



.. _cards.almostEvilML_qa:

----------

almostEvilML_qa
^^^^^^^^^^^^^^^

.. note:: ID: ``cards.almostEvilML_qa``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "path": "0x22almostEvil/multilingual-wikihow-qa-16k",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "mix": {
                      "test": "train[5%]",
                      "train": "train[90%]",
                      "validation": "train[5%]"
                  },
                  "type": "split_random_mix"
              },
              {
                  "field_to_field": {
                      "INSTRUCTION": "question"
                  },
                  "type": "rename_fields"
              },
              {
                  "fields": [
                      "RESPONSE"
                  ],
                  "to_field": "answers",
                  "type": "list_field_values"
              }
          ],
          "task": {
              "inputs": [
                  "question"
              ],
              "metrics": [
                  "metrics.rouge"
              ],
              "outputs": [
                  "answers"
              ],
              "type": "form_task"
          },
          "templates": "templates.qa.open.all",
          "type": "task_card"
      }

References: :ref:`metrics.rouge <metrics.rouge>`, :ref:`templates.qa.open.all <templates.qa.open.all>`

|
|



.. _cards.hellaswag:

----------

hellaswag
^^^^^^^^^

.. note:: ID: ``cards.hellaswag``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "path": "hellaswag",
              "type": "load_hf"
          },
          "preprocess_steps": [
              "splitters.large_no_test",
              {
                  "fields": {
                      "numbering": [
                          "0",
                          "1",
                          "2",
                          "3",
                          "4",
                          "5",
                          "6",
                          "7",
                          "8",
                          "9",
                          "10",
                          "11",
                          "12",
                          "13",
                          "14",
                          "15",
                          "16",
                          "17",
                          "18",
                          "19",
                          "20",
                          "21",
                          "22",
                          "23",
                          "24",
                          "25",
                          "26",
                          "27",
                          "28",
                          "29",
                          "30",
                          "31",
                          "32",
                          "33",
                          "34",
                          "35",
                          "36",
                          "37",
                          "38",
                          "39",
                          "40",
                          "41",
                          "42",
                          "43",
                          "44",
                          "45",
                          "46",
                          "47",
                          "48",
                          "49",
                          "50",
                          "51",
                          "52",
                          "53",
                          "54",
                          "55",
                          "56",
                          "57",
                          "58",
                          "59",
                          "60",
                          "61",
                          "62",
                          "63",
                          "64",
                          "65",
                          "66",
                          "67",
                          "68",
                          "69",
                          "70",
                          "71",
                          "72",
                          "73",
                          "74",
                          "75",
                          "76",
                          "77",
                          "78",
                          "79",
                          "80",
                          "81",
                          "82",
                          "83",
                          "84",
                          "85",
                          "86",
                          "87",
                          "88",
                          "89",
                          "90",
                          "91",
                          "92",
                          "93",
                          "94",
                          "95",
                          "96",
                          "97",
                          "98",
                          "99",
                          "100",
                          "101",
                          "102",
                          "103",
                          "104",
                          "105",
                          "106",
                          "107",
                          "108",
                          "109",
                          "110",
                          "111",
                          "112",
                          "113",
                          "114",
                          "115",
                          "116",
                          "117",
                          "118",
                          "119",
                          "120",
                          "121",
                          "122",
                          "123",
                          "124",
                          "125",
                          "126",
                          "127",
                          "128",
                          "129",
                          "130",
                          "131",
                          "132",
                          "133",
                          "134",
                          "135",
                          "136",
                          "137",
                          "138",
                          "139",
                          "140",
                          "141",
                          "142",
                          "143",
                          "144",
                          "145",
                          "146",
                          "147",
                          "148",
                          "149",
                          "150",
                          "151",
                          "152",
                          "153",
                          "154",
                          "155",
                          "156",
                          "157",
                          "158",
                          "159",
                          "160",
                          "161",
                          "162",
                          "163",
                          "164",
                          "165",
                          "166",
                          "167",
                          "168",
                          "169",
                          "170",
                          "171",
                          "172",
                          "173",
                          "174",
                          "175",
                          "176",
                          "177",
                          "178",
                          "179",
                          "180",
                          "181",
                          "182",
                          "183",
                          "184",
                          "185",
                          "186",
                          "187",
                          "188",
                          "189",
                          "190",
                          "191",
                          "192",
                          "193",
                          "194",
                          "195",
                          "196",
                          "197",
                          "198",
                          "199"
                      ]
                  },
                  "type": "add_fields"
              },
              {
                  "index_of": "label",
                  "search_in": "numbering",
                  "to_field": "index",
                  "type": "index_of"
              },
              {
                  "field_to_field": {
                      "activity_label": "topic",
                      "ctx": "sentence1",
                      "endings": "_endings",
                      "index": "_index",
                      "numbering": "_numbering"
                  },
                  "type": "rename_fields"
              },
              {
                  "field": "_numbering",
                  "index": "_index",
                  "to_field": "number",
                  "type": "take_by_field"
              },
              {
                  "field": "_endings",
                  "index": "_index",
                  "to_field": "answer",
                  "type": "take_by_field"
              },
              {
                  "fields": [
                      "_numbering",
                      "_endings"
                  ],
                  "to_field": "choices",
                  "type": "zip_field_values"
              },
              {
                  "field": "choices/*",
                  "process_every_value": true,
                  "separator": ". ",
                  "to_field": "choices_list",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "field": "choices_list",
                  "index": "_index",
                  "to_field": "number_and_answer",
                  "type": "take_by_field"
              },
              {
                  "field": "choices/*/0",
                  "separator": ",",
                  "to_field": "numbers",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "add": [
                      ""
                  ],
                  "field": "choices_list",
                  "to_field": "choices_list",
                  "type": "add_constant"
              },
              {
                  "field": "choices_list",
                  "separator": "\n",
                  "to_field": "choices",
                  "type": "join_str"
              },
              {
                  "field_to_field": {
                      "number": "label"
                  },
                  "type": "rename_fields"
              }
          ],
          "task": {
              "inputs": [
                  "choices",
                  "sentence1",
                  "numbers",
                  "topic"
              ],
              "metrics": [
                  "metrics.accuracy"
              ],
              "outputs": [
                  "label"
              ],
              "type": "form_task"
          },
          "templates": "templates.qa.multiple_choice.original.all",
          "type": "task_card"
      }

References: :ref:`metrics.accuracy <metrics.accuracy>`, :ref:`splitters.large_no_test <splitters.large_no_test>`, :ref:`templates.qa.multiple_choice.original.all <templates.qa.multiple_choice.original.all>`

|
|



.. _cards.piqa_all:

----------

piqa_all
^^^^^^^^

.. note:: ID: ``cards.piqa_all``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "all",
              "path": "race",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "fields": {
                      "numbering": [
                          "A",
                          "B",
                          "C",
                          "D",
                          "E",
                          "F",
                          "G",
                          "H",
                          "I",
                          "J",
                          "K",
                          "L",
                          "M",
                          "N",
                          "O",
                          "P",
                          "Q",
                          "R",
                          "S",
                          "T",
                          "U",
                          "V",
                          "W",
                          "X",
                          "Y",
                          "Z"
                      ],
                      "topic": "reading comprehension"
                  },
                  "type": "add_fields"
              },
              {
                  "index_of": "answer",
                  "search_in": "numbering",
                  "to_field": "index",
                  "type": "index_of"
              },
              {
                  "field_to_field": {
                      "article": "context",
                      "index": "_index",
                      "numbering": "_numbering",
                      "options": "_options",
                      "question": "sentence1",
                      "topic": "topic"
                  },
                  "type": "rename_fields"
              },
              {
                  "field": "_numbering",
                  "index": "_index",
                  "to_field": "number",
                  "type": "take_by_field"
              },
              {
                  "field": "_options",
                  "index": "_index",
                  "to_field": "answer",
                  "type": "take_by_field"
              },
              {
                  "fields": [
                      "_numbering",
                      "_options"
                  ],
                  "to_field": "choices",
                  "type": "zip_field_values"
              },
              {
                  "field": "choices/*",
                  "process_every_value": true,
                  "separator": ". ",
                  "to_field": "choices_list",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "field": "choices_list",
                  "index": "_index",
                  "to_field": "number_and_answer",
                  "type": "take_by_field"
              },
              {
                  "field": "choices/*/0",
                  "separator": ",",
                  "to_field": "numbers",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "field": "choices_list",
                  "separator": " ",
                  "to_field": "choices",
                  "type": "join_str"
              },
              {
                  "field_to_field": {
                      "number": "label"
                  },
                  "type": "rename_fields"
              }
          ],
          "task": {
              "inputs": [
                  "choices",
                  "sentence1",
                  "numbers",
                  "topic",
                  "context"
              ],
              "metrics": [
                  "metrics.accuracy"
              ],
              "outputs": [
                  "label"
              ],
              "type": "form_task"
          },
          "templates": {
              "fm-eval": {
                  "input_format": "The following are multiple choice questions (with answers) about {topic}.\n\n\n                            Context: {context}\nQuestion: {context}\n{sentence1}\nChoose from {numbers}\nAnswers: {choices}\nAnswer:",
                  "output_format": "{label}",
                  "type": "input_output_template"
              },
              "helm": {
                  "input_format": "The following are multiple choice questions (with answers) about {topic}.\n\n\n                            Context: {context}\nQuestion: {context}\n{sentence1}.\nAnswers: {choices}.\nAnswer:",
                  "output_format": "{label}",
                  "type": "input_output_template"
              },
              "lm_eval_harness": {
                  "input_format": "Context: {context}\nQuestion: {context}\n{sentence1}.\nChoices:\n{choices}.\nAnswer:",
                  "output_format": "{label}",
                  "type": "input_output_template"
              },
              "original": {
                  "input_format": "The following are multiple choice questions (with answers) about {topic}.\n\n                            {context}\n{sentence1}.\nAnswers: {choices}.\nAnswer:",
                  "output_format": "{label}",
                  "type": "input_output_template"
              }
          },
          "type": "task_card"
      }

References: :ref:`metrics.accuracy <metrics.accuracy>`

|
|



.. _cards.race_high:

----------

race_high
^^^^^^^^^

.. note:: ID: ``cards.race_high``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "high",
              "path": "race",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "fields": {
                      "numbering": [
                          "A",
                          "B",
                          "C",
                          "D",
                          "E",
                          "F",
                          "G",
                          "H",
                          "I",
                          "J",
                          "K",
                          "L",
                          "M",
                          "N",
                          "O",
                          "P",
                          "Q",
                          "R",
                          "S",
                          "T",
                          "U",
                          "V",
                          "W",
                          "X",
                          "Y",
                          "Z"
                      ],
                      "topic": "reading comprehension"
                  },
                  "type": "add_fields"
              },
              {
                  "index_of": "answer",
                  "search_in": "numbering",
                  "to_field": "index",
                  "type": "index_of"
              },
              {
                  "field_to_field": {
                      "article": "context",
                      "index": "_index",
                      "numbering": "_numbering",
                      "options": "_options",
                      "question": "sentence1",
                      "topic": "topic"
                  },
                  "type": "rename_fields"
              },
              {
                  "field": "_numbering",
                  "index": "_index",
                  "to_field": "number",
                  "type": "take_by_field"
              },
              {
                  "field": "_options",
                  "index": "_index",
                  "to_field": "answer",
                  "type": "take_by_field"
              },
              {
                  "fields": [
                      "_numbering",
                      "_options"
                  ],
                  "to_field": "choices",
                  "type": "zip_field_values"
              },
              {
                  "field": "choices/*",
                  "process_every_value": true,
                  "separator": ". ",
                  "to_field": "choices_list",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "field": "choices_list",
                  "index": "_index",
                  "to_field": "number_and_answer",
                  "type": "take_by_field"
              },
              {
                  "field": "choices/*/0",
                  "separator": ",",
                  "to_field": "numbers",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "add": [
                      ""
                  ],
                  "field": "choices_list",
                  "to_field": "choices_list",
                  "type": "add_constant"
              },
              {
                  "field": "choices_list",
                  "separator": "\n",
                  "to_field": "choices",
                  "type": "join_str"
              },
              {
                  "field_to_field": {
                      "number": "label"
                  },
                  "type": "rename_fields"
              }
          ],
          "task": {
              "inputs": [
                  "choices",
                  "sentence1",
                  "numbers",
                  "topic",
                  "context"
              ],
              "metrics": [
                  "metrics.accuracy"
              ],
              "outputs": [
                  "label"
              ],
              "type": "form_task"
          },
          "templates": "templates.qa.multiple_choice.context.all",
          "type": "task_card"
      }

References: :ref:`metrics.accuracy <metrics.accuracy>`, :ref:`templates.qa.multiple_choice.context.all <templates.qa.multiple_choice.context.all>`

|
|



.. _cards.wmt_en_ro:

----------

wmt_en_ro
^^^^^^^^^

.. note:: ID: ``cards.wmt_en_ro``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "ro-en",
              "path": "wmt16",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "mix": {
                      "test": "test",
                      "train": "train",
                      "validation": "validation"
                  },
                  "type": "split_random_mix"
              },
              {
                  "field_to_field": [
                      [
                          "translation/en",
                          "en"
                      ],
                      [
                          "translation/ro",
                          "ro"
                      ]
                  ],
                  "type": "copy_fields",
                  "use_query": true
              }
          ],
          "task": {
              "inputs": [
                  "en"
              ],
              "metrics": [
                  "metrics.bleu"
              ],
              "outputs": [
                  "ro"
              ],
              "type": "form_task"
          },
          "templates": {
              "items": [
                  {
                      "input_format": "{en}",
                      "output_format": "{ro}",
                      "type": "input_output_template"
                  }
              ],
              "type": "templates_list"
          },
          "type": "task_card"
      }

References: :ref:`metrics.bleu <metrics.bleu>`

|
|



.. _.cards.xlsum:

----------

xlsum
^^^^^



.. _cards.xlsum.persian:

----------

persian
"""""""

.. note:: ID: ``cards.xlsum.persian``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "persian",
              "path": "GEM/xlsum",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "field_to_field": {
                      "target": "summary",
                      "text": "document"
                  },
                  "type": "rename_fields"
              },
              {
                  "fields": {
                      "document_type": "document"
                  },
                  "type": "add_fields"
              }
          ],
          "task": {
              "inputs": [
                  "document",
                  "document_type"
              ],
              "metrics": [
                  "metrics.rouge"
              ],
              "outputs": [
                  "summary"
              ],
              "type": "form_task"
          },
          "templates": {
              "items": [
                  {
                      "input_format": "{document}",
                      "output_format": "{summary}",
                      "type": "input_output_template"
                  }
              ],
              "type": "templates_list"
          },
          "type": "task_card"
      }

References: :ref:`metrics.rouge <metrics.rouge>`

|
|



.. _cards.xlsum.burmese:

----------

burmese
"""""""

.. note:: ID: ``cards.xlsum.burmese``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "burmese",
              "path": "GEM/xlsum",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "field_to_field": {
                      "target": "summary",
                      "text": "document"
                  },
                  "type": "rename_fields"
              },
              {
                  "fields": {
                      "document_type": "document"
                  },
                  "type": "add_fields"
              }
          ],
          "task": {
              "inputs": [
                  "document",
                  "document_type"
              ],
              "metrics": [
                  "metrics.rouge"
              ],
              "outputs": [
                  "summary"
              ],
              "type": "form_task"
          },
          "templates": {
              "items": [
                  {
                      "input_format": "{document}",
                      "output_format": "{summary}",
                      "type": "input_output_template"
                  }
              ],
              "type": "templates_list"
          },
          "type": "task_card"
      }

References: :ref:`metrics.rouge <metrics.rouge>`

|
|



.. _cards.xlsum.oromo:

----------

oromo
"""""

.. note:: ID: ``cards.xlsum.oromo``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "oromo",
              "path": "GEM/xlsum",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "field_to_field": {
                      "target": "summary",
                      "text": "document"
                  },
                  "type": "rename_fields"
              },
              {
                  "fields": {
                      "document_type": "document"
                  },
                  "type": "add_fields"
              }
          ],
          "task": {
              "inputs": [
                  "document",
                  "document_type"
              ],
              "metrics": [
                  "metrics.rouge"
              ],
              "outputs": [
                  "summary"
              ],
              "type": "form_task"
          },
          "templates": {
              "items": [
                  {
                      "input_format": "{document}",
                      "output_format": "{summary}",
                      "type": "input_output_template"
                  }
              ],
              "type": "templates_list"
          },
          "type": "task_card"
      }

References: :ref:`metrics.rouge <metrics.rouge>`

|
|



.. _cards.xlsum.vietnamese:

----------

vietnamese
""""""""""

.. note:: ID: ``cards.xlsum.vietnamese``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "vietnamese",
              "path": "GEM/xlsum",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "field_to_field": {
                      "target": "summary",
                      "text": "document"
                  },
                  "type": "rename_fields"
              },
              {
                  "fields": {
                      "document_type": "document"
                  },
                  "type": "add_fields"
              }
          ],
          "task": {
              "inputs": [
                  "document",
                  "document_type"
              ],
              "metrics": [
                  "metrics.rouge"
              ],
              "outputs": [
                  "summary"
              ],
              "type": "form_task"
          },
          "templates": {
              "items": [
                  {
                      "input_format": "{document}",
                      "output_format": "{summary}",
                      "type": "input_output_template"
                  }
              ],
              "type": "templates_list"
          },
          "type": "task_card"
      }

References: :ref:`metrics.rouge <metrics.rouge>`

|
|



.. _cards.xlsum.scottish_gaelic:

----------

scottish_gaelic
"""""""""""""""

.. note:: ID: ``cards.xlsum.scottish_gaelic``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "scottish_gaelic",
              "path": "GEM/xlsum",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "field_to_field": {
                      "target": "summary",
                      "text": "document"
                  },
                  "type": "rename_fields"
              },
              {
                  "fields": {
                      "document_type": "document"
                  },
                  "type": "add_fields"
              }
          ],
          "task": {
              "inputs": [
                  "document",
                  "document_type"
              ],
              "metrics": [
                  "metrics.rouge"
              ],
              "outputs": [
                  "summary"
              ],
              "type": "form_task"
          },
          "templates": {
              "items": [
                  {
                      "input_format": "{document}",
                      "output_format": "{summary}",
                      "type": "input_output_template"
                  }
              ],
              "type": "templates_list"
          },
          "type": "task_card"
      }

References: :ref:`metrics.rouge <metrics.rouge>`

|
|



.. _cards.xlsum.portuguese:

----------

portuguese
""""""""""

.. note:: ID: ``cards.xlsum.portuguese``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "portuguese",
              "path": "GEM/xlsum",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "field_to_field": {
                      "target": "summary",
                      "text": "document"
                  },
                  "type": "rename_fields"
              },
              {
                  "fields": {
                      "document_type": "document"
                  },
                  "type": "add_fields"
              }
          ],
          "task": {
              "inputs": [
                  "document",
                  "document_type"
              ],
              "metrics": [
                  "metrics.rouge"
              ],
              "outputs": [
                  "summary"
              ],
              "type": "form_task"
          },
          "templates": {
              "items": [
                  {
                      "input_format": "{document}",
                      "output_format": "{summary}",
                      "type": "input_output_template"
                  }
              ],
              "type": "templates_list"
          },
          "type": "task_card"
      }

References: :ref:`metrics.rouge <metrics.rouge>`

|
|



.. _cards.xlsum.serbian_latin:

----------

serbian_latin
"""""""""""""

.. note:: ID: ``cards.xlsum.serbian_latin``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "serbian_latin",
              "path": "GEM/xlsum",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "field_to_field": {
                      "target": "summary",
                      "text": "document"
                  },
                  "type": "rename_fields"
              },
              {
                  "fields": {
                      "document_type": "document"
                  },
                  "type": "add_fields"
              }
          ],
          "task": {
              "inputs": [
                  "document",
                  "document_type"
              ],
              "metrics": [
                  "metrics.rouge"
              ],
              "outputs": [
                  "summary"
              ],
              "type": "form_task"
          },
          "templates": {
              "items": [
                  {
                      "input_format": "{document}",
                      "output_format": "{summary}",
                      "type": "input_output_template"
                  }
              ],
              "type": "templates_list"
          },
          "type": "task_card"
      }

References: :ref:`metrics.rouge <metrics.rouge>`

|
|



.. _cards.xlsum.hindi:

----------

hindi
"""""

.. note:: ID: ``cards.xlsum.hindi``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "hindi",
              "path": "GEM/xlsum",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "field_to_field": {
                      "target": "summary",
                      "text": "document"
                  },
                  "type": "rename_fields"
              },
              {
                  "fields": {
                      "document_type": "document"
                  },
                  "type": "add_fields"
              }
          ],
          "task": {
              "inputs": [
                  "document",
                  "document_type"
              ],
              "metrics": [
                  "metrics.rouge"
              ],
              "outputs": [
                  "summary"
              ],
              "type": "form_task"
          },
          "templates": {
              "items": [
                  {
                      "input_format": "{document}",
                      "output_format": "{summary}",
                      "type": "input_output_template"
                  }
              ],
              "type": "templates_list"
          },
          "type": "task_card"
      }

References: :ref:`metrics.rouge <metrics.rouge>`

|
|



.. _cards.xlsum.uzbek:

----------

uzbek
"""""

.. note:: ID: ``cards.xlsum.uzbek``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "uzbek",
              "path": "GEM/xlsum",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "field_to_field": {
                      "target": "summary",
                      "text": "document"
                  },
                  "type": "rename_fields"
              },
              {
                  "fields": {
                      "document_type": "document"
                  },
                  "type": "add_fields"
              }
          ],
          "task": {
              "inputs": [
                  "document",
                  "document_type"
              ],
              "metrics": [
                  "metrics.rouge"
              ],
              "outputs": [
                  "summary"
              ],
              "type": "form_task"
          },
          "templates": {
              "items": [
                  {
                      "input_format": "{document}",
                      "output_format": "{summary}",
                      "type": "input_output_template"
                  }
              ],
              "type": "templates_list"
          },
          "type": "task_card"
      }

References: :ref:`metrics.rouge <metrics.rouge>`

|
|



.. _cards.xlsum.punjabi:

----------

punjabi
"""""""

.. note:: ID: ``cards.xlsum.punjabi``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "punjabi",
              "path": "GEM/xlsum",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "field_to_field": {
                      "target": "summary",
                      "text": "document"
                  },
                  "type": "rename_fields"
              },
              {
                  "fields": {
                      "document_type": "document"
                  },
                  "type": "add_fields"
              }
          ],
          "task": {
              "inputs": [
                  "document",
                  "document_type"
              ],
              "metrics": [
                  "metrics.rouge"
              ],
              "outputs": [
                  "summary"
              ],
              "type": "form_task"
          },
          "templates": {
              "items": [
                  {
                      "input_format": "{document}",
                      "output_format": "{summary}",
                      "type": "input_output_template"
                  }
              ],
              "type": "templates_list"
          },
          "type": "task_card"
      }

References: :ref:`metrics.rouge <metrics.rouge>`

|
|



.. _cards.xlsum.serbian_cyrillic:

----------

serbian_cyrillic
""""""""""""""""

.. note:: ID: ``cards.xlsum.serbian_cyrillic``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "serbian_cyrillic",
              "path": "GEM/xlsum",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "field_to_field": {
                      "target": "summary",
                      "text": "document"
                  },
                  "type": "rename_fields"
              },
              {
                  "fields": {
                      "document_type": "document"
                  },
                  "type": "add_fields"
              }
          ],
          "task": {
              "inputs": [
                  "document",
                  "document_type"
              ],
              "metrics": [
                  "metrics.rouge"
              ],
              "outputs": [
                  "summary"
              ],
              "type": "form_task"
          },
          "templates": {
              "items": [
                  {
                      "input_format": "{document}",
                      "output_format": "{summary}",
                      "type": "input_output_template"
                  }
              ],
              "type": "templates_list"
          },
          "type": "task_card"
      }

References: :ref:`metrics.rouge <metrics.rouge>`

|
|



.. _cards.xlsum.tigrinya:

----------

tigrinya
""""""""

.. note:: ID: ``cards.xlsum.tigrinya``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "tigrinya",
              "path": "GEM/xlsum",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "field_to_field": {
                      "target": "summary",
                      "text": "document"
                  },
                  "type": "rename_fields"
              },
              {
                  "fields": {
                      "document_type": "document"
                  },
                  "type": "add_fields"
              }
          ],
          "task": {
              "inputs": [
                  "document",
                  "document_type"
              ],
              "metrics": [
                  "metrics.rouge"
              ],
              "outputs": [
                  "summary"
              ],
              "type": "form_task"
          },
          "templates": {
              "items": [
                  {
                      "input_format": "{document}",
                      "output_format": "{summary}",
                      "type": "input_output_template"
                  }
              ],
              "type": "templates_list"
          },
          "type": "task_card"
      }

References: :ref:`metrics.rouge <metrics.rouge>`

|
|



.. _cards.xlsum.russian:

----------

russian
"""""""

.. note:: ID: ``cards.xlsum.russian``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "russian",
              "path": "GEM/xlsum",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "field_to_field": {
                      "target": "summary",
                      "text": "document"
                  },
                  "type": "rename_fields"
              },
              {
                  "fields": {
                      "document_type": "document"
                  },
                  "type": "add_fields"
              }
          ],
          "task": {
              "inputs": [
                  "document",
                  "document_type"
              ],
              "metrics": [
                  "metrics.rouge"
              ],
              "outputs": [
                  "summary"
              ],
              "type": "form_task"
          },
          "templates": {
              "items": [
                  {
                      "input_format": "{document}",
                      "output_format": "{summary}",
                      "type": "input_output_template"
                  }
              ],
              "type": "templates_list"
          },
          "type": "task_card"
      }

References: :ref:`metrics.rouge <metrics.rouge>`

|
|



.. _cards.xlsum.amharic:

----------

amharic
"""""""

.. note:: ID: ``cards.xlsum.amharic``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "amharic",
              "path": "GEM/xlsum",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "field_to_field": {
                      "target": "summary",
                      "text": "document"
                  },
                  "type": "rename_fields"
              },
              {
                  "fields": {
                      "document_type": "document"
                  },
                  "type": "add_fields"
              }
          ],
          "task": {
              "inputs": [
                  "document",
                  "document_type"
              ],
              "metrics": [
                  "metrics.rouge"
              ],
              "outputs": [
                  "summary"
              ],
              "type": "form_task"
          },
          "templates": {
              "items": [
                  {
                      "input_format": "{document}",
                      "output_format": "{summary}",
                      "type": "input_output_template"
                  }
              ],
              "type": "templates_list"
          },
          "type": "task_card"
      }

References: :ref:`metrics.rouge <metrics.rouge>`

|
|



.. _cards.xlsum.arabic:

----------

arabic
""""""

.. note:: ID: ``cards.xlsum.arabic``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "arabic",
              "path": "GEM/xlsum",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "field_to_field": {
                      "target": "summary",
                      "text": "document"
                  },
                  "type": "rename_fields"
              },
              {
                  "fields": {
                      "document_type": "document"
                  },
                  "type": "add_fields"
              }
          ],
          "task": {
              "inputs": [
                  "document",
                  "document_type"
              ],
              "metrics": [
                  "metrics.rouge"
              ],
              "outputs": [
                  "summary"
              ],
              "type": "form_task"
          },
          "templates": {
              "items": [
                  {
                      "input_format": "{document}",
                      "output_format": "{summary}",
                      "type": "input_output_template"
                  }
              ],
              "type": "templates_list"
          },
          "type": "task_card"
      }

References: :ref:`metrics.rouge <metrics.rouge>`

|
|



.. _cards.xlsum.bengali:

----------

bengali
"""""""

.. note:: ID: ``cards.xlsum.bengali``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "bengali",
              "path": "GEM/xlsum",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "field_to_field": {
                      "target": "summary",
                      "text": "document"
                  },
                  "type": "rename_fields"
              },
              {
                  "fields": {
                      "document_type": "document"
                  },
                  "type": "add_fields"
              }
          ],
          "task": {
              "inputs": [
                  "document",
                  "document_type"
              ],
              "metrics": [
                  "metrics.rouge"
              ],
              "outputs": [
                  "summary"
              ],
              "type": "form_task"
          },
          "templates": {
              "items": [
                  {
                      "input_format": "{document}",
                      "output_format": "{summary}",
                      "type": "input_output_template"
                  }
              ],
              "type": "templates_list"
          },
          "type": "task_card"
      }

References: :ref:`metrics.rouge <metrics.rouge>`

|
|



.. _cards.xlsum.swahili:

----------

swahili
"""""""

.. note:: ID: ``cards.xlsum.swahili``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "swahili",
              "path": "GEM/xlsum",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "field_to_field": {
                      "target": "summary",
                      "text": "document"
                  },
                  "type": "rename_fields"
              },
              {
                  "fields": {
                      "document_type": "document"
                  },
                  "type": "add_fields"
              }
          ],
          "task": {
              "inputs": [
                  "document",
                  "document_type"
              ],
              "metrics": [
                  "metrics.rouge"
              ],
              "outputs": [
                  "summary"
              ],
              "type": "form_task"
          },
          "templates": {
              "items": [
                  {
                      "input_format": "{document}",
                      "output_format": "{summary}",
                      "type": "input_output_template"
                  }
              ],
              "type": "templates_list"
          },
          "type": "task_card"
      }

References: :ref:`metrics.rouge <metrics.rouge>`

|
|



.. _cards.xlsum.turkish:

----------

turkish
"""""""

.. note:: ID: ``cards.xlsum.turkish``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "turkish",
              "path": "GEM/xlsum",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "field_to_field": {
                      "target": "summary",
                      "text": "document"
                  },
                  "type": "rename_fields"
              },
              {
                  "fields": {
                      "document_type": "document"
                  },
                  "type": "add_fields"
              }
          ],
          "task": {
              "inputs": [
                  "document",
                  "document_type"
              ],
              "metrics": [
                  "metrics.rouge"
              ],
              "outputs": [
                  "summary"
              ],
              "type": "form_task"
          },
          "templates": {
              "items": [
                  {
                      "input_format": "{document}",
                      "output_format": "{summary}",
                      "type": "input_output_template"
                  }
              ],
              "type": "templates_list"
          },
          "type": "task_card"
      }

References: :ref:`metrics.rouge <metrics.rouge>`

|
|



.. _cards.xlsum.ukrainian:

----------

ukrainian
"""""""""

.. note:: ID: ``cards.xlsum.ukrainian``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "ukrainian",
              "path": "GEM/xlsum",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "field_to_field": {
                      "target": "summary",
                      "text": "document"
                  },
                  "type": "rename_fields"
              },
              {
                  "fields": {
                      "document_type": "document"
                  },
                  "type": "add_fields"
              }
          ],
          "task": {
              "inputs": [
                  "document",
                  "document_type"
              ],
              "metrics": [
                  "metrics.rouge"
              ],
              "outputs": [
                  "summary"
              ],
              "type": "form_task"
          },
          "templates": {
              "items": [
                  {
                      "input_format": "{document}",
                      "output_format": "{summary}",
                      "type": "input_output_template"
                  }
              ],
              "type": "templates_list"
          },
          "type": "task_card"
      }

References: :ref:`metrics.rouge <metrics.rouge>`

|
|



.. _cards.xlsum.gujarati:

----------

gujarati
""""""""

.. note:: ID: ``cards.xlsum.gujarati``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "gujarati",
              "path": "GEM/xlsum",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "field_to_field": {
                      "target": "summary",
                      "text": "document"
                  },
                  "type": "rename_fields"
              },
              {
                  "fields": {
                      "document_type": "document"
                  },
                  "type": "add_fields"
              }
          ],
          "task": {
              "inputs": [
                  "document",
                  "document_type"
              ],
              "metrics": [
                  "metrics.rouge"
              ],
              "outputs": [
                  "summary"
              ],
              "type": "form_task"
          },
          "templates": {
              "items": [
                  {
                      "input_format": "{document}",
                      "output_format": "{summary}",
                      "type": "input_output_template"
                  }
              ],
              "type": "templates_list"
          },
          "type": "task_card"
      }

References: :ref:`metrics.rouge <metrics.rouge>`

|
|



.. _cards.xlsum.thai:

----------

thai
""""

.. note:: ID: ``cards.xlsum.thai``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "thai",
              "path": "GEM/xlsum",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "field_to_field": {
                      "target": "summary",
                      "text": "document"
                  },
                  "type": "rename_fields"
              },
              {
                  "fields": {
                      "document_type": "document"
                  },
                  "type": "add_fields"
              }
          ],
          "task": {
              "inputs": [
                  "document",
                  "document_type"
              ],
              "metrics": [
                  "metrics.rouge"
              ],
              "outputs": [
                  "summary"
              ],
              "type": "form_task"
          },
          "templates": {
              "items": [
                  {
                      "input_format": "{document}",
                      "output_format": "{summary}",
                      "type": "input_output_template"
                  }
              ],
              "type": "templates_list"
          },
          "type": "task_card"
      }

References: :ref:`metrics.rouge <metrics.rouge>`

|
|



.. _cards.xlsum.tamil:

----------

tamil
"""""

.. note:: ID: ``cards.xlsum.tamil``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "tamil",
              "path": "GEM/xlsum",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "field_to_field": {
                      "target": "summary",
                      "text": "document"
                  },
                  "type": "rename_fields"
              },
              {
                  "fields": {
                      "document_type": "document"
                  },
                  "type": "add_fields"
              }
          ],
          "task": {
              "inputs": [
                  "document",
                  "document_type"
              ],
              "metrics": [
                  "metrics.rouge"
              ],
              "outputs": [
                  "summary"
              ],
              "type": "form_task"
          },
          "templates": {
              "items": [
                  {
                      "input_format": "{document}",
                      "output_format": "{summary}",
                      "type": "input_output_template"
                  }
              ],
              "type": "templates_list"
          },
          "type": "task_card"
      }

References: :ref:`metrics.rouge <metrics.rouge>`

|
|



.. _cards.xlsum.yoruba:

----------

yoruba
""""""

.. note:: ID: ``cards.xlsum.yoruba``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "yoruba",
              "path": "GEM/xlsum",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "field_to_field": {
                      "target": "summary",
                      "text": "document"
                  },
                  "type": "rename_fields"
              },
              {
                  "fields": {
                      "document_type": "document"
                  },
                  "type": "add_fields"
              }
          ],
          "task": {
              "inputs": [
                  "document",
                  "document_type"
              ],
              "metrics": [
                  "metrics.rouge"
              ],
              "outputs": [
                  "summary"
              ],
              "type": "form_task"
          },
          "templates": {
              "items": [
                  {
                      "input_format": "{document}",
                      "output_format": "{summary}",
                      "type": "input_output_template"
                  }
              ],
              "type": "templates_list"
          },
          "type": "task_card"
      }

References: :ref:`metrics.rouge <metrics.rouge>`

|
|



.. _cards.xlsum.telugu:

----------

telugu
""""""

.. note:: ID: ``cards.xlsum.telugu``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "telugu",
              "path": "GEM/xlsum",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "field_to_field": {
                      "target": "summary",
                      "text": "document"
                  },
                  "type": "rename_fields"
              },
              {
                  "fields": {
                      "document_type": "document"
                  },
                  "type": "add_fields"
              }
          ],
          "task": {
              "inputs": [
                  "document",
                  "document_type"
              ],
              "metrics": [
                  "metrics.rouge"
              ],
              "outputs": [
                  "summary"
              ],
              "type": "form_task"
          },
          "templates": {
              "items": [
                  {
                      "input_format": "{document}",
                      "output_format": "{summary}",
                      "type": "input_output_template"
                  }
              ],
              "type": "templates_list"
          },
          "type": "task_card"
      }

References: :ref:`metrics.rouge <metrics.rouge>`

|
|



.. _cards.xlsum.igbo:

----------

igbo
""""

.. note:: ID: ``cards.xlsum.igbo``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "igbo",
              "path": "GEM/xlsum",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "field_to_field": {
                      "target": "summary",
                      "text": "document"
                  },
                  "type": "rename_fields"
              },
              {
                  "fields": {
                      "document_type": "document"
                  },
                  "type": "add_fields"
              }
          ],
          "task": {
              "inputs": [
                  "document",
                  "document_type"
              ],
              "metrics": [
                  "metrics.rouge"
              ],
              "outputs": [
                  "summary"
              ],
              "type": "form_task"
          },
          "templates": {
              "items": [
                  {
                      "input_format": "{document}",
                      "output_format": "{summary}",
                      "type": "input_output_template"
                  }
              ],
              "type": "templates_list"
          },
          "type": "task_card"
      }

References: :ref:`metrics.rouge <metrics.rouge>`

|
|



.. _cards.xlsum.hausa:

----------

hausa
"""""

.. note:: ID: ``cards.xlsum.hausa``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "hausa",
              "path": "GEM/xlsum",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "field_to_field": {
                      "target": "summary",
                      "text": "document"
                  },
                  "type": "rename_fields"
              },
              {
                  "fields": {
                      "document_type": "document"
                  },
                  "type": "add_fields"
              }
          ],
          "task": {
              "inputs": [
                  "document",
                  "document_type"
              ],
              "metrics": [
                  "metrics.rouge"
              ],
              "outputs": [
                  "summary"
              ],
              "type": "form_task"
          },
          "templates": {
              "items": [
                  {
                      "input_format": "{document}",
                      "output_format": "{summary}",
                      "type": "input_output_template"
                  }
              ],
              "type": "templates_list"
          },
          "type": "task_card"
      }

References: :ref:`metrics.rouge <metrics.rouge>`

|
|



.. _cards.xlsum.english:

----------

english
"""""""

.. note:: ID: ``cards.xlsum.english``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "english",
              "path": "GEM/xlsum",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "field_to_field": {
                      "target": "summary",
                      "text": "document"
                  },
                  "type": "rename_fields"
              },
              {
                  "fields": {
                      "document_type": "document"
                  },
                  "type": "add_fields"
              }
          ],
          "task": {
              "inputs": [
                  "document",
                  "document_type"
              ],
              "metrics": [
                  "metrics.rouge"
              ],
              "outputs": [
                  "summary"
              ],
              "type": "form_task"
          },
          "templates": {
              "items": [
                  {
                      "input_format": "{document}",
                      "output_format": "{summary}",
                      "type": "input_output_template"
                  }
              ],
              "type": "templates_list"
          },
          "type": "task_card"
      }

References: :ref:`metrics.rouge <metrics.rouge>`

|
|



.. _cards.xlsum.chinese_traditional:

----------

chinese_traditional
"""""""""""""""""""

.. note:: ID: ``cards.xlsum.chinese_traditional``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "chinese_traditional",
              "path": "GEM/xlsum",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "field_to_field": {
                      "target": "summary",
                      "text": "document"
                  },
                  "type": "rename_fields"
              },
              {
                  "fields": {
                      "document_type": "document"
                  },
                  "type": "add_fields"
              }
          ],
          "task": {
              "inputs": [
                  "document",
                  "document_type"
              ],
              "metrics": [
                  "metrics.rouge"
              ],
              "outputs": [
                  "summary"
              ],
              "type": "form_task"
          },
          "templates": {
              "items": [
                  {
                      "input_format": "{document}",
                      "output_format": "{summary}",
                      "type": "input_output_template"
                  }
              ],
              "type": "templates_list"
          },
          "type": "task_card"
      }

References: :ref:`metrics.rouge <metrics.rouge>`

|
|



.. _cards.xlsum.somali:

----------

somali
""""""

.. note:: ID: ``cards.xlsum.somali``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "somali",
              "path": "GEM/xlsum",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "field_to_field": {
                      "target": "summary",
                      "text": "document"
                  },
                  "type": "rename_fields"
              },
              {
                  "fields": {
                      "document_type": "document"
                  },
                  "type": "add_fields"
              }
          ],
          "task": {
              "inputs": [
                  "document",
                  "document_type"
              ],
              "metrics": [
                  "metrics.rouge"
              ],
              "outputs": [
                  "summary"
              ],
              "type": "form_task"
          },
          "templates": {
              "items": [
                  {
                      "input_format": "{document}",
                      "output_format": "{summary}",
                      "type": "input_output_template"
                  }
              ],
              "type": "templates_list"
          },
          "type": "task_card"
      }

References: :ref:`metrics.rouge <metrics.rouge>`

|
|



.. _cards.xlsum.pashto:

----------

pashto
""""""

.. note:: ID: ``cards.xlsum.pashto``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "pashto",
              "path": "GEM/xlsum",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "field_to_field": {
                      "target": "summary",
                      "text": "document"
                  },
                  "type": "rename_fields"
              },
              {
                  "fields": {
                      "document_type": "document"
                  },
                  "type": "add_fields"
              }
          ],
          "task": {
              "inputs": [
                  "document",
                  "document_type"
              ],
              "metrics": [
                  "metrics.rouge"
              ],
              "outputs": [
                  "summary"
              ],
              "type": "form_task"
          },
          "templates": {
              "items": [
                  {
                      "input_format": "{document}",
                      "output_format": "{summary}",
                      "type": "input_output_template"
                  }
              ],
              "type": "templates_list"
          },
          "type": "task_card"
      }

References: :ref:`metrics.rouge <metrics.rouge>`

|
|



.. _cards.xlsum.pidgin:

----------

pidgin
""""""

.. note:: ID: ``cards.xlsum.pidgin``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "pidgin",
              "path": "GEM/xlsum",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "field_to_field": {
                      "target": "summary",
                      "text": "document"
                  },
                  "type": "rename_fields"
              },
              {
                  "fields": {
                      "document_type": "document"
                  },
                  "type": "add_fields"
              }
          ],
          "task": {
              "inputs": [
                  "document",
                  "document_type"
              ],
              "metrics": [
                  "metrics.rouge"
              ],
              "outputs": [
                  "summary"
              ],
              "type": "form_task"
          },
          "templates": {
              "items": [
                  {
                      "input_format": "{document}",
                      "output_format": "{summary}",
                      "type": "input_output_template"
                  }
              ],
              "type": "templates_list"
          },
          "type": "task_card"
      }

References: :ref:`metrics.rouge <metrics.rouge>`

|
|



.. _cards.xlsum.korean:

----------

korean
""""""

.. note:: ID: ``cards.xlsum.korean``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "korean",
              "path": "GEM/xlsum",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "field_to_field": {
                      "target": "summary",
                      "text": "document"
                  },
                  "type": "rename_fields"
              },
              {
                  "fields": {
                      "document_type": "document"
                  },
                  "type": "add_fields"
              }
          ],
          "task": {
              "inputs": [
                  "document",
                  "document_type"
              ],
              "metrics": [
                  "metrics.rouge"
              ],
              "outputs": [
                  "summary"
              ],
              "type": "form_task"
          },
          "templates": {
              "items": [
                  {
                      "input_format": "{document}",
                      "output_format": "{summary}",
                      "type": "input_output_template"
                  }
              ],
              "type": "templates_list"
          },
          "type": "task_card"
      }

References: :ref:`metrics.rouge <metrics.rouge>`

|
|



.. _cards.xlsum.nepali:

----------

nepali
""""""

.. note:: ID: ``cards.xlsum.nepali``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "nepali",
              "path": "GEM/xlsum",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "field_to_field": {
                      "target": "summary",
                      "text": "document"
                  },
                  "type": "rename_fields"
              },
              {
                  "fields": {
                      "document_type": "document"
                  },
                  "type": "add_fields"
              }
          ],
          "task": {
              "inputs": [
                  "document",
                  "document_type"
              ],
              "metrics": [
                  "metrics.rouge"
              ],
              "outputs": [
                  "summary"
              ],
              "type": "form_task"
          },
          "templates": {
              "items": [
                  {
                      "input_format": "{document}",
                      "output_format": "{summary}",
                      "type": "input_output_template"
                  }
              ],
              "type": "templates_list"
          },
          "type": "task_card"
      }

References: :ref:`metrics.rouge <metrics.rouge>`

|
|



.. _cards.xlsum.sinhala:

----------

sinhala
"""""""

.. note:: ID: ``cards.xlsum.sinhala``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "sinhala",
              "path": "GEM/xlsum",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "field_to_field": {
                      "target": "summary",
                      "text": "document"
                  },
                  "type": "rename_fields"
              },
              {
                  "fields": {
                      "document_type": "document"
                  },
                  "type": "add_fields"
              }
          ],
          "task": {
              "inputs": [
                  "document",
                  "document_type"
              ],
              "metrics": [
                  "metrics.rouge"
              ],
              "outputs": [
                  "summary"
              ],
              "type": "form_task"
          },
          "templates": {
              "items": [
                  {
                      "input_format": "{document}",
                      "output_format": "{summary}",
                      "type": "input_output_template"
                  }
              ],
              "type": "templates_list"
          },
          "type": "task_card"
      }

References: :ref:`metrics.rouge <metrics.rouge>`

|
|



.. _cards.xlsum.chinese_simplified:

----------

chinese_simplified
""""""""""""""""""

.. note:: ID: ``cards.xlsum.chinese_simplified``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "chinese_simplified",
              "path": "GEM/xlsum",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "field_to_field": {
                      "target": "summary",
                      "text": "document"
                  },
                  "type": "rename_fields"
              },
              {
                  "fields": {
                      "document_type": "document"
                  },
                  "type": "add_fields"
              }
          ],
          "task": {
              "inputs": [
                  "document",
                  "document_type"
              ],
              "metrics": [
                  "metrics.rouge"
              ],
              "outputs": [
                  "summary"
              ],
              "type": "form_task"
          },
          "templates": {
              "items": [
                  {
                      "input_format": "{document}",
                      "output_format": "{summary}",
                      "type": "input_output_template"
                  }
              ],
              "type": "templates_list"
          },
          "type": "task_card"
      }

References: :ref:`metrics.rouge <metrics.rouge>`

|
|



.. _cards.xlsum.azerbaijani:

----------

azerbaijani
"""""""""""

.. note:: ID: ``cards.xlsum.azerbaijani``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "azerbaijani",
              "path": "GEM/xlsum",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "field_to_field": {
                      "target": "summary",
                      "text": "document"
                  },
                  "type": "rename_fields"
              },
              {
                  "fields": {
                      "document_type": "document"
                  },
                  "type": "add_fields"
              }
          ],
          "task": {
              "inputs": [
                  "document",
                  "document_type"
              ],
              "metrics": [
                  "metrics.rouge"
              ],
              "outputs": [
                  "summary"
              ],
              "type": "form_task"
          },
          "templates": {
              "items": [
                  {
                      "input_format": "{document}",
                      "output_format": "{summary}",
                      "type": "input_output_template"
                  }
              ],
              "type": "templates_list"
          },
          "type": "task_card"
      }

References: :ref:`metrics.rouge <metrics.rouge>`

|
|



.. _cards.xlsum.marathi:

----------

marathi
"""""""

.. note:: ID: ``cards.xlsum.marathi``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "marathi",
              "path": "GEM/xlsum",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "field_to_field": {
                      "target": "summary",
                      "text": "document"
                  },
                  "type": "rename_fields"
              },
              {
                  "fields": {
                      "document_type": "document"
                  },
                  "type": "add_fields"
              }
          ],
          "task": {
              "inputs": [
                  "document",
                  "document_type"
              ],
              "metrics": [
                  "metrics.rouge"
              ],
              "outputs": [
                  "summary"
              ],
              "type": "form_task"
          },
          "templates": {
              "items": [
                  {
                      "input_format": "{document}",
                      "output_format": "{summary}",
                      "type": "input_output_template"
                  }
              ],
              "type": "templates_list"
          },
          "type": "task_card"
      }

References: :ref:`metrics.rouge <metrics.rouge>`

|
|



.. _cards.xlsum.welsh:

----------

welsh
"""""

.. note:: ID: ``cards.xlsum.welsh``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "welsh",
              "path": "GEM/xlsum",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "field_to_field": {
                      "target": "summary",
                      "text": "document"
                  },
                  "type": "rename_fields"
              },
              {
                  "fields": {
                      "document_type": "document"
                  },
                  "type": "add_fields"
              }
          ],
          "task": {
              "inputs": [
                  "document",
                  "document_type"
              ],
              "metrics": [
                  "metrics.rouge"
              ],
              "outputs": [
                  "summary"
              ],
              "type": "form_task"
          },
          "templates": {
              "items": [
                  {
                      "input_format": "{document}",
                      "output_format": "{summary}",
                      "type": "input_output_template"
                  }
              ],
              "type": "templates_list"
          },
          "type": "task_card"
      }

References: :ref:`metrics.rouge <metrics.rouge>`

|
|



.. _cards.xlsum.french:

----------

french
""""""

.. note:: ID: ``cards.xlsum.french``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "french",
              "path": "GEM/xlsum",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "field_to_field": {
                      "target": "summary",
                      "text": "document"
                  },
                  "type": "rename_fields"
              },
              {
                  "fields": {
                      "document_type": "document"
                  },
                  "type": "add_fields"
              }
          ],
          "task": {
              "inputs": [
                  "document",
                  "document_type"
              ],
              "metrics": [
                  "metrics.rouge"
              ],
              "outputs": [
                  "summary"
              ],
              "type": "form_task"
          },
          "templates": {
              "items": [
                  {
                      "input_format": "{document}",
                      "output_format": "{summary}",
                      "type": "input_output_template"
                  }
              ],
              "type": "templates_list"
          },
          "type": "task_card"
      }

References: :ref:`metrics.rouge <metrics.rouge>`

|
|



.. _cards.xlsum.indonesian:

----------

indonesian
""""""""""

.. note:: ID: ``cards.xlsum.indonesian``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "indonesian",
              "path": "GEM/xlsum",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "field_to_field": {
                      "target": "summary",
                      "text": "document"
                  },
                  "type": "rename_fields"
              },
              {
                  "fields": {
                      "document_type": "document"
                  },
                  "type": "add_fields"
              }
          ],
          "task": {
              "inputs": [
                  "document",
                  "document_type"
              ],
              "metrics": [
                  "metrics.rouge"
              ],
              "outputs": [
                  "summary"
              ],
              "type": "form_task"
          },
          "templates": {
              "items": [
                  {
                      "input_format": "{document}",
                      "output_format": "{summary}",
                      "type": "input_output_template"
                  }
              ],
              "type": "templates_list"
          },
          "type": "task_card"
      }

References: :ref:`metrics.rouge <metrics.rouge>`

|
|



.. _cards.xlsum.urdu:

----------

urdu
""""

.. note:: ID: ``cards.xlsum.urdu``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "urdu",
              "path": "GEM/xlsum",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "field_to_field": {
                      "target": "summary",
                      "text": "document"
                  },
                  "type": "rename_fields"
              },
              {
                  "fields": {
                      "document_type": "document"
                  },
                  "type": "add_fields"
              }
          ],
          "task": {
              "inputs": [
                  "document",
                  "document_type"
              ],
              "metrics": [
                  "metrics.rouge"
              ],
              "outputs": [
                  "summary"
              ],
              "type": "form_task"
          },
          "templates": {
              "items": [
                  {
                      "input_format": "{document}",
                      "output_format": "{summary}",
                      "type": "input_output_template"
                  }
              ],
              "type": "templates_list"
          },
          "type": "task_card"
      }

References: :ref:`metrics.rouge <metrics.rouge>`

|
|



.. _cards.xlsum.kirundi:

----------

kirundi
"""""""

.. note:: ID: ``cards.xlsum.kirundi``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "kirundi",
              "path": "GEM/xlsum",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "field_to_field": {
                      "target": "summary",
                      "text": "document"
                  },
                  "type": "rename_fields"
              },
              {
                  "fields": {
                      "document_type": "document"
                  },
                  "type": "add_fields"
              }
          ],
          "task": {
              "inputs": [
                  "document",
                  "document_type"
              ],
              "metrics": [
                  "metrics.rouge"
              ],
              "outputs": [
                  "summary"
              ],
              "type": "form_task"
          },
          "templates": {
              "items": [
                  {
                      "input_format": "{document}",
                      "output_format": "{summary}",
                      "type": "input_output_template"
                  }
              ],
              "type": "templates_list"
          },
          "type": "task_card"
      }

References: :ref:`metrics.rouge <metrics.rouge>`

|
|



.. _cards.xlsum.japanese:

----------

japanese
""""""""

.. note:: ID: ``cards.xlsum.japanese``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "japanese",
              "path": "GEM/xlsum",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "field_to_field": {
                      "target": "summary",
                      "text": "document"
                  },
                  "type": "rename_fields"
              },
              {
                  "fields": {
                      "document_type": "document"
                  },
                  "type": "add_fields"
              }
          ],
          "task": {
              "inputs": [
                  "document",
                  "document_type"
              ],
              "metrics": [
                  "metrics.rouge"
              ],
              "outputs": [
                  "summary"
              ],
              "type": "form_task"
          },
          "templates": {
              "items": [
                  {
                      "input_format": "{document}",
                      "output_format": "{summary}",
                      "type": "input_output_template"
                  }
              ],
              "type": "templates_list"
          },
          "type": "task_card"
      }

References: :ref:`metrics.rouge <metrics.rouge>`

|
|



.. _cards.xlsum.spanish:

----------

spanish
"""""""

.. note:: ID: ``cards.xlsum.spanish``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "spanish",
              "path": "GEM/xlsum",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "field_to_field": {
                      "target": "summary",
                      "text": "document"
                  },
                  "type": "rename_fields"
              },
              {
                  "fields": {
                      "document_type": "document"
                  },
                  "type": "add_fields"
              }
          ],
          "task": {
              "inputs": [
                  "document",
                  "document_type"
              ],
              "metrics": [
                  "metrics.rouge"
              ],
              "outputs": [
                  "summary"
              ],
              "type": "form_task"
          },
          "templates": {
              "items": [
                  {
                      "input_format": "{document}",
                      "output_format": "{summary}",
                      "type": "input_output_template"
                  }
              ],
              "type": "templates_list"
          },
          "type": "task_card"
      }

References: :ref:`metrics.rouge <metrics.rouge>`

|
|



.. _cards.xlsum.kyrgyz:

----------

kyrgyz
""""""

.. note:: ID: ``cards.xlsum.kyrgyz``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "kyrgyz",
              "path": "GEM/xlsum",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "field_to_field": {
                      "target": "summary",
                      "text": "document"
                  },
                  "type": "rename_fields"
              },
              {
                  "fields": {
                      "document_type": "document"
                  },
                  "type": "add_fields"
              }
          ],
          "task": {
              "inputs": [
                  "document",
                  "document_type"
              ],
              "metrics": [
                  "metrics.rouge"
              ],
              "outputs": [
                  "summary"
              ],
              "type": "form_task"
          },
          "templates": {
              "items": [
                  {
                      "input_format": "{document}",
                      "output_format": "{summary}",
                      "type": "input_output_template"
                  }
              ],
              "type": "templates_list"
          },
          "type": "task_card"
      }

References: :ref:`metrics.rouge <metrics.rouge>`

|
|



.. _cards.piqa:

----------

piqa
^^^^

.. note:: ID: ``cards.piqa``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "path": "piqa",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "fields": {
                      "numbering": [
                          "A",
                          "B",
                          "C",
                          "D",
                          "E",
                          "F",
                          "G",
                          "H",
                          "I",
                          "J",
                          "K",
                          "L",
                          "M",
                          "N",
                          "O",
                          "P",
                          "Q",
                          "R",
                          "S",
                          "T",
                          "U",
                          "V",
                          "W",
                          "X",
                          "Y",
                          "Z"
                      ],
                      "topic": "physical commonsense"
                  },
                  "type": "add_fields"
              },
              {
                  "fields": [
                      "sol1",
                      "sol2"
                  ],
                  "to_field": "choices",
                  "type": "list_field_values"
              },
              {
                  "field_to_field": {
                      "choices": "_choices",
                      "goal": "sentence1",
                      "label": "_label",
                      "numbering": "_numbering",
                      "topic": "topic"
                  },
                  "type": "rename_fields"
              },
              {
                  "field": "_numbering",
                  "index": "_label",
                  "to_field": "number",
                  "type": "take_by_field"
              },
              {
                  "field": "_choices",
                  "index": "_label",
                  "to_field": "answer",
                  "type": "take_by_field"
              },
              {
                  "fields": [
                      "_numbering",
                      "_choices"
                  ],
                  "to_field": "choices",
                  "type": "zip_field_values"
              },
              {
                  "field": "choices/*",
                  "process_every_value": true,
                  "separator": ". ",
                  "to_field": "choices_list",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "field": "choices_list",
                  "index": "_label",
                  "to_field": "number_and_answer",
                  "type": "take_by_field"
              },
              {
                  "field": "choices/*/0",
                  "separator": ",",
                  "to_field": "numbers",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "field": "choices_list",
                  "separator": " ",
                  "to_field": "choices",
                  "type": "join_str"
              },
              {
                  "field_to_field": {
                      "number": "label"
                  },
                  "type": "rename_fields"
              }
          ],
          "task": {
              "inputs": [
                  "choices",
                  "sentence1",
                  "numbers",
                  "topic"
              ],
              "metrics": [
                  "metrics.accuracy"
              ],
              "outputs": [
                  "label"
              ],
              "type": "form_task"
          },
          "templates": "templates.qa.multiple_choice.original.all",
          "type": "task_card"
      }

References: :ref:`metrics.accuracy <metrics.accuracy>`, :ref:`templates.qa.multiple_choice.original.all <templates.qa.multiple_choice.original.all>`

|
|



.. _.cards.reuters21578:

----------

reuters21578
^^^^^^^^^^^^



.. _cards.stsb:

----------

stsb
^^^^

.. note:: ID: ``cards.stsb``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "stsb",
              "path": "glue",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "mix": {
                      "test": "validation",
                      "train": "train[95%]",
                      "validation": "train[5%]"
                  },
                  "type": "split_random_mix"
              }
          ],
          "task": {
              "inputs": [
                  "sentence1",
                  "sentence2"
              ],
              "metrics": [
                  "metrics.spearman"
              ],
              "outputs": [
                  "label"
              ],
              "type": "form_task"
          },
          "templates": {
              "items": [
                  {
                      "input_format": "Given this sentence: '{sentence1}', on a scale of 1 to 5, how similar in meaning is it to this sentence: '{sentence2}'?",
                      "output_format": "{label}",
                      "quantum": 0.2,
                      "type": "output_quantizing_template"
                  }
              ],
              "type": "templates_list"
          },
          "type": "task_card"
      }

References: :ref:`metrics.spearman <metrics.spearman>`

|
|



.. _.cards.head_qa:

----------

head_qa
^^^^^^^



.. _cards.cola:

----------

cola
^^^^

.. note:: ID: ``cards.cola``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "cola",
              "path": "glue",
              "type": "load_hf"
          },
          "preprocess_steps": [
              "splitters.small_no_test",
              {
                  "mappers": {
                      "label": {
                          "0": "unacceptable",
                          "1": "acceptable"
                      }
                  },
                  "type": "map_instance_values"
              },
              {
                  "fields": {
                      "choices": [
                          "unacceptable",
                          "acceptable"
                      ]
                  },
                  "type": "add_fields"
              }
          ],
          "task": {
              "inputs": [
                  "choices",
                  "sentence"
              ],
              "metrics": [
                  "metrics.matthews_correlation"
              ],
              "outputs": [
                  "label"
              ],
              "type": "form_task"
          },
          "templates": {
              "items": [
                  {
                      "input_format": "Given this sentence: {sentence}, classify if it is {choices}.",
                      "output_format": "{label}",
                      "type": "input_output_template"
                  }
              ],
              "type": "templates_list"
          },
          "type": "task_card"
      }

References: :ref:`splitters.small_no_test <splitters.small_no_test>`, :ref:`metrics.matthews_correlation <metrics.matthews_correlation>`

|
|



.. _cards.qqp:

----------

qqp
^^^

.. note:: ID: ``cards.qqp``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "qqp",
              "path": "glue",
              "type": "load_hf"
          },
          "preprocess_steps": [
              "splitters.large_no_test",
              {
                  "mappers": {
                      "label": {
                          "0": "not duplicated",
                          "1": "duplicated"
                      }
                  },
                  "type": "map_instance_values"
              },
              {
                  "fields": {
                      "choices": [
                          "not duplicated",
                          "duplicated"
                      ]
                  },
                  "type": "add_fields"
              }
          ],
          "task": {
              "inputs": [
                  "choices",
                  "question1",
                  "question2"
              ],
              "metrics": [
                  "metrics.accuracy"
              ],
              "outputs": [
                  "label"
              ],
              "type": "form_task"
          },
          "templates": {
              "items": [
                  {
                      "input_format": "Given this question: {question1}, classify if this question: {question2} is {choices}.",
                      "output_format": "{label}",
                      "type": "input_output_template"
                  }
              ],
              "type": "templates_list"
          },
          "type": "task_card"
      }

References: :ref:`metrics.accuracy <metrics.accuracy>`, :ref:`splitters.large_no_test <splitters.large_no_test>`

|
|



.. _.cards.clinc_oos:

----------

clinc_oos
^^^^^^^^^



.. _cards.ethos_binary:

----------

ethos_binary
^^^^^^^^^^^^

.. note:: ID: ``cards.ethos_binary``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "binary",
              "path": "ethos",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "page_size": 1000000,
                  "type": "shuffle"
              },
              {
                  "mix": {
                      "test": "train[80%]",
                      "train": "train[20%]"
                  },
                  "type": "split_random_mix"
              },
              {
                  "mappers": {
                      "label": {
                          "0": "not hate speech",
                          "1": "hate speech"
                      }
                  },
                  "type": "map_instance_values"
              },
              {
                  "fields": {
                      "classes": [
                          "not hate speech",
                          "hate speech"
                      ],
                      "text_type": "sentence",
                      "type_of_class": "hate speech"
                  },
                  "type": "add_fields"
              }
          ],
          "task": "tasks.classification.multi_class",
          "templates": {
              "items": [
                  {
                      "input_format": "Given this {text_type}: {text}. Classify if it contains {type_of_class}. classes: {classes}.",
                      "output_format": "{label}",
                      "postprocessors": [
                          "processors.take_first_non_empty_line"
                      ],
                      "type": "input_output_template"
                  },
                  {
                      "input_format": "Does the following {text_type} contains {type_of_class}? Answer only by choosing one of the options {classes}. {text_type}: {text}.",
                      "output_format": "{label}",
                      "postprocessors": [
                          "processors.take_first_non_empty_line"
                      ],
                      "type": "input_output_template"
                  },
                  {
                      "input_format": "Given this {text_type}: {text}. Classify if it contains {type_of_class}. classes: {classes}. I would classify this {text_type} as: ",
                      "output_format": "{label}",
                      "postprocessors": [
                          "processors.take_first_non_empty_line",
                          "processors.lower_case_till_punc"
                      ],
                      "type": "input_output_template"
                  },
                  {
                      "input_format": "Given this {text_type}: {text}. Classify if it contains {type_of_class}. classes: {classes}. I would classify this {text_type} as: ",
                      "output_format": "{label}",
                      "postprocessors": [
                          "processors.take_first_non_empty_line",
                          "processors.hate_speech_or_not_hate_speech"
                      ],
                      "type": "input_output_template"
                  }
              ],
              "type": "templates_list"
          },
          "type": "task_card"
      }

References: :ref:`tasks.classification.multi_class <tasks.classification.multi_class>`, :ref:`processors.hate_speech_or_not_hate_speech <processors.hate_speech_or_not_hate_speech>`, :ref:`processors.take_first_non_empty_line <processors.take_first_non_empty_line>`, :ref:`processors.lower_case_till_punc <processors.lower_case_till_punc>`

|
|



.. _.cards.ai2_arc:

----------

ai2_arc
^^^^^^^



.. _cards.ai2_arc.ARC_Easy:

----------

ARC_Easy
""""""""

.. note:: ID: ``cards.ai2_arc.ARC_Easy``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "ARC-Easy",
              "path": "ai2_arc",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "fields": {
                      "topic": "science"
                  },
                  "type": "add_fields"
              },
              {
                  "field_to_field": {
                      "answerKey": "label",
                      "choices": "choices_struct"
                  },
                  "type": "rename_fields"
              },
              {
                  "field_to_field": {
                      "choices_struct/label": "numbering",
                      "choices_struct/text": "choices"
                  },
                  "type": "copy_fields",
                  "use_query": true
              },
              {
                  "index_of": "label",
                  "search_in": "numbering",
                  "to_field": "index",
                  "type": "index_of"
              },
              {
                  "field_to_field": {
                      "choices": "_choices",
                      "index": "_index",
                      "numbering": "_numbering",
                      "question": "sentence1",
                      "topic": "topic"
                  },
                  "type": "rename_fields"
              },
              {
                  "field": "_numbering",
                  "index": "_index",
                  "to_field": "number",
                  "type": "take_by_field"
              },
              {
                  "field": "_choices",
                  "index": "_index",
                  "to_field": "answer",
                  "type": "take_by_field"
              },
              {
                  "fields": [
                      "_numbering",
                      "_choices"
                  ],
                  "to_field": "choices",
                  "type": "zip_field_values"
              },
              {
                  "field": "choices/*",
                  "process_every_value": true,
                  "separator": ". ",
                  "to_field": "choices_list",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "field": "choices_list",
                  "index": "_index",
                  "to_field": "number_and_answer",
                  "type": "take_by_field"
              },
              {
                  "field": "choices/*/0",
                  "separator": ",",
                  "to_field": "numbers",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "add": [
                      ""
                  ],
                  "field": "choices_list",
                  "to_field": "choices_list",
                  "type": "add_constant"
              },
              {
                  "field": "choices_list",
                  "separator": "\n",
                  "to_field": "choices",
                  "type": "join_str"
              },
              {
                  "field_to_field": {
                      "number": "label"
                  },
                  "type": "rename_fields"
              }
          ],
          "task": {
              "inputs": [
                  "choices",
                  "sentence1",
                  "numbers",
                  "topic"
              ],
              "metrics": [
                  "metrics.accuracy"
              ],
              "outputs": [
                  "label"
              ],
              "type": "form_task"
          },
          "templates": "templates.qa.multiple_choice.original.all",
          "type": "task_card"
      }

References: :ref:`metrics.accuracy <metrics.accuracy>`, :ref:`templates.qa.multiple_choice.original.all <templates.qa.multiple_choice.original.all>`

|
|



.. _cards.ai2_arc.ARC_Challenge:

----------

ARC_Challenge
"""""""""""""

.. note:: ID: ``cards.ai2_arc.ARC_Challenge``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "ARC-Challenge",
              "path": "ai2_arc",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "fields": {
                      "topic": "science"
                  },
                  "type": "add_fields"
              },
              {
                  "field_to_field": {
                      "answerKey": "label",
                      "choices": "choices_struct"
                  },
                  "type": "rename_fields"
              },
              {
                  "field_to_field": {
                      "choices_struct/label": "numbering",
                      "choices_struct/text": "choices"
                  },
                  "type": "copy_fields",
                  "use_query": true
              },
              {
                  "index_of": "label",
                  "search_in": "numbering",
                  "to_field": "index",
                  "type": "index_of"
              },
              {
                  "field_to_field": {
                      "choices": "_choices",
                      "index": "_index",
                      "numbering": "_numbering",
                      "question": "sentence1",
                      "topic": "topic"
                  },
                  "type": "rename_fields"
              },
              {
                  "field": "_numbering",
                  "index": "_index",
                  "to_field": "number",
                  "type": "take_by_field"
              },
              {
                  "field": "_choices",
                  "index": "_index",
                  "to_field": "answer",
                  "type": "take_by_field"
              },
              {
                  "fields": [
                      "_numbering",
                      "_choices"
                  ],
                  "to_field": "choices",
                  "type": "zip_field_values"
              },
              {
                  "field": "choices/*",
                  "process_every_value": true,
                  "separator": ". ",
                  "to_field": "choices_list",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "field": "choices_list",
                  "index": "_index",
                  "to_field": "number_and_answer",
                  "type": "take_by_field"
              },
              {
                  "field": "choices/*/0",
                  "separator": ",",
                  "to_field": "numbers",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "add": [
                      ""
                  ],
                  "field": "choices_list",
                  "to_field": "choices_list",
                  "type": "add_constant"
              },
              {
                  "field": "choices_list",
                  "separator": "\n",
                  "to_field": "choices",
                  "type": "join_str"
              },
              {
                  "field_to_field": {
                      "number": "label"
                  },
                  "type": "rename_fields"
              }
          ],
          "task": {
              "inputs": [
                  "choices",
                  "sentence1",
                  "numbers",
                  "topic"
              ],
              "metrics": [
                  "metrics.accuracy"
              ],
              "outputs": [
                  "label"
              ],
              "type": "form_task"
          },
          "templates": "templates.qa.multiple_choice.original.all",
          "type": "task_card"
      }

References: :ref:`metrics.accuracy <metrics.accuracy>`, :ref:`templates.qa.multiple_choice.original.all <templates.qa.multiple_choice.original.all>`

|
|



.. _cards.sst2:

----------

sst2
^^^^

.. note:: ID: ``cards.sst2``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "sst2",
              "path": "glue",
              "type": "load_hf"
          },
          "preprocess_steps": [
              "splitters.small_no_test",
              {
                  "mappers": {
                      "label": {
                          "0": "negative",
                          "1": "positive"
                      }
                  },
                  "type": "map_instance_values"
              },
              {
                  "field": "sentence",
                  "to_field": "text",
                  "type": "rename_fields"
              },
              {
                  "fields": {
                      "text_type": "sentence",
                      "type_of_class": "sentiment"
                  },
                  "type": "add_fields"
              },
              {
                  "field": "label",
                  "stream_name": "train",
                  "to_field": "classes",
                  "type": "extract_field_values"
              }
          ],
          "task": "tasks.classification.multi_class",
          "templates": "templates.classification.multi_class.all",
          "type": "task_card"
      }

References: :ref:`tasks.classification.multi_class <tasks.classification.multi_class>`, :ref:`templates.classification.multi_class.all <templates.classification.multi_class.all>`, :ref:`splitters.small_no_test <splitters.small_no_test>`

|
|



.. _cards.openbookQA:

----------

openbookQA
^^^^^^^^^^

.. note:: ID: ``cards.openbookQA``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "path": "openbookqa",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "fields": {
                      "numbering": [
                          "A",
                          "B",
                          "C",
                          "D",
                          "E",
                          "F",
                          "G",
                          "H",
                          "I",
                          "J",
                          "K",
                          "L",
                          "M",
                          "N",
                          "O",
                          "P",
                          "Q",
                          "R",
                          "S",
                          "T",
                          "U",
                          "V",
                          "W",
                          "X",
                          "Y",
                          "Z"
                      ],
                      "topic": "general continuation"
                  },
                  "type": "add_fields"
              },
              {
                  "field_to_field": {
                      "choices/label": "numbering",
                      "choices/text": "text"
                  },
                  "type": "rename_fields",
                  "use_query": true
              },
              {
                  "index_of": "answerKey",
                  "search_in": "numbering",
                  "to_field": "index",
                  "type": "index_of"
              },
              {
                  "field_to_field": {
                      "index": "_index",
                      "numbering": "_numbering",
                      "question_stem": "sentence1",
                      "text": "_text",
                      "topic": "topic"
                  },
                  "type": "rename_fields"
              },
              {
                  "field": "_numbering",
                  "index": "_index",
                  "to_field": "number",
                  "type": "take_by_field"
              },
              {
                  "field": "_text",
                  "index": "_index",
                  "to_field": "answer",
                  "type": "take_by_field"
              },
              {
                  "fields": [
                      "_numbering",
                      "_text"
                  ],
                  "to_field": "choices",
                  "type": "zip_field_values"
              },
              {
                  "field": "choices/*",
                  "process_every_value": true,
                  "separator": ". ",
                  "to_field": "choices_list",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "field": "choices_list",
                  "index": "_index",
                  "to_field": "number_and_answer",
                  "type": "take_by_field"
              },
              {
                  "field": "choices/*/0",
                  "separator": ",",
                  "to_field": "numbers",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "add": [
                      ""
                  ],
                  "field": "choices_list",
                  "to_field": "choices_list",
                  "type": "add_constant"
              },
              {
                  "field": "choices_list",
                  "separator": "\n",
                  "to_field": "choices",
                  "type": "join_str"
              },
              {
                  "field_to_field": {
                      "number": "label"
                  },
                  "type": "rename_fields"
              }
          ],
          "task": {
              "inputs": [
                  "choices",
                  "sentence1",
                  "numbers",
                  "topic"
              ],
              "metrics": [
                  "metrics.accuracy"
              ],
              "outputs": [
                  "label"
              ],
              "type": "form_task"
          },
          "templates": "templates.qa.multiple_choice.original.all",
          "type": "task_card"
      }

References: :ref:`metrics.accuracy <metrics.accuracy>`, :ref:`templates.qa.multiple_choice.original.all <templates.qa.multiple_choice.original.all>`

|
|



.. _.cards.amazon_mass:

----------

amazon_mass
^^^^^^^^^^^



.. _cards.amazon_mass.sl_SL:

----------

sl_SL
"""""

.. note:: ID: ``cards.amazon_mass.sl_SL``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "sl-SL",
              "path": "AmazonScience/massive",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "mappers": {
                      "intent": {
                          "0": "datetime_query",
                          "1": "iot_hue_lightchange",
                          "10": "qa_currency",
                          "11": "transport_traffic",
                          "12": "general_quirky",
                          "13": "weather_query",
                          "14": "audio_volume_up",
                          "15": "email_addcontact",
                          "16": "takeaway_order",
                          "17": "email_querycontact",
                          "18": "iot_hue_lightup",
                          "19": "recommendation_locations",
                          "2": "transport_ticket",
                          "20": "play_audiobook",
                          "21": "lists_createoradd",
                          "22": "news_query",
                          "23": "alarm_query",
                          "24": "iot_wemo_on",
                          "25": "general_joke",
                          "26": "qa_definition",
                          "27": "social_query",
                          "28": "music_settings",
                          "29": "audio_volume_other",
                          "3": "takeaway_query",
                          "30": "calendar_remove",
                          "31": "iot_hue_lightdim",
                          "32": "calendar_query",
                          "33": "email_sendemail",
                          "34": "iot_cleaning",
                          "35": "audio_volume_down",
                          "36": "play_radio",
                          "37": "cooking_query",
                          "38": "datetime_convert",
                          "39": "qa_maths",
                          "4": "qa_stock",
                          "40": "iot_hue_lightoff",
                          "41": "iot_hue_lighton",
                          "42": "transport_query",
                          "43": "music_likeness",
                          "44": "email_query",
                          "45": "play_music",
                          "46": "audio_volume_mute",
                          "47": "social_post",
                          "48": "alarm_set",
                          "49": "qa_factoid",
                          "5": "general_greet",
                          "50": "calendar_set",
                          "51": "play_game",
                          "52": "alarm_remove",
                          "53": "lists_remove",
                          "54": "transport_taxi",
                          "55": "recommendation_movies",
                          "56": "iot_coffee",
                          "57": "music_query",
                          "58": "play_podcasts",
                          "59": "lists_query",
                          "6": "recommendation_events",
                          "7": "music_dislikeness",
                          "8": "iot_wemo_off",
                          "9": "cooking_recipe"
                      }
                  },
                  "type": "map_instance_values"
              },
              {
                  "field_to_field": {
                      "intent": "label",
                      "utt": "text"
                  },
                  "type": "rename_fields"
              },
              {
                  "fields": {
                      "classes": [
                          "datetime_query",
                          "iot_hue_lightchange",
                          "transport_ticket",
                          "takeaway_query",
                          "qa_stock",
                          "general_greet",
                          "recommendation_events",
                          "music_dislikeness",
                          "iot_wemo_off",
                          "cooking_recipe",
                          "qa_currency",
                          "transport_traffic",
                          "general_quirky",
                          "weather_query",
                          "audio_volume_up",
                          "email_addcontact",
                          "takeaway_order",
                          "email_querycontact",
                          "iot_hue_lightup",
                          "recommendation_locations",
                          "play_audiobook",
                          "lists_createoradd",
                          "news_query",
                          "alarm_query",
                          "iot_wemo_on",
                          "general_joke",
                          "qa_definition",
                          "social_query",
                          "music_settings",
                          "audio_volume_other",
                          "calendar_remove",
                          "iot_hue_lightdim",
                          "calendar_query",
                          "email_sendemail",
                          "iot_cleaning",
                          "audio_volume_down",
                          "play_radio",
                          "cooking_query",
                          "datetime_convert",
                          "qa_maths",
                          "iot_hue_lightoff",
                          "iot_hue_lighton",
                          "transport_query",
                          "music_likeness",
                          "email_query",
                          "play_music",
                          "audio_volume_mute",
                          "social_post",
                          "alarm_set",
                          "qa_factoid",
                          "calendar_set",
                          "play_game",
                          "alarm_remove",
                          "lists_remove",
                          "transport_taxi",
                          "recommendation_movies",
                          "iot_coffee",
                          "music_query",
                          "play_podcasts",
                          "lists_query"
                      ],
                      "text_type": "sentence",
                      "type_of_class": "intent"
                  },
                  "type": "add_fields"
              }
          ],
          "task": "tasks.classification.multi_class",
          "templates": "templates.classification.multi_class.all",
          "type": "task_card"
      }

References: :ref:`tasks.classification.multi_class <tasks.classification.multi_class>`, :ref:`templates.classification.multi_class.all <templates.classification.multi_class.all>`

|
|



.. _cards.amazon_mass.ms_MY:

----------

ms_MY
"""""

.. note:: ID: ``cards.amazon_mass.ms_MY``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "ms-MY",
              "path": "AmazonScience/massive",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "mappers": {
                      "intent": {
                          "0": "datetime_query",
                          "1": "iot_hue_lightchange",
                          "10": "qa_currency",
                          "11": "transport_traffic",
                          "12": "general_quirky",
                          "13": "weather_query",
                          "14": "audio_volume_up",
                          "15": "email_addcontact",
                          "16": "takeaway_order",
                          "17": "email_querycontact",
                          "18": "iot_hue_lightup",
                          "19": "recommendation_locations",
                          "2": "transport_ticket",
                          "20": "play_audiobook",
                          "21": "lists_createoradd",
                          "22": "news_query",
                          "23": "alarm_query",
                          "24": "iot_wemo_on",
                          "25": "general_joke",
                          "26": "qa_definition",
                          "27": "social_query",
                          "28": "music_settings",
                          "29": "audio_volume_other",
                          "3": "takeaway_query",
                          "30": "calendar_remove",
                          "31": "iot_hue_lightdim",
                          "32": "calendar_query",
                          "33": "email_sendemail",
                          "34": "iot_cleaning",
                          "35": "audio_volume_down",
                          "36": "play_radio",
                          "37": "cooking_query",
                          "38": "datetime_convert",
                          "39": "qa_maths",
                          "4": "qa_stock",
                          "40": "iot_hue_lightoff",
                          "41": "iot_hue_lighton",
                          "42": "transport_query",
                          "43": "music_likeness",
                          "44": "email_query",
                          "45": "play_music",
                          "46": "audio_volume_mute",
                          "47": "social_post",
                          "48": "alarm_set",
                          "49": "qa_factoid",
                          "5": "general_greet",
                          "50": "calendar_set",
                          "51": "play_game",
                          "52": "alarm_remove",
                          "53": "lists_remove",
                          "54": "transport_taxi",
                          "55": "recommendation_movies",
                          "56": "iot_coffee",
                          "57": "music_query",
                          "58": "play_podcasts",
                          "59": "lists_query",
                          "6": "recommendation_events",
                          "7": "music_dislikeness",
                          "8": "iot_wemo_off",
                          "9": "cooking_recipe"
                      }
                  },
                  "type": "map_instance_values"
              },
              {
                  "field_to_field": {
                      "intent": "label",
                      "utt": "text"
                  },
                  "type": "rename_fields"
              },
              {
                  "fields": {
                      "classes": [
                          "datetime_query",
                          "iot_hue_lightchange",
                          "transport_ticket",
                          "takeaway_query",
                          "qa_stock",
                          "general_greet",
                          "recommendation_events",
                          "music_dislikeness",
                          "iot_wemo_off",
                          "cooking_recipe",
                          "qa_currency",
                          "transport_traffic",
                          "general_quirky",
                          "weather_query",
                          "audio_volume_up",
                          "email_addcontact",
                          "takeaway_order",
                          "email_querycontact",
                          "iot_hue_lightup",
                          "recommendation_locations",
                          "play_audiobook",
                          "lists_createoradd",
                          "news_query",
                          "alarm_query",
                          "iot_wemo_on",
                          "general_joke",
                          "qa_definition",
                          "social_query",
                          "music_settings",
                          "audio_volume_other",
                          "calendar_remove",
                          "iot_hue_lightdim",
                          "calendar_query",
                          "email_sendemail",
                          "iot_cleaning",
                          "audio_volume_down",
                          "play_radio",
                          "cooking_query",
                          "datetime_convert",
                          "qa_maths",
                          "iot_hue_lightoff",
                          "iot_hue_lighton",
                          "transport_query",
                          "music_likeness",
                          "email_query",
                          "play_music",
                          "audio_volume_mute",
                          "social_post",
                          "alarm_set",
                          "qa_factoid",
                          "calendar_set",
                          "play_game",
                          "alarm_remove",
                          "lists_remove",
                          "transport_taxi",
                          "recommendation_movies",
                          "iot_coffee",
                          "music_query",
                          "play_podcasts",
                          "lists_query"
                      ],
                      "text_type": "sentence",
                      "type_of_class": "intent"
                  },
                  "type": "add_fields"
              }
          ],
          "task": "tasks.classification.multi_class",
          "templates": "templates.classification.multi_class.all",
          "type": "task_card"
      }

References: :ref:`tasks.classification.multi_class <tasks.classification.multi_class>`, :ref:`templates.classification.multi_class.all <templates.classification.multi_class.all>`

|
|



.. _cards.amazon_mass.ru_RU:

----------

ru_RU
"""""

.. note:: ID: ``cards.amazon_mass.ru_RU``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "ru-RU",
              "path": "AmazonScience/massive",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "mappers": {
                      "intent": {
                          "0": "datetime_query",
                          "1": "iot_hue_lightchange",
                          "10": "qa_currency",
                          "11": "transport_traffic",
                          "12": "general_quirky",
                          "13": "weather_query",
                          "14": "audio_volume_up",
                          "15": "email_addcontact",
                          "16": "takeaway_order",
                          "17": "email_querycontact",
                          "18": "iot_hue_lightup",
                          "19": "recommendation_locations",
                          "2": "transport_ticket",
                          "20": "play_audiobook",
                          "21": "lists_createoradd",
                          "22": "news_query",
                          "23": "alarm_query",
                          "24": "iot_wemo_on",
                          "25": "general_joke",
                          "26": "qa_definition",
                          "27": "social_query",
                          "28": "music_settings",
                          "29": "audio_volume_other",
                          "3": "takeaway_query",
                          "30": "calendar_remove",
                          "31": "iot_hue_lightdim",
                          "32": "calendar_query",
                          "33": "email_sendemail",
                          "34": "iot_cleaning",
                          "35": "audio_volume_down",
                          "36": "play_radio",
                          "37": "cooking_query",
                          "38": "datetime_convert",
                          "39": "qa_maths",
                          "4": "qa_stock",
                          "40": "iot_hue_lightoff",
                          "41": "iot_hue_lighton",
                          "42": "transport_query",
                          "43": "music_likeness",
                          "44": "email_query",
                          "45": "play_music",
                          "46": "audio_volume_mute",
                          "47": "social_post",
                          "48": "alarm_set",
                          "49": "qa_factoid",
                          "5": "general_greet",
                          "50": "calendar_set",
                          "51": "play_game",
                          "52": "alarm_remove",
                          "53": "lists_remove",
                          "54": "transport_taxi",
                          "55": "recommendation_movies",
                          "56": "iot_coffee",
                          "57": "music_query",
                          "58": "play_podcasts",
                          "59": "lists_query",
                          "6": "recommendation_events",
                          "7": "music_dislikeness",
                          "8": "iot_wemo_off",
                          "9": "cooking_recipe"
                      }
                  },
                  "type": "map_instance_values"
              },
              {
                  "field_to_field": {
                      "intent": "label",
                      "utt": "text"
                  },
                  "type": "rename_fields"
              },
              {
                  "fields": {
                      "classes": [
                          "datetime_query",
                          "iot_hue_lightchange",
                          "transport_ticket",
                          "takeaway_query",
                          "qa_stock",
                          "general_greet",
                          "recommendation_events",
                          "music_dislikeness",
                          "iot_wemo_off",
                          "cooking_recipe",
                          "qa_currency",
                          "transport_traffic",
                          "general_quirky",
                          "weather_query",
                          "audio_volume_up",
                          "email_addcontact",
                          "takeaway_order",
                          "email_querycontact",
                          "iot_hue_lightup",
                          "recommendation_locations",
                          "play_audiobook",
                          "lists_createoradd",
                          "news_query",
                          "alarm_query",
                          "iot_wemo_on",
                          "general_joke",
                          "qa_definition",
                          "social_query",
                          "music_settings",
                          "audio_volume_other",
                          "calendar_remove",
                          "iot_hue_lightdim",
                          "calendar_query",
                          "email_sendemail",
                          "iot_cleaning",
                          "audio_volume_down",
                          "play_radio",
                          "cooking_query",
                          "datetime_convert",
                          "qa_maths",
                          "iot_hue_lightoff",
                          "iot_hue_lighton",
                          "transport_query",
                          "music_likeness",
                          "email_query",
                          "play_music",
                          "audio_volume_mute",
                          "social_post",
                          "alarm_set",
                          "qa_factoid",
                          "calendar_set",
                          "play_game",
                          "alarm_remove",
                          "lists_remove",
                          "transport_taxi",
                          "recommendation_movies",
                          "iot_coffee",
                          "music_query",
                          "play_podcasts",
                          "lists_query"
                      ],
                      "text_type": "sentence",
                      "type_of_class": "intent"
                  },
                  "type": "add_fields"
              }
          ],
          "task": "tasks.classification.multi_class",
          "templates": "templates.classification.multi_class.all",
          "type": "task_card"
      }

References: :ref:`tasks.classification.multi_class <tasks.classification.multi_class>`, :ref:`templates.classification.multi_class.all <templates.classification.multi_class.all>`

|
|



.. _cards.amazon_mass.sq_AL:

----------

sq_AL
"""""

.. note:: ID: ``cards.amazon_mass.sq_AL``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "sq-AL",
              "path": "AmazonScience/massive",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "mappers": {
                      "intent": {
                          "0": "datetime_query",
                          "1": "iot_hue_lightchange",
                          "10": "qa_currency",
                          "11": "transport_traffic",
                          "12": "general_quirky",
                          "13": "weather_query",
                          "14": "audio_volume_up",
                          "15": "email_addcontact",
                          "16": "takeaway_order",
                          "17": "email_querycontact",
                          "18": "iot_hue_lightup",
                          "19": "recommendation_locations",
                          "2": "transport_ticket",
                          "20": "play_audiobook",
                          "21": "lists_createoradd",
                          "22": "news_query",
                          "23": "alarm_query",
                          "24": "iot_wemo_on",
                          "25": "general_joke",
                          "26": "qa_definition",
                          "27": "social_query",
                          "28": "music_settings",
                          "29": "audio_volume_other",
                          "3": "takeaway_query",
                          "30": "calendar_remove",
                          "31": "iot_hue_lightdim",
                          "32": "calendar_query",
                          "33": "email_sendemail",
                          "34": "iot_cleaning",
                          "35": "audio_volume_down",
                          "36": "play_radio",
                          "37": "cooking_query",
                          "38": "datetime_convert",
                          "39": "qa_maths",
                          "4": "qa_stock",
                          "40": "iot_hue_lightoff",
                          "41": "iot_hue_lighton",
                          "42": "transport_query",
                          "43": "music_likeness",
                          "44": "email_query",
                          "45": "play_music",
                          "46": "audio_volume_mute",
                          "47": "social_post",
                          "48": "alarm_set",
                          "49": "qa_factoid",
                          "5": "general_greet",
                          "50": "calendar_set",
                          "51": "play_game",
                          "52": "alarm_remove",
                          "53": "lists_remove",
                          "54": "transport_taxi",
                          "55": "recommendation_movies",
                          "56": "iot_coffee",
                          "57": "music_query",
                          "58": "play_podcasts",
                          "59": "lists_query",
                          "6": "recommendation_events",
                          "7": "music_dislikeness",
                          "8": "iot_wemo_off",
                          "9": "cooking_recipe"
                      }
                  },
                  "type": "map_instance_values"
              },
              {
                  "field_to_field": {
                      "intent": "label",
                      "utt": "text"
                  },
                  "type": "rename_fields"
              },
              {
                  "fields": {
                      "classes": [
                          "datetime_query",
                          "iot_hue_lightchange",
                          "transport_ticket",
                          "takeaway_query",
                          "qa_stock",
                          "general_greet",
                          "recommendation_events",
                          "music_dislikeness",
                          "iot_wemo_off",
                          "cooking_recipe",
                          "qa_currency",
                          "transport_traffic",
                          "general_quirky",
                          "weather_query",
                          "audio_volume_up",
                          "email_addcontact",
                          "takeaway_order",
                          "email_querycontact",
                          "iot_hue_lightup",
                          "recommendation_locations",
                          "play_audiobook",
                          "lists_createoradd",
                          "news_query",
                          "alarm_query",
                          "iot_wemo_on",
                          "general_joke",
                          "qa_definition",
                          "social_query",
                          "music_settings",
                          "audio_volume_other",
                          "calendar_remove",
                          "iot_hue_lightdim",
                          "calendar_query",
                          "email_sendemail",
                          "iot_cleaning",
                          "audio_volume_down",
                          "play_radio",
                          "cooking_query",
                          "datetime_convert",
                          "qa_maths",
                          "iot_hue_lightoff",
                          "iot_hue_lighton",
                          "transport_query",
                          "music_likeness",
                          "email_query",
                          "play_music",
                          "audio_volume_mute",
                          "social_post",
                          "alarm_set",
                          "qa_factoid",
                          "calendar_set",
                          "play_game",
                          "alarm_remove",
                          "lists_remove",
                          "transport_taxi",
                          "recommendation_movies",
                          "iot_coffee",
                          "music_query",
                          "play_podcasts",
                          "lists_query"
                      ],
                      "text_type": "sentence",
                      "type_of_class": "intent"
                  },
                  "type": "add_fields"
              }
          ],
          "task": "tasks.classification.multi_class",
          "templates": "templates.classification.multi_class.all",
          "type": "task_card"
      }

References: :ref:`tasks.classification.multi_class <tasks.classification.multi_class>`, :ref:`templates.classification.multi_class.all <templates.classification.multi_class.all>`

|
|



.. _cards.amazon_mass.mn_MN:

----------

mn_MN
"""""

.. note:: ID: ``cards.amazon_mass.mn_MN``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "mn-MN",
              "path": "AmazonScience/massive",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "mappers": {
                      "intent": {
                          "0": "datetime_query",
                          "1": "iot_hue_lightchange",
                          "10": "qa_currency",
                          "11": "transport_traffic",
                          "12": "general_quirky",
                          "13": "weather_query",
                          "14": "audio_volume_up",
                          "15": "email_addcontact",
                          "16": "takeaway_order",
                          "17": "email_querycontact",
                          "18": "iot_hue_lightup",
                          "19": "recommendation_locations",
                          "2": "transport_ticket",
                          "20": "play_audiobook",
                          "21": "lists_createoradd",
                          "22": "news_query",
                          "23": "alarm_query",
                          "24": "iot_wemo_on",
                          "25": "general_joke",
                          "26": "qa_definition",
                          "27": "social_query",
                          "28": "music_settings",
                          "29": "audio_volume_other",
                          "3": "takeaway_query",
                          "30": "calendar_remove",
                          "31": "iot_hue_lightdim",
                          "32": "calendar_query",
                          "33": "email_sendemail",
                          "34": "iot_cleaning",
                          "35": "audio_volume_down",
                          "36": "play_radio",
                          "37": "cooking_query",
                          "38": "datetime_convert",
                          "39": "qa_maths",
                          "4": "qa_stock",
                          "40": "iot_hue_lightoff",
                          "41": "iot_hue_lighton",
                          "42": "transport_query",
                          "43": "music_likeness",
                          "44": "email_query",
                          "45": "play_music",
                          "46": "audio_volume_mute",
                          "47": "social_post",
                          "48": "alarm_set",
                          "49": "qa_factoid",
                          "5": "general_greet",
                          "50": "calendar_set",
                          "51": "play_game",
                          "52": "alarm_remove",
                          "53": "lists_remove",
                          "54": "transport_taxi",
                          "55": "recommendation_movies",
                          "56": "iot_coffee",
                          "57": "music_query",
                          "58": "play_podcasts",
                          "59": "lists_query",
                          "6": "recommendation_events",
                          "7": "music_dislikeness",
                          "8": "iot_wemo_off",
                          "9": "cooking_recipe"
                      }
                  },
                  "type": "map_instance_values"
              },
              {
                  "field_to_field": {
                      "intent": "label",
                      "utt": "text"
                  },
                  "type": "rename_fields"
              },
              {
                  "fields": {
                      "classes": [
                          "datetime_query",
                          "iot_hue_lightchange",
                          "transport_ticket",
                          "takeaway_query",
                          "qa_stock",
                          "general_greet",
                          "recommendation_events",
                          "music_dislikeness",
                          "iot_wemo_off",
                          "cooking_recipe",
                          "qa_currency",
                          "transport_traffic",
                          "general_quirky",
                          "weather_query",
                          "audio_volume_up",
                          "email_addcontact",
                          "takeaway_order",
                          "email_querycontact",
                          "iot_hue_lightup",
                          "recommendation_locations",
                          "play_audiobook",
                          "lists_createoradd",
                          "news_query",
                          "alarm_query",
                          "iot_wemo_on",
                          "general_joke",
                          "qa_definition",
                          "social_query",
                          "music_settings",
                          "audio_volume_other",
                          "calendar_remove",
                          "iot_hue_lightdim",
                          "calendar_query",
                          "email_sendemail",
                          "iot_cleaning",
                          "audio_volume_down",
                          "play_radio",
                          "cooking_query",
                          "datetime_convert",
                          "qa_maths",
                          "iot_hue_lightoff",
                          "iot_hue_lighton",
                          "transport_query",
                          "music_likeness",
                          "email_query",
                          "play_music",
                          "audio_volume_mute",
                          "social_post",
                          "alarm_set",
                          "qa_factoid",
                          "calendar_set",
                          "play_game",
                          "alarm_remove",
                          "lists_remove",
                          "transport_taxi",
                          "recommendation_movies",
                          "iot_coffee",
                          "music_query",
                          "play_podcasts",
                          "lists_query"
                      ],
                      "text_type": "sentence",
                      "type_of_class": "intent"
                  },
                  "type": "add_fields"
              }
          ],
          "task": "tasks.classification.multi_class",
          "templates": "templates.classification.multi_class.all",
          "type": "task_card"
      }

References: :ref:`tasks.classification.multi_class <tasks.classification.multi_class>`, :ref:`templates.classification.multi_class.all <templates.classification.multi_class.all>`

|
|



.. _cards.amazon_mass.th_TH:

----------

th_TH
"""""

.. note:: ID: ``cards.amazon_mass.th_TH``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "th-TH",
              "path": "AmazonScience/massive",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "mappers": {
                      "intent": {
                          "0": "datetime_query",
                          "1": "iot_hue_lightchange",
                          "10": "qa_currency",
                          "11": "transport_traffic",
                          "12": "general_quirky",
                          "13": "weather_query",
                          "14": "audio_volume_up",
                          "15": "email_addcontact",
                          "16": "takeaway_order",
                          "17": "email_querycontact",
                          "18": "iot_hue_lightup",
                          "19": "recommendation_locations",
                          "2": "transport_ticket",
                          "20": "play_audiobook",
                          "21": "lists_createoradd",
                          "22": "news_query",
                          "23": "alarm_query",
                          "24": "iot_wemo_on",
                          "25": "general_joke",
                          "26": "qa_definition",
                          "27": "social_query",
                          "28": "music_settings",
                          "29": "audio_volume_other",
                          "3": "takeaway_query",
                          "30": "calendar_remove",
                          "31": "iot_hue_lightdim",
                          "32": "calendar_query",
                          "33": "email_sendemail",
                          "34": "iot_cleaning",
                          "35": "audio_volume_down",
                          "36": "play_radio",
                          "37": "cooking_query",
                          "38": "datetime_convert",
                          "39": "qa_maths",
                          "4": "qa_stock",
                          "40": "iot_hue_lightoff",
                          "41": "iot_hue_lighton",
                          "42": "transport_query",
                          "43": "music_likeness",
                          "44": "email_query",
                          "45": "play_music",
                          "46": "audio_volume_mute",
                          "47": "social_post",
                          "48": "alarm_set",
                          "49": "qa_factoid",
                          "5": "general_greet",
                          "50": "calendar_set",
                          "51": "play_game",
                          "52": "alarm_remove",
                          "53": "lists_remove",
                          "54": "transport_taxi",
                          "55": "recommendation_movies",
                          "56": "iot_coffee",
                          "57": "music_query",
                          "58": "play_podcasts",
                          "59": "lists_query",
                          "6": "recommendation_events",
                          "7": "music_dislikeness",
                          "8": "iot_wemo_off",
                          "9": "cooking_recipe"
                      }
                  },
                  "type": "map_instance_values"
              },
              {
                  "field_to_field": {
                      "intent": "label",
                      "utt": "text"
                  },
                  "type": "rename_fields"
              },
              {
                  "fields": {
                      "classes": [
                          "datetime_query",
                          "iot_hue_lightchange",
                          "transport_ticket",
                          "takeaway_query",
                          "qa_stock",
                          "general_greet",
                          "recommendation_events",
                          "music_dislikeness",
                          "iot_wemo_off",
                          "cooking_recipe",
                          "qa_currency",
                          "transport_traffic",
                          "general_quirky",
                          "weather_query",
                          "audio_volume_up",
                          "email_addcontact",
                          "takeaway_order",
                          "email_querycontact",
                          "iot_hue_lightup",
                          "recommendation_locations",
                          "play_audiobook",
                          "lists_createoradd",
                          "news_query",
                          "alarm_query",
                          "iot_wemo_on",
                          "general_joke",
                          "qa_definition",
                          "social_query",
                          "music_settings",
                          "audio_volume_other",
                          "calendar_remove",
                          "iot_hue_lightdim",
                          "calendar_query",
                          "email_sendemail",
                          "iot_cleaning",
                          "audio_volume_down",
                          "play_radio",
                          "cooking_query",
                          "datetime_convert",
                          "qa_maths",
                          "iot_hue_lightoff",
                          "iot_hue_lighton",
                          "transport_query",
                          "music_likeness",
                          "email_query",
                          "play_music",
                          "audio_volume_mute",
                          "social_post",
                          "alarm_set",
                          "qa_factoid",
                          "calendar_set",
                          "play_game",
                          "alarm_remove",
                          "lists_remove",
                          "transport_taxi",
                          "recommendation_movies",
                          "iot_coffee",
                          "music_query",
                          "play_podcasts",
                          "lists_query"
                      ],
                      "text_type": "sentence",
                      "type_of_class": "intent"
                  },
                  "type": "add_fields"
              }
          ],
          "task": "tasks.classification.multi_class",
          "templates": "templates.classification.multi_class.all",
          "type": "task_card"
      }

References: :ref:`tasks.classification.multi_class <tasks.classification.multi_class>`, :ref:`templates.classification.multi_class.all <templates.classification.multi_class.all>`

|
|



.. _cards.amazon_mass.he_IL:

----------

he_IL
"""""

.. note:: ID: ``cards.amazon_mass.he_IL``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "he-IL",
              "path": "AmazonScience/massive",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "mappers": {
                      "intent": {
                          "0": "datetime_query",
                          "1": "iot_hue_lightchange",
                          "10": "qa_currency",
                          "11": "transport_traffic",
                          "12": "general_quirky",
                          "13": "weather_query",
                          "14": "audio_volume_up",
                          "15": "email_addcontact",
                          "16": "takeaway_order",
                          "17": "email_querycontact",
                          "18": "iot_hue_lightup",
                          "19": "recommendation_locations",
                          "2": "transport_ticket",
                          "20": "play_audiobook",
                          "21": "lists_createoradd",
                          "22": "news_query",
                          "23": "alarm_query",
                          "24": "iot_wemo_on",
                          "25": "general_joke",
                          "26": "qa_definition",
                          "27": "social_query",
                          "28": "music_settings",
                          "29": "audio_volume_other",
                          "3": "takeaway_query",
                          "30": "calendar_remove",
                          "31": "iot_hue_lightdim",
                          "32": "calendar_query",
                          "33": "email_sendemail",
                          "34": "iot_cleaning",
                          "35": "audio_volume_down",
                          "36": "play_radio",
                          "37": "cooking_query",
                          "38": "datetime_convert",
                          "39": "qa_maths",
                          "4": "qa_stock",
                          "40": "iot_hue_lightoff",
                          "41": "iot_hue_lighton",
                          "42": "transport_query",
                          "43": "music_likeness",
                          "44": "email_query",
                          "45": "play_music",
                          "46": "audio_volume_mute",
                          "47": "social_post",
                          "48": "alarm_set",
                          "49": "qa_factoid",
                          "5": "general_greet",
                          "50": "calendar_set",
                          "51": "play_game",
                          "52": "alarm_remove",
                          "53": "lists_remove",
                          "54": "transport_taxi",
                          "55": "recommendation_movies",
                          "56": "iot_coffee",
                          "57": "music_query",
                          "58": "play_podcasts",
                          "59": "lists_query",
                          "6": "recommendation_events",
                          "7": "music_dislikeness",
                          "8": "iot_wemo_off",
                          "9": "cooking_recipe"
                      }
                  },
                  "type": "map_instance_values"
              },
              {
                  "field_to_field": {
                      "intent": "label",
                      "utt": "text"
                  },
                  "type": "rename_fields"
              },
              {
                  "fields": {
                      "classes": [
                          "datetime_query",
                          "iot_hue_lightchange",
                          "transport_ticket",
                          "takeaway_query",
                          "qa_stock",
                          "general_greet",
                          "recommendation_events",
                          "music_dislikeness",
                          "iot_wemo_off",
                          "cooking_recipe",
                          "qa_currency",
                          "transport_traffic",
                          "general_quirky",
                          "weather_query",
                          "audio_volume_up",
                          "email_addcontact",
                          "takeaway_order",
                          "email_querycontact",
                          "iot_hue_lightup",
                          "recommendation_locations",
                          "play_audiobook",
                          "lists_createoradd",
                          "news_query",
                          "alarm_query",
                          "iot_wemo_on",
                          "general_joke",
                          "qa_definition",
                          "social_query",
                          "music_settings",
                          "audio_volume_other",
                          "calendar_remove",
                          "iot_hue_lightdim",
                          "calendar_query",
                          "email_sendemail",
                          "iot_cleaning",
                          "audio_volume_down",
                          "play_radio",
                          "cooking_query",
                          "datetime_convert",
                          "qa_maths",
                          "iot_hue_lightoff",
                          "iot_hue_lighton",
                          "transport_query",
                          "music_likeness",
                          "email_query",
                          "play_music",
                          "audio_volume_mute",
                          "social_post",
                          "alarm_set",
                          "qa_factoid",
                          "calendar_set",
                          "play_game",
                          "alarm_remove",
                          "lists_remove",
                          "transport_taxi",
                          "recommendation_movies",
                          "iot_coffee",
                          "music_query",
                          "play_podcasts",
                          "lists_query"
                      ],
                      "text_type": "sentence",
                      "type_of_class": "intent"
                  },
                  "type": "add_fields"
              }
          ],
          "task": "tasks.classification.multi_class",
          "templates": "templates.classification.multi_class.all",
          "type": "task_card"
      }

References: :ref:`tasks.classification.multi_class <tasks.classification.multi_class>`, :ref:`templates.classification.multi_class.all <templates.classification.multi_class.all>`

|
|



.. _cards.amazon_mass.km_KH:

----------

km_KH
"""""

.. note:: ID: ``cards.amazon_mass.km_KH``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "km-KH",
              "path": "AmazonScience/massive",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "mappers": {
                      "intent": {
                          "0": "datetime_query",
                          "1": "iot_hue_lightchange",
                          "10": "qa_currency",
                          "11": "transport_traffic",
                          "12": "general_quirky",
                          "13": "weather_query",
                          "14": "audio_volume_up",
                          "15": "email_addcontact",
                          "16": "takeaway_order",
                          "17": "email_querycontact",
                          "18": "iot_hue_lightup",
                          "19": "recommendation_locations",
                          "2": "transport_ticket",
                          "20": "play_audiobook",
                          "21": "lists_createoradd",
                          "22": "news_query",
                          "23": "alarm_query",
                          "24": "iot_wemo_on",
                          "25": "general_joke",
                          "26": "qa_definition",
                          "27": "social_query",
                          "28": "music_settings",
                          "29": "audio_volume_other",
                          "3": "takeaway_query",
                          "30": "calendar_remove",
                          "31": "iot_hue_lightdim",
                          "32": "calendar_query",
                          "33": "email_sendemail",
                          "34": "iot_cleaning",
                          "35": "audio_volume_down",
                          "36": "play_radio",
                          "37": "cooking_query",
                          "38": "datetime_convert",
                          "39": "qa_maths",
                          "4": "qa_stock",
                          "40": "iot_hue_lightoff",
                          "41": "iot_hue_lighton",
                          "42": "transport_query",
                          "43": "music_likeness",
                          "44": "email_query",
                          "45": "play_music",
                          "46": "audio_volume_mute",
                          "47": "social_post",
                          "48": "alarm_set",
                          "49": "qa_factoid",
                          "5": "general_greet",
                          "50": "calendar_set",
                          "51": "play_game",
                          "52": "alarm_remove",
                          "53": "lists_remove",
                          "54": "transport_taxi",
                          "55": "recommendation_movies",
                          "56": "iot_coffee",
                          "57": "music_query",
                          "58": "play_podcasts",
                          "59": "lists_query",
                          "6": "recommendation_events",
                          "7": "music_dislikeness",
                          "8": "iot_wemo_off",
                          "9": "cooking_recipe"
                      }
                  },
                  "type": "map_instance_values"
              },
              {
                  "field_to_field": {
                      "intent": "label",
                      "utt": "text"
                  },
                  "type": "rename_fields"
              },
              {
                  "fields": {
                      "classes": [
                          "datetime_query",
                          "iot_hue_lightchange",
                          "transport_ticket",
                          "takeaway_query",
                          "qa_stock",
                          "general_greet",
                          "recommendation_events",
                          "music_dislikeness",
                          "iot_wemo_off",
                          "cooking_recipe",
                          "qa_currency",
                          "transport_traffic",
                          "general_quirky",
                          "weather_query",
                          "audio_volume_up",
                          "email_addcontact",
                          "takeaway_order",
                          "email_querycontact",
                          "iot_hue_lightup",
                          "recommendation_locations",
                          "play_audiobook",
                          "lists_createoradd",
                          "news_query",
                          "alarm_query",
                          "iot_wemo_on",
                          "general_joke",
                          "qa_definition",
                          "social_query",
                          "music_settings",
                          "audio_volume_other",
                          "calendar_remove",
                          "iot_hue_lightdim",
                          "calendar_query",
                          "email_sendemail",
                          "iot_cleaning",
                          "audio_volume_down",
                          "play_radio",
                          "cooking_query",
                          "datetime_convert",
                          "qa_maths",
                          "iot_hue_lightoff",
                          "iot_hue_lighton",
                          "transport_query",
                          "music_likeness",
                          "email_query",
                          "play_music",
                          "audio_volume_mute",
                          "social_post",
                          "alarm_set",
                          "qa_factoid",
                          "calendar_set",
                          "play_game",
                          "alarm_remove",
                          "lists_remove",
                          "transport_taxi",
                          "recommendation_movies",
                          "iot_coffee",
                          "music_query",
                          "play_podcasts",
                          "lists_query"
                      ],
                      "text_type": "sentence",
                      "type_of_class": "intent"
                  },
                  "type": "add_fields"
              }
          ],
          "task": "tasks.classification.multi_class",
          "templates": "templates.classification.multi_class.all",
          "type": "task_card"
      }

References: :ref:`tasks.classification.multi_class <tasks.classification.multi_class>`, :ref:`templates.classification.multi_class.all <templates.classification.multi_class.all>`

|
|



.. _cards.amazon_mass.ca_ES:

----------

ca_ES
"""""

.. note:: ID: ``cards.amazon_mass.ca_ES``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "ca-ES",
              "path": "AmazonScience/massive",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "mappers": {
                      "intent": {
                          "0": "datetime_query",
                          "1": "iot_hue_lightchange",
                          "10": "qa_currency",
                          "11": "transport_traffic",
                          "12": "general_quirky",
                          "13": "weather_query",
                          "14": "audio_volume_up",
                          "15": "email_addcontact",
                          "16": "takeaway_order",
                          "17": "email_querycontact",
                          "18": "iot_hue_lightup",
                          "19": "recommendation_locations",
                          "2": "transport_ticket",
                          "20": "play_audiobook",
                          "21": "lists_createoradd",
                          "22": "news_query",
                          "23": "alarm_query",
                          "24": "iot_wemo_on",
                          "25": "general_joke",
                          "26": "qa_definition",
                          "27": "social_query",
                          "28": "music_settings",
                          "29": "audio_volume_other",
                          "3": "takeaway_query",
                          "30": "calendar_remove",
                          "31": "iot_hue_lightdim",
                          "32": "calendar_query",
                          "33": "email_sendemail",
                          "34": "iot_cleaning",
                          "35": "audio_volume_down",
                          "36": "play_radio",
                          "37": "cooking_query",
                          "38": "datetime_convert",
                          "39": "qa_maths",
                          "4": "qa_stock",
                          "40": "iot_hue_lightoff",
                          "41": "iot_hue_lighton",
                          "42": "transport_query",
                          "43": "music_likeness",
                          "44": "email_query",
                          "45": "play_music",
                          "46": "audio_volume_mute",
                          "47": "social_post",
                          "48": "alarm_set",
                          "49": "qa_factoid",
                          "5": "general_greet",
                          "50": "calendar_set",
                          "51": "play_game",
                          "52": "alarm_remove",
                          "53": "lists_remove",
                          "54": "transport_taxi",
                          "55": "recommendation_movies",
                          "56": "iot_coffee",
                          "57": "music_query",
                          "58": "play_podcasts",
                          "59": "lists_query",
                          "6": "recommendation_events",
                          "7": "music_dislikeness",
                          "8": "iot_wemo_off",
                          "9": "cooking_recipe"
                      }
                  },
                  "type": "map_instance_values"
              },
              {
                  "field_to_field": {
                      "intent": "label",
                      "utt": "text"
                  },
                  "type": "rename_fields"
              },
              {
                  "fields": {
                      "classes": [
                          "datetime_query",
                          "iot_hue_lightchange",
                          "transport_ticket",
                          "takeaway_query",
                          "qa_stock",
                          "general_greet",
                          "recommendation_events",
                          "music_dislikeness",
                          "iot_wemo_off",
                          "cooking_recipe",
                          "qa_currency",
                          "transport_traffic",
                          "general_quirky",
                          "weather_query",
                          "audio_volume_up",
                          "email_addcontact",
                          "takeaway_order",
                          "email_querycontact",
                          "iot_hue_lightup",
                          "recommendation_locations",
                          "play_audiobook",
                          "lists_createoradd",
                          "news_query",
                          "alarm_query",
                          "iot_wemo_on",
                          "general_joke",
                          "qa_definition",
                          "social_query",
                          "music_settings",
                          "audio_volume_other",
                          "calendar_remove",
                          "iot_hue_lightdim",
                          "calendar_query",
                          "email_sendemail",
                          "iot_cleaning",
                          "audio_volume_down",
                          "play_radio",
                          "cooking_query",
                          "datetime_convert",
                          "qa_maths",
                          "iot_hue_lightoff",
                          "iot_hue_lighton",
                          "transport_query",
                          "music_likeness",
                          "email_query",
                          "play_music",
                          "audio_volume_mute",
                          "social_post",
                          "alarm_set",
                          "qa_factoid",
                          "calendar_set",
                          "play_game",
                          "alarm_remove",
                          "lists_remove",
                          "transport_taxi",
                          "recommendation_movies",
                          "iot_coffee",
                          "music_query",
                          "play_podcasts",
                          "lists_query"
                      ],
                      "text_type": "sentence",
                      "type_of_class": "intent"
                  },
                  "type": "add_fields"
              }
          ],
          "task": "tasks.classification.multi_class",
          "templates": "templates.classification.multi_class.all",
          "type": "task_card"
      }

References: :ref:`tasks.classification.multi_class <tasks.classification.multi_class>`, :ref:`templates.classification.multi_class.all <templates.classification.multi_class.all>`

|
|



.. _cards.amazon_mass.fi_FI:

----------

fi_FI
"""""

.. note:: ID: ``cards.amazon_mass.fi_FI``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "fi-FI",
              "path": "AmazonScience/massive",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "mappers": {
                      "intent": {
                          "0": "datetime_query",
                          "1": "iot_hue_lightchange",
                          "10": "qa_currency",
                          "11": "transport_traffic",
                          "12": "general_quirky",
                          "13": "weather_query",
                          "14": "audio_volume_up",
                          "15": "email_addcontact",
                          "16": "takeaway_order",
                          "17": "email_querycontact",
                          "18": "iot_hue_lightup",
                          "19": "recommendation_locations",
                          "2": "transport_ticket",
                          "20": "play_audiobook",
                          "21": "lists_createoradd",
                          "22": "news_query",
                          "23": "alarm_query",
                          "24": "iot_wemo_on",
                          "25": "general_joke",
                          "26": "qa_definition",
                          "27": "social_query",
                          "28": "music_settings",
                          "29": "audio_volume_other",
                          "3": "takeaway_query",
                          "30": "calendar_remove",
                          "31": "iot_hue_lightdim",
                          "32": "calendar_query",
                          "33": "email_sendemail",
                          "34": "iot_cleaning",
                          "35": "audio_volume_down",
                          "36": "play_radio",
                          "37": "cooking_query",
                          "38": "datetime_convert",
                          "39": "qa_maths",
                          "4": "qa_stock",
                          "40": "iot_hue_lightoff",
                          "41": "iot_hue_lighton",
                          "42": "transport_query",
                          "43": "music_likeness",
                          "44": "email_query",
                          "45": "play_music",
                          "46": "audio_volume_mute",
                          "47": "social_post",
                          "48": "alarm_set",
                          "49": "qa_factoid",
                          "5": "general_greet",
                          "50": "calendar_set",
                          "51": "play_game",
                          "52": "alarm_remove",
                          "53": "lists_remove",
                          "54": "transport_taxi",
                          "55": "recommendation_movies",
                          "56": "iot_coffee",
                          "57": "music_query",
                          "58": "play_podcasts",
                          "59": "lists_query",
                          "6": "recommendation_events",
                          "7": "music_dislikeness",
                          "8": "iot_wemo_off",
                          "9": "cooking_recipe"
                      }
                  },
                  "type": "map_instance_values"
              },
              {
                  "field_to_field": {
                      "intent": "label",
                      "utt": "text"
                  },
                  "type": "rename_fields"
              },
              {
                  "fields": {
                      "classes": [
                          "datetime_query",
                          "iot_hue_lightchange",
                          "transport_ticket",
                          "takeaway_query",
                          "qa_stock",
                          "general_greet",
                          "recommendation_events",
                          "music_dislikeness",
                          "iot_wemo_off",
                          "cooking_recipe",
                          "qa_currency",
                          "transport_traffic",
                          "general_quirky",
                          "weather_query",
                          "audio_volume_up",
                          "email_addcontact",
                          "takeaway_order",
                          "email_querycontact",
                          "iot_hue_lightup",
                          "recommendation_locations",
                          "play_audiobook",
                          "lists_createoradd",
                          "news_query",
                          "alarm_query",
                          "iot_wemo_on",
                          "general_joke",
                          "qa_definition",
                          "social_query",
                          "music_settings",
                          "audio_volume_other",
                          "calendar_remove",
                          "iot_hue_lightdim",
                          "calendar_query",
                          "email_sendemail",
                          "iot_cleaning",
                          "audio_volume_down",
                          "play_radio",
                          "cooking_query",
                          "datetime_convert",
                          "qa_maths",
                          "iot_hue_lightoff",
                          "iot_hue_lighton",
                          "transport_query",
                          "music_likeness",
                          "email_query",
                          "play_music",
                          "audio_volume_mute",
                          "social_post",
                          "alarm_set",
                          "qa_factoid",
                          "calendar_set",
                          "play_game",
                          "alarm_remove",
                          "lists_remove",
                          "transport_taxi",
                          "recommendation_movies",
                          "iot_coffee",
                          "music_query",
                          "play_podcasts",
                          "lists_query"
                      ],
                      "text_type": "sentence",
                      "type_of_class": "intent"
                  },
                  "type": "add_fields"
              }
          ],
          "task": "tasks.classification.multi_class",
          "templates": "templates.classification.multi_class.all",
          "type": "task_card"
      }

References: :ref:`tasks.classification.multi_class <tasks.classification.multi_class>`, :ref:`templates.classification.multi_class.all <templates.classification.multi_class.all>`

|
|



.. _cards.amazon_mass.da_DK:

----------

da_DK
"""""

.. note:: ID: ``cards.amazon_mass.da_DK``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "da-DK",
              "path": "AmazonScience/massive",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "mappers": {
                      "intent": {
                          "0": "datetime_query",
                          "1": "iot_hue_lightchange",
                          "10": "qa_currency",
                          "11": "transport_traffic",
                          "12": "general_quirky",
                          "13": "weather_query",
                          "14": "audio_volume_up",
                          "15": "email_addcontact",
                          "16": "takeaway_order",
                          "17": "email_querycontact",
                          "18": "iot_hue_lightup",
                          "19": "recommendation_locations",
                          "2": "transport_ticket",
                          "20": "play_audiobook",
                          "21": "lists_createoradd",
                          "22": "news_query",
                          "23": "alarm_query",
                          "24": "iot_wemo_on",
                          "25": "general_joke",
                          "26": "qa_definition",
                          "27": "social_query",
                          "28": "music_settings",
                          "29": "audio_volume_other",
                          "3": "takeaway_query",
                          "30": "calendar_remove",
                          "31": "iot_hue_lightdim",
                          "32": "calendar_query",
                          "33": "email_sendemail",
                          "34": "iot_cleaning",
                          "35": "audio_volume_down",
                          "36": "play_radio",
                          "37": "cooking_query",
                          "38": "datetime_convert",
                          "39": "qa_maths",
                          "4": "qa_stock",
                          "40": "iot_hue_lightoff",
                          "41": "iot_hue_lighton",
                          "42": "transport_query",
                          "43": "music_likeness",
                          "44": "email_query",
                          "45": "play_music",
                          "46": "audio_volume_mute",
                          "47": "social_post",
                          "48": "alarm_set",
                          "49": "qa_factoid",
                          "5": "general_greet",
                          "50": "calendar_set",
                          "51": "play_game",
                          "52": "alarm_remove",
                          "53": "lists_remove",
                          "54": "transport_taxi",
                          "55": "recommendation_movies",
                          "56": "iot_coffee",
                          "57": "music_query",
                          "58": "play_podcasts",
                          "59": "lists_query",
                          "6": "recommendation_events",
                          "7": "music_dislikeness",
                          "8": "iot_wemo_off",
                          "9": "cooking_recipe"
                      }
                  },
                  "type": "map_instance_values"
              },
              {
                  "field_to_field": {
                      "intent": "label",
                      "utt": "text"
                  },
                  "type": "rename_fields"
              },
              {
                  "fields": {
                      "classes": [
                          "datetime_query",
                          "iot_hue_lightchange",
                          "transport_ticket",
                          "takeaway_query",
                          "qa_stock",
                          "general_greet",
                          "recommendation_events",
                          "music_dislikeness",
                          "iot_wemo_off",
                          "cooking_recipe",
                          "qa_currency",
                          "transport_traffic",
                          "general_quirky",
                          "weather_query",
                          "audio_volume_up",
                          "email_addcontact",
                          "takeaway_order",
                          "email_querycontact",
                          "iot_hue_lightup",
                          "recommendation_locations",
                          "play_audiobook",
                          "lists_createoradd",
                          "news_query",
                          "alarm_query",
                          "iot_wemo_on",
                          "general_joke",
                          "qa_definition",
                          "social_query",
                          "music_settings",
                          "audio_volume_other",
                          "calendar_remove",
                          "iot_hue_lightdim",
                          "calendar_query",
                          "email_sendemail",
                          "iot_cleaning",
                          "audio_volume_down",
                          "play_radio",
                          "cooking_query",
                          "datetime_convert",
                          "qa_maths",
                          "iot_hue_lightoff",
                          "iot_hue_lighton",
                          "transport_query",
                          "music_likeness",
                          "email_query",
                          "play_music",
                          "audio_volume_mute",
                          "social_post",
                          "alarm_set",
                          "qa_factoid",
                          "calendar_set",
                          "play_game",
                          "alarm_remove",
                          "lists_remove",
                          "transport_taxi",
                          "recommendation_movies",
                          "iot_coffee",
                          "music_query",
                          "play_podcasts",
                          "lists_query"
                      ],
                      "text_type": "sentence",
                      "type_of_class": "intent"
                  },
                  "type": "add_fields"
              }
          ],
          "task": "tasks.classification.multi_class",
          "templates": "templates.classification.multi_class.all",
          "type": "task_card"
      }

References: :ref:`tasks.classification.multi_class <tasks.classification.multi_class>`, :ref:`templates.classification.multi_class.all <templates.classification.multi_class.all>`

|
|



.. _cards.amazon_mass.jv_ID:

----------

jv_ID
"""""

.. note:: ID: ``cards.amazon_mass.jv_ID``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "jv-ID",
              "path": "AmazonScience/massive",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "mappers": {
                      "intent": {
                          "0": "datetime_query",
                          "1": "iot_hue_lightchange",
                          "10": "qa_currency",
                          "11": "transport_traffic",
                          "12": "general_quirky",
                          "13": "weather_query",
                          "14": "audio_volume_up",
                          "15": "email_addcontact",
                          "16": "takeaway_order",
                          "17": "email_querycontact",
                          "18": "iot_hue_lightup",
                          "19": "recommendation_locations",
                          "2": "transport_ticket",
                          "20": "play_audiobook",
                          "21": "lists_createoradd",
                          "22": "news_query",
                          "23": "alarm_query",
                          "24": "iot_wemo_on",
                          "25": "general_joke",
                          "26": "qa_definition",
                          "27": "social_query",
                          "28": "music_settings",
                          "29": "audio_volume_other",
                          "3": "takeaway_query",
                          "30": "calendar_remove",
                          "31": "iot_hue_lightdim",
                          "32": "calendar_query",
                          "33": "email_sendemail",
                          "34": "iot_cleaning",
                          "35": "audio_volume_down",
                          "36": "play_radio",
                          "37": "cooking_query",
                          "38": "datetime_convert",
                          "39": "qa_maths",
                          "4": "qa_stock",
                          "40": "iot_hue_lightoff",
                          "41": "iot_hue_lighton",
                          "42": "transport_query",
                          "43": "music_likeness",
                          "44": "email_query",
                          "45": "play_music",
                          "46": "audio_volume_mute",
                          "47": "social_post",
                          "48": "alarm_set",
                          "49": "qa_factoid",
                          "5": "general_greet",
                          "50": "calendar_set",
                          "51": "play_game",
                          "52": "alarm_remove",
                          "53": "lists_remove",
                          "54": "transport_taxi",
                          "55": "recommendation_movies",
                          "56": "iot_coffee",
                          "57": "music_query",
                          "58": "play_podcasts",
                          "59": "lists_query",
                          "6": "recommendation_events",
                          "7": "music_dislikeness",
                          "8": "iot_wemo_off",
                          "9": "cooking_recipe"
                      }
                  },
                  "type": "map_instance_values"
              },
              {
                  "field_to_field": {
                      "intent": "label",
                      "utt": "text"
                  },
                  "type": "rename_fields"
              },
              {
                  "fields": {
                      "classes": [
                          "datetime_query",
                          "iot_hue_lightchange",
                          "transport_ticket",
                          "takeaway_query",
                          "qa_stock",
                          "general_greet",
                          "recommendation_events",
                          "music_dislikeness",
                          "iot_wemo_off",
                          "cooking_recipe",
                          "qa_currency",
                          "transport_traffic",
                          "general_quirky",
                          "weather_query",
                          "audio_volume_up",
                          "email_addcontact",
                          "takeaway_order",
                          "email_querycontact",
                          "iot_hue_lightup",
                          "recommendation_locations",
                          "play_audiobook",
                          "lists_createoradd",
                          "news_query",
                          "alarm_query",
                          "iot_wemo_on",
                          "general_joke",
                          "qa_definition",
                          "social_query",
                          "music_settings",
                          "audio_volume_other",
                          "calendar_remove",
                          "iot_hue_lightdim",
                          "calendar_query",
                          "email_sendemail",
                          "iot_cleaning",
                          "audio_volume_down",
                          "play_radio",
                          "cooking_query",
                          "datetime_convert",
                          "qa_maths",
                          "iot_hue_lightoff",
                          "iot_hue_lighton",
                          "transport_query",
                          "music_likeness",
                          "email_query",
                          "play_music",
                          "audio_volume_mute",
                          "social_post",
                          "alarm_set",
                          "qa_factoid",
                          "calendar_set",
                          "play_game",
                          "alarm_remove",
                          "lists_remove",
                          "transport_taxi",
                          "recommendation_movies",
                          "iot_coffee",
                          "music_query",
                          "play_podcasts",
                          "lists_query"
                      ],
                      "text_type": "sentence",
                      "type_of_class": "intent"
                  },
                  "type": "add_fields"
              }
          ],
          "task": "tasks.classification.multi_class",
          "templates": "templates.classification.multi_class.all",
          "type": "task_card"
      }

References: :ref:`tasks.classification.multi_class <tasks.classification.multi_class>`, :ref:`templates.classification.multi_class.all <templates.classification.multi_class.all>`

|
|



.. _cards.amazon_mass.my_MM:

----------

my_MM
"""""

.. note:: ID: ``cards.amazon_mass.my_MM``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "my-MM",
              "path": "AmazonScience/massive",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "mappers": {
                      "intent": {
                          "0": "datetime_query",
                          "1": "iot_hue_lightchange",
                          "10": "qa_currency",
                          "11": "transport_traffic",
                          "12": "general_quirky",
                          "13": "weather_query",
                          "14": "audio_volume_up",
                          "15": "email_addcontact",
                          "16": "takeaway_order",
                          "17": "email_querycontact",
                          "18": "iot_hue_lightup",
                          "19": "recommendation_locations",
                          "2": "transport_ticket",
                          "20": "play_audiobook",
                          "21": "lists_createoradd",
                          "22": "news_query",
                          "23": "alarm_query",
                          "24": "iot_wemo_on",
                          "25": "general_joke",
                          "26": "qa_definition",
                          "27": "social_query",
                          "28": "music_settings",
                          "29": "audio_volume_other",
                          "3": "takeaway_query",
                          "30": "calendar_remove",
                          "31": "iot_hue_lightdim",
                          "32": "calendar_query",
                          "33": "email_sendemail",
                          "34": "iot_cleaning",
                          "35": "audio_volume_down",
                          "36": "play_radio",
                          "37": "cooking_query",
                          "38": "datetime_convert",
                          "39": "qa_maths",
                          "4": "qa_stock",
                          "40": "iot_hue_lightoff",
                          "41": "iot_hue_lighton",
                          "42": "transport_query",
                          "43": "music_likeness",
                          "44": "email_query",
                          "45": "play_music",
                          "46": "audio_volume_mute",
                          "47": "social_post",
                          "48": "alarm_set",
                          "49": "qa_factoid",
                          "5": "general_greet",
                          "50": "calendar_set",
                          "51": "play_game",
                          "52": "alarm_remove",
                          "53": "lists_remove",
                          "54": "transport_taxi",
                          "55": "recommendation_movies",
                          "56": "iot_coffee",
                          "57": "music_query",
                          "58": "play_podcasts",
                          "59": "lists_query",
                          "6": "recommendation_events",
                          "7": "music_dislikeness",
                          "8": "iot_wemo_off",
                          "9": "cooking_recipe"
                      }
                  },
                  "type": "map_instance_values"
              },
              {
                  "field_to_field": {
                      "intent": "label",
                      "utt": "text"
                  },
                  "type": "rename_fields"
              },
              {
                  "fields": {
                      "classes": [
                          "datetime_query",
                          "iot_hue_lightchange",
                          "transport_ticket",
                          "takeaway_query",
                          "qa_stock",
                          "general_greet",
                          "recommendation_events",
                          "music_dislikeness",
                          "iot_wemo_off",
                          "cooking_recipe",
                          "qa_currency",
                          "transport_traffic",
                          "general_quirky",
                          "weather_query",
                          "audio_volume_up",
                          "email_addcontact",
                          "takeaway_order",
                          "email_querycontact",
                          "iot_hue_lightup",
                          "recommendation_locations",
                          "play_audiobook",
                          "lists_createoradd",
                          "news_query",
                          "alarm_query",
                          "iot_wemo_on",
                          "general_joke",
                          "qa_definition",
                          "social_query",
                          "music_settings",
                          "audio_volume_other",
                          "calendar_remove",
                          "iot_hue_lightdim",
                          "calendar_query",
                          "email_sendemail",
                          "iot_cleaning",
                          "audio_volume_down",
                          "play_radio",
                          "cooking_query",
                          "datetime_convert",
                          "qa_maths",
                          "iot_hue_lightoff",
                          "iot_hue_lighton",
                          "transport_query",
                          "music_likeness",
                          "email_query",
                          "play_music",
                          "audio_volume_mute",
                          "social_post",
                          "alarm_set",
                          "qa_factoid",
                          "calendar_set",
                          "play_game",
                          "alarm_remove",
                          "lists_remove",
                          "transport_taxi",
                          "recommendation_movies",
                          "iot_coffee",
                          "music_query",
                          "play_podcasts",
                          "lists_query"
                      ],
                      "text_type": "sentence",
                      "type_of_class": "intent"
                  },
                  "type": "add_fields"
              }
          ],
          "task": "tasks.classification.multi_class",
          "templates": "templates.classification.multi_class.all",
          "type": "task_card"
      }

References: :ref:`tasks.classification.multi_class <tasks.classification.multi_class>`, :ref:`templates.classification.multi_class.all <templates.classification.multi_class.all>`

|
|



.. _cards.amazon_mass.id_ID:

----------

id_ID
"""""

.. note:: ID: ``cards.amazon_mass.id_ID``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "id-ID",
              "path": "AmazonScience/massive",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "mappers": {
                      "intent": {
                          "0": "datetime_query",
                          "1": "iot_hue_lightchange",
                          "10": "qa_currency",
                          "11": "transport_traffic",
                          "12": "general_quirky",
                          "13": "weather_query",
                          "14": "audio_volume_up",
                          "15": "email_addcontact",
                          "16": "takeaway_order",
                          "17": "email_querycontact",
                          "18": "iot_hue_lightup",
                          "19": "recommendation_locations",
                          "2": "transport_ticket",
                          "20": "play_audiobook",
                          "21": "lists_createoradd",
                          "22": "news_query",
                          "23": "alarm_query",
                          "24": "iot_wemo_on",
                          "25": "general_joke",
                          "26": "qa_definition",
                          "27": "social_query",
                          "28": "music_settings",
                          "29": "audio_volume_other",
                          "3": "takeaway_query",
                          "30": "calendar_remove",
                          "31": "iot_hue_lightdim",
                          "32": "calendar_query",
                          "33": "email_sendemail",
                          "34": "iot_cleaning",
                          "35": "audio_volume_down",
                          "36": "play_radio",
                          "37": "cooking_query",
                          "38": "datetime_convert",
                          "39": "qa_maths",
                          "4": "qa_stock",
                          "40": "iot_hue_lightoff",
                          "41": "iot_hue_lighton",
                          "42": "transport_query",
                          "43": "music_likeness",
                          "44": "email_query",
                          "45": "play_music",
                          "46": "audio_volume_mute",
                          "47": "social_post",
                          "48": "alarm_set",
                          "49": "qa_factoid",
                          "5": "general_greet",
                          "50": "calendar_set",
                          "51": "play_game",
                          "52": "alarm_remove",
                          "53": "lists_remove",
                          "54": "transport_taxi",
                          "55": "recommendation_movies",
                          "56": "iot_coffee",
                          "57": "music_query",
                          "58": "play_podcasts",
                          "59": "lists_query",
                          "6": "recommendation_events",
                          "7": "music_dislikeness",
                          "8": "iot_wemo_off",
                          "9": "cooking_recipe"
                      }
                  },
                  "type": "map_instance_values"
              },
              {
                  "field_to_field": {
                      "intent": "label",
                      "utt": "text"
                  },
                  "type": "rename_fields"
              },
              {
                  "fields": {
                      "classes": [
                          "datetime_query",
                          "iot_hue_lightchange",
                          "transport_ticket",
                          "takeaway_query",
                          "qa_stock",
                          "general_greet",
                          "recommendation_events",
                          "music_dislikeness",
                          "iot_wemo_off",
                          "cooking_recipe",
                          "qa_currency",
                          "transport_traffic",
                          "general_quirky",
                          "weather_query",
                          "audio_volume_up",
                          "email_addcontact",
                          "takeaway_order",
                          "email_querycontact",
                          "iot_hue_lightup",
                          "recommendation_locations",
                          "play_audiobook",
                          "lists_createoradd",
                          "news_query",
                          "alarm_query",
                          "iot_wemo_on",
                          "general_joke",
                          "qa_definition",
                          "social_query",
                          "music_settings",
                          "audio_volume_other",
                          "calendar_remove",
                          "iot_hue_lightdim",
                          "calendar_query",
                          "email_sendemail",
                          "iot_cleaning",
                          "audio_volume_down",
                          "play_radio",
                          "cooking_query",
                          "datetime_convert",
                          "qa_maths",
                          "iot_hue_lightoff",
                          "iot_hue_lighton",
                          "transport_query",
                          "music_likeness",
                          "email_query",
                          "play_music",
                          "audio_volume_mute",
                          "social_post",
                          "alarm_set",
                          "qa_factoid",
                          "calendar_set",
                          "play_game",
                          "alarm_remove",
                          "lists_remove",
                          "transport_taxi",
                          "recommendation_movies",
                          "iot_coffee",
                          "music_query",
                          "play_podcasts",
                          "lists_query"
                      ],
                      "text_type": "sentence",
                      "type_of_class": "intent"
                  },
                  "type": "add_fields"
              }
          ],
          "task": "tasks.classification.multi_class",
          "templates": "templates.classification.multi_class.all",
          "type": "task_card"
      }

References: :ref:`tasks.classification.multi_class <tasks.classification.multi_class>`, :ref:`templates.classification.multi_class.all <templates.classification.multi_class.all>`

|
|



.. _cards.amazon_mass.af_ZA:

----------

af_ZA
"""""

.. note:: ID: ``cards.amazon_mass.af_ZA``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "af-ZA",
              "path": "AmazonScience/massive",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "mappers": {
                      "intent": {
                          "0": "datetime_query",
                          "1": "iot_hue_lightchange",
                          "10": "qa_currency",
                          "11": "transport_traffic",
                          "12": "general_quirky",
                          "13": "weather_query",
                          "14": "audio_volume_up",
                          "15": "email_addcontact",
                          "16": "takeaway_order",
                          "17": "email_querycontact",
                          "18": "iot_hue_lightup",
                          "19": "recommendation_locations",
                          "2": "transport_ticket",
                          "20": "play_audiobook",
                          "21": "lists_createoradd",
                          "22": "news_query",
                          "23": "alarm_query",
                          "24": "iot_wemo_on",
                          "25": "general_joke",
                          "26": "qa_definition",
                          "27": "social_query",
                          "28": "music_settings",
                          "29": "audio_volume_other",
                          "3": "takeaway_query",
                          "30": "calendar_remove",
                          "31": "iot_hue_lightdim",
                          "32": "calendar_query",
                          "33": "email_sendemail",
                          "34": "iot_cleaning",
                          "35": "audio_volume_down",
                          "36": "play_radio",
                          "37": "cooking_query",
                          "38": "datetime_convert",
                          "39": "qa_maths",
                          "4": "qa_stock",
                          "40": "iot_hue_lightoff",
                          "41": "iot_hue_lighton",
                          "42": "transport_query",
                          "43": "music_likeness",
                          "44": "email_query",
                          "45": "play_music",
                          "46": "audio_volume_mute",
                          "47": "social_post",
                          "48": "alarm_set",
                          "49": "qa_factoid",
                          "5": "general_greet",
                          "50": "calendar_set",
                          "51": "play_game",
                          "52": "alarm_remove",
                          "53": "lists_remove",
                          "54": "transport_taxi",
                          "55": "recommendation_movies",
                          "56": "iot_coffee",
                          "57": "music_query",
                          "58": "play_podcasts",
                          "59": "lists_query",
                          "6": "recommendation_events",
                          "7": "music_dislikeness",
                          "8": "iot_wemo_off",
                          "9": "cooking_recipe"
                      }
                  },
                  "type": "map_instance_values"
              },
              {
                  "field_to_field": {
                      "intent": "label",
                      "utt": "text"
                  },
                  "type": "rename_fields"
              },
              {
                  "fields": {
                      "classes": [
                          "datetime_query",
                          "iot_hue_lightchange",
                          "transport_ticket",
                          "takeaway_query",
                          "qa_stock",
                          "general_greet",
                          "recommendation_events",
                          "music_dislikeness",
                          "iot_wemo_off",
                          "cooking_recipe",
                          "qa_currency",
                          "transport_traffic",
                          "general_quirky",
                          "weather_query",
                          "audio_volume_up",
                          "email_addcontact",
                          "takeaway_order",
                          "email_querycontact",
                          "iot_hue_lightup",
                          "recommendation_locations",
                          "play_audiobook",
                          "lists_createoradd",
                          "news_query",
                          "alarm_query",
                          "iot_wemo_on",
                          "general_joke",
                          "qa_definition",
                          "social_query",
                          "music_settings",
                          "audio_volume_other",
                          "calendar_remove",
                          "iot_hue_lightdim",
                          "calendar_query",
                          "email_sendemail",
                          "iot_cleaning",
                          "audio_volume_down",
                          "play_radio",
                          "cooking_query",
                          "datetime_convert",
                          "qa_maths",
                          "iot_hue_lightoff",
                          "iot_hue_lighton",
                          "transport_query",
                          "music_likeness",
                          "email_query",
                          "play_music",
                          "audio_volume_mute",
                          "social_post",
                          "alarm_set",
                          "qa_factoid",
                          "calendar_set",
                          "play_game",
                          "alarm_remove",
                          "lists_remove",
                          "transport_taxi",
                          "recommendation_movies",
                          "iot_coffee",
                          "music_query",
                          "play_podcasts",
                          "lists_query"
                      ],
                      "text_type": "sentence",
                      "type_of_class": "intent"
                  },
                  "type": "add_fields"
              }
          ],
          "task": "tasks.classification.multi_class",
          "templates": "templates.classification.multi_class.all",
          "type": "task_card"
      }

References: :ref:`tasks.classification.multi_class <tasks.classification.multi_class>`, :ref:`templates.classification.multi_class.all <templates.classification.multi_class.all>`

|
|



.. _.cards.amazon_mass.all_1:

----------

all_1
"""""



.. _cards.amazon_mass.all_1.1:

----------

1
'

.. note:: ID: ``cards.amazon_mass.all_1.1``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "all_1.1",
              "path": "AmazonScience/massive",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "mappers": {
                      "intent": {
                          "0": "datetime_query",
                          "1": "iot_hue_lightchange",
                          "10": "qa_currency",
                          "11": "transport_traffic",
                          "12": "general_quirky",
                          "13": "weather_query",
                          "14": "audio_volume_up",
                          "15": "email_addcontact",
                          "16": "takeaway_order",
                          "17": "email_querycontact",
                          "18": "iot_hue_lightup",
                          "19": "recommendation_locations",
                          "2": "transport_ticket",
                          "20": "play_audiobook",
                          "21": "lists_createoradd",
                          "22": "news_query",
                          "23": "alarm_query",
                          "24": "iot_wemo_on",
                          "25": "general_joke",
                          "26": "qa_definition",
                          "27": "social_query",
                          "28": "music_settings",
                          "29": "audio_volume_other",
                          "3": "takeaway_query",
                          "30": "calendar_remove",
                          "31": "iot_hue_lightdim",
                          "32": "calendar_query",
                          "33": "email_sendemail",
                          "34": "iot_cleaning",
                          "35": "audio_volume_down",
                          "36": "play_radio",
                          "37": "cooking_query",
                          "38": "datetime_convert",
                          "39": "qa_maths",
                          "4": "qa_stock",
                          "40": "iot_hue_lightoff",
                          "41": "iot_hue_lighton",
                          "42": "transport_query",
                          "43": "music_likeness",
                          "44": "email_query",
                          "45": "play_music",
                          "46": "audio_volume_mute",
                          "47": "social_post",
                          "48": "alarm_set",
                          "49": "qa_factoid",
                          "5": "general_greet",
                          "50": "calendar_set",
                          "51": "play_game",
                          "52": "alarm_remove",
                          "53": "lists_remove",
                          "54": "transport_taxi",
                          "55": "recommendation_movies",
                          "56": "iot_coffee",
                          "57": "music_query",
                          "58": "play_podcasts",
                          "59": "lists_query",
                          "6": "recommendation_events",
                          "7": "music_dislikeness",
                          "8": "iot_wemo_off",
                          "9": "cooking_recipe"
                      }
                  },
                  "type": "map_instance_values"
              },
              {
                  "field_to_field": {
                      "intent": "label",
                      "utt": "text"
                  },
                  "type": "rename_fields"
              },
              {
                  "fields": {
                      "classes": [
                          "datetime_query",
                          "iot_hue_lightchange",
                          "transport_ticket",
                          "takeaway_query",
                          "qa_stock",
                          "general_greet",
                          "recommendation_events",
                          "music_dislikeness",
                          "iot_wemo_off",
                          "cooking_recipe",
                          "qa_currency",
                          "transport_traffic",
                          "general_quirky",
                          "weather_query",
                          "audio_volume_up",
                          "email_addcontact",
                          "takeaway_order",
                          "email_querycontact",
                          "iot_hue_lightup",
                          "recommendation_locations",
                          "play_audiobook",
                          "lists_createoradd",
                          "news_query",
                          "alarm_query",
                          "iot_wemo_on",
                          "general_joke",
                          "qa_definition",
                          "social_query",
                          "music_settings",
                          "audio_volume_other",
                          "calendar_remove",
                          "iot_hue_lightdim",
                          "calendar_query",
                          "email_sendemail",
                          "iot_cleaning",
                          "audio_volume_down",
                          "play_radio",
                          "cooking_query",
                          "datetime_convert",
                          "qa_maths",
                          "iot_hue_lightoff",
                          "iot_hue_lighton",
                          "transport_query",
                          "music_likeness",
                          "email_query",
                          "play_music",
                          "audio_volume_mute",
                          "social_post",
                          "alarm_set",
                          "qa_factoid",
                          "calendar_set",
                          "play_game",
                          "alarm_remove",
                          "lists_remove",
                          "transport_taxi",
                          "recommendation_movies",
                          "iot_coffee",
                          "music_query",
                          "play_podcasts",
                          "lists_query"
                      ],
                      "text_type": "sentence",
                      "type_of_class": "intent"
                  },
                  "type": "add_fields"
              }
          ],
          "task": "tasks.classification.multi_class",
          "templates": "templates.classification.multi_class.all",
          "type": "task_card"
      }

References: :ref:`tasks.classification.multi_class <tasks.classification.multi_class>`, :ref:`templates.classification.multi_class.all <templates.classification.multi_class.all>`

|
|



.. _cards.amazon_mass.te_IN:

----------

te_IN
"""""

.. note:: ID: ``cards.amazon_mass.te_IN``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "te-IN",
              "path": "AmazonScience/massive",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "mappers": {
                      "intent": {
                          "0": "datetime_query",
                          "1": "iot_hue_lightchange",
                          "10": "qa_currency",
                          "11": "transport_traffic",
                          "12": "general_quirky",
                          "13": "weather_query",
                          "14": "audio_volume_up",
                          "15": "email_addcontact",
                          "16": "takeaway_order",
                          "17": "email_querycontact",
                          "18": "iot_hue_lightup",
                          "19": "recommendation_locations",
                          "2": "transport_ticket",
                          "20": "play_audiobook",
                          "21": "lists_createoradd",
                          "22": "news_query",
                          "23": "alarm_query",
                          "24": "iot_wemo_on",
                          "25": "general_joke",
                          "26": "qa_definition",
                          "27": "social_query",
                          "28": "music_settings",
                          "29": "audio_volume_other",
                          "3": "takeaway_query",
                          "30": "calendar_remove",
                          "31": "iot_hue_lightdim",
                          "32": "calendar_query",
                          "33": "email_sendemail",
                          "34": "iot_cleaning",
                          "35": "audio_volume_down",
                          "36": "play_radio",
                          "37": "cooking_query",
                          "38": "datetime_convert",
                          "39": "qa_maths",
                          "4": "qa_stock",
                          "40": "iot_hue_lightoff",
                          "41": "iot_hue_lighton",
                          "42": "transport_query",
                          "43": "music_likeness",
                          "44": "email_query",
                          "45": "play_music",
                          "46": "audio_volume_mute",
                          "47": "social_post",
                          "48": "alarm_set",
                          "49": "qa_factoid",
                          "5": "general_greet",
                          "50": "calendar_set",
                          "51": "play_game",
                          "52": "alarm_remove",
                          "53": "lists_remove",
                          "54": "transport_taxi",
                          "55": "recommendation_movies",
                          "56": "iot_coffee",
                          "57": "music_query",
                          "58": "play_podcasts",
                          "59": "lists_query",
                          "6": "recommendation_events",
                          "7": "music_dislikeness",
                          "8": "iot_wemo_off",
                          "9": "cooking_recipe"
                      }
                  },
                  "type": "map_instance_values"
              },
              {
                  "field_to_field": {
                      "intent": "label",
                      "utt": "text"
                  },
                  "type": "rename_fields"
              },
              {
                  "fields": {
                      "classes": [
                          "datetime_query",
                          "iot_hue_lightchange",
                          "transport_ticket",
                          "takeaway_query",
                          "qa_stock",
                          "general_greet",
                          "recommendation_events",
                          "music_dislikeness",
                          "iot_wemo_off",
                          "cooking_recipe",
                          "qa_currency",
                          "transport_traffic",
                          "general_quirky",
                          "weather_query",
                          "audio_volume_up",
                          "email_addcontact",
                          "takeaway_order",
                          "email_querycontact",
                          "iot_hue_lightup",
                          "recommendation_locations",
                          "play_audiobook",
                          "lists_createoradd",
                          "news_query",
                          "alarm_query",
                          "iot_wemo_on",
                          "general_joke",
                          "qa_definition",
                          "social_query",
                          "music_settings",
                          "audio_volume_other",
                          "calendar_remove",
                          "iot_hue_lightdim",
                          "calendar_query",
                          "email_sendemail",
                          "iot_cleaning",
                          "audio_volume_down",
                          "play_radio",
                          "cooking_query",
                          "datetime_convert",
                          "qa_maths",
                          "iot_hue_lightoff",
                          "iot_hue_lighton",
                          "transport_query",
                          "music_likeness",
                          "email_query",
                          "play_music",
                          "audio_volume_mute",
                          "social_post",
                          "alarm_set",
                          "qa_factoid",
                          "calendar_set",
                          "play_game",
                          "alarm_remove",
                          "lists_remove",
                          "transport_taxi",
                          "recommendation_movies",
                          "iot_coffee",
                          "music_query",
                          "play_podcasts",
                          "lists_query"
                      ],
                      "text_type": "sentence",
                      "type_of_class": "intent"
                  },
                  "type": "add_fields"
              }
          ],
          "task": "tasks.classification.multi_class",
          "templates": "templates.classification.multi_class.all",
          "type": "task_card"
      }

References: :ref:`tasks.classification.multi_class <tasks.classification.multi_class>`, :ref:`templates.classification.multi_class.all <templates.classification.multi_class.all>`

|
|



.. _cards.amazon_mass.de_DE:

----------

de_DE
"""""

.. note:: ID: ``cards.amazon_mass.de_DE``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "de-DE",
              "path": "AmazonScience/massive",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "mappers": {
                      "intent": {
                          "0": "datetime_query",
                          "1": "iot_hue_lightchange",
                          "10": "qa_currency",
                          "11": "transport_traffic",
                          "12": "general_quirky",
                          "13": "weather_query",
                          "14": "audio_volume_up",
                          "15": "email_addcontact",
                          "16": "takeaway_order",
                          "17": "email_querycontact",
                          "18": "iot_hue_lightup",
                          "19": "recommendation_locations",
                          "2": "transport_ticket",
                          "20": "play_audiobook",
                          "21": "lists_createoradd",
                          "22": "news_query",
                          "23": "alarm_query",
                          "24": "iot_wemo_on",
                          "25": "general_joke",
                          "26": "qa_definition",
                          "27": "social_query",
                          "28": "music_settings",
                          "29": "audio_volume_other",
                          "3": "takeaway_query",
                          "30": "calendar_remove",
                          "31": "iot_hue_lightdim",
                          "32": "calendar_query",
                          "33": "email_sendemail",
                          "34": "iot_cleaning",
                          "35": "audio_volume_down",
                          "36": "play_radio",
                          "37": "cooking_query",
                          "38": "datetime_convert",
                          "39": "qa_maths",
                          "4": "qa_stock",
                          "40": "iot_hue_lightoff",
                          "41": "iot_hue_lighton",
                          "42": "transport_query",
                          "43": "music_likeness",
                          "44": "email_query",
                          "45": "play_music",
                          "46": "audio_volume_mute",
                          "47": "social_post",
                          "48": "alarm_set",
                          "49": "qa_factoid",
                          "5": "general_greet",
                          "50": "calendar_set",
                          "51": "play_game",
                          "52": "alarm_remove",
                          "53": "lists_remove",
                          "54": "transport_taxi",
                          "55": "recommendation_movies",
                          "56": "iot_coffee",
                          "57": "music_query",
                          "58": "play_podcasts",
                          "59": "lists_query",
                          "6": "recommendation_events",
                          "7": "music_dislikeness",
                          "8": "iot_wemo_off",
                          "9": "cooking_recipe"
                      }
                  },
                  "type": "map_instance_values"
              },
              {
                  "field_to_field": {
                      "intent": "label",
                      "utt": "text"
                  },
                  "type": "rename_fields"
              },
              {
                  "fields": {
                      "classes": [
                          "datetime_query",
                          "iot_hue_lightchange",
                          "transport_ticket",
                          "takeaway_query",
                          "qa_stock",
                          "general_greet",
                          "recommendation_events",
                          "music_dislikeness",
                          "iot_wemo_off",
                          "cooking_recipe",
                          "qa_currency",
                          "transport_traffic",
                          "general_quirky",
                          "weather_query",
                          "audio_volume_up",
                          "email_addcontact",
                          "takeaway_order",
                          "email_querycontact",
                          "iot_hue_lightup",
                          "recommendation_locations",
                          "play_audiobook",
                          "lists_createoradd",
                          "news_query",
                          "alarm_query",
                          "iot_wemo_on",
                          "general_joke",
                          "qa_definition",
                          "social_query",
                          "music_settings",
                          "audio_volume_other",
                          "calendar_remove",
                          "iot_hue_lightdim",
                          "calendar_query",
                          "email_sendemail",
                          "iot_cleaning",
                          "audio_volume_down",
                          "play_radio",
                          "cooking_query",
                          "datetime_convert",
                          "qa_maths",
                          "iot_hue_lightoff",
                          "iot_hue_lighton",
                          "transport_query",
                          "music_likeness",
                          "email_query",
                          "play_music",
                          "audio_volume_mute",
                          "social_post",
                          "alarm_set",
                          "qa_factoid",
                          "calendar_set",
                          "play_game",
                          "alarm_remove",
                          "lists_remove",
                          "transport_taxi",
                          "recommendation_movies",
                          "iot_coffee",
                          "music_query",
                          "play_podcasts",
                          "lists_query"
                      ],
                      "text_type": "sentence",
                      "type_of_class": "intent"
                  },
                  "type": "add_fields"
              }
          ],
          "task": "tasks.classification.multi_class",
          "templates": "templates.classification.multi_class.all",
          "type": "task_card"
      }

References: :ref:`tasks.classification.multi_class <tasks.classification.multi_class>`, :ref:`templates.classification.multi_class.all <templates.classification.multi_class.all>`

|
|



.. _cards.amazon_mass.fa_IR:

----------

fa_IR
"""""

.. note:: ID: ``cards.amazon_mass.fa_IR``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "fa-IR",
              "path": "AmazonScience/massive",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "mappers": {
                      "intent": {
                          "0": "datetime_query",
                          "1": "iot_hue_lightchange",
                          "10": "qa_currency",
                          "11": "transport_traffic",
                          "12": "general_quirky",
                          "13": "weather_query",
                          "14": "audio_volume_up",
                          "15": "email_addcontact",
                          "16": "takeaway_order",
                          "17": "email_querycontact",
                          "18": "iot_hue_lightup",
                          "19": "recommendation_locations",
                          "2": "transport_ticket",
                          "20": "play_audiobook",
                          "21": "lists_createoradd",
                          "22": "news_query",
                          "23": "alarm_query",
                          "24": "iot_wemo_on",
                          "25": "general_joke",
                          "26": "qa_definition",
                          "27": "social_query",
                          "28": "music_settings",
                          "29": "audio_volume_other",
                          "3": "takeaway_query",
                          "30": "calendar_remove",
                          "31": "iot_hue_lightdim",
                          "32": "calendar_query",
                          "33": "email_sendemail",
                          "34": "iot_cleaning",
                          "35": "audio_volume_down",
                          "36": "play_radio",
                          "37": "cooking_query",
                          "38": "datetime_convert",
                          "39": "qa_maths",
                          "4": "qa_stock",
                          "40": "iot_hue_lightoff",
                          "41": "iot_hue_lighton",
                          "42": "transport_query",
                          "43": "music_likeness",
                          "44": "email_query",
                          "45": "play_music",
                          "46": "audio_volume_mute",
                          "47": "social_post",
                          "48": "alarm_set",
                          "49": "qa_factoid",
                          "5": "general_greet",
                          "50": "calendar_set",
                          "51": "play_game",
                          "52": "alarm_remove",
                          "53": "lists_remove",
                          "54": "transport_taxi",
                          "55": "recommendation_movies",
                          "56": "iot_coffee",
                          "57": "music_query",
                          "58": "play_podcasts",
                          "59": "lists_query",
                          "6": "recommendation_events",
                          "7": "music_dislikeness",
                          "8": "iot_wemo_off",
                          "9": "cooking_recipe"
                      }
                  },
                  "type": "map_instance_values"
              },
              {
                  "field_to_field": {
                      "intent": "label",
                      "utt": "text"
                  },
                  "type": "rename_fields"
              },
              {
                  "fields": {
                      "classes": [
                          "datetime_query",
                          "iot_hue_lightchange",
                          "transport_ticket",
                          "takeaway_query",
                          "qa_stock",
                          "general_greet",
                          "recommendation_events",
                          "music_dislikeness",
                          "iot_wemo_off",
                          "cooking_recipe",
                          "qa_currency",
                          "transport_traffic",
                          "general_quirky",
                          "weather_query",
                          "audio_volume_up",
                          "email_addcontact",
                          "takeaway_order",
                          "email_querycontact",
                          "iot_hue_lightup",
                          "recommendation_locations",
                          "play_audiobook",
                          "lists_createoradd",
                          "news_query",
                          "alarm_query",
                          "iot_wemo_on",
                          "general_joke",
                          "qa_definition",
                          "social_query",
                          "music_settings",
                          "audio_volume_other",
                          "calendar_remove",
                          "iot_hue_lightdim",
                          "calendar_query",
                          "email_sendemail",
                          "iot_cleaning",
                          "audio_volume_down",
                          "play_radio",
                          "cooking_query",
                          "datetime_convert",
                          "qa_maths",
                          "iot_hue_lightoff",
                          "iot_hue_lighton",
                          "transport_query",
                          "music_likeness",
                          "email_query",
                          "play_music",
                          "audio_volume_mute",
                          "social_post",
                          "alarm_set",
                          "qa_factoid",
                          "calendar_set",
                          "play_game",
                          "alarm_remove",
                          "lists_remove",
                          "transport_taxi",
                          "recommendation_movies",
                          "iot_coffee",
                          "music_query",
                          "play_podcasts",
                          "lists_query"
                      ],
                      "text_type": "sentence",
                      "type_of_class": "intent"
                  },
                  "type": "add_fields"
              }
          ],
          "task": "tasks.classification.multi_class",
          "templates": "templates.classification.multi_class.all",
          "type": "task_card"
      }

References: :ref:`tasks.classification.multi_class <tasks.classification.multi_class>`, :ref:`templates.classification.multi_class.all <templates.classification.multi_class.all>`

|
|



.. _cards.amazon_mass.tr_TR:

----------

tr_TR
"""""

.. note:: ID: ``cards.amazon_mass.tr_TR``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "tr-TR",
              "path": "AmazonScience/massive",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "mappers": {
                      "intent": {
                          "0": "datetime_query",
                          "1": "iot_hue_lightchange",
                          "10": "qa_currency",
                          "11": "transport_traffic",
                          "12": "general_quirky",
                          "13": "weather_query",
                          "14": "audio_volume_up",
                          "15": "email_addcontact",
                          "16": "takeaway_order",
                          "17": "email_querycontact",
                          "18": "iot_hue_lightup",
                          "19": "recommendation_locations",
                          "2": "transport_ticket",
                          "20": "play_audiobook",
                          "21": "lists_createoradd",
                          "22": "news_query",
                          "23": "alarm_query",
                          "24": "iot_wemo_on",
                          "25": "general_joke",
                          "26": "qa_definition",
                          "27": "social_query",
                          "28": "music_settings",
                          "29": "audio_volume_other",
                          "3": "takeaway_query",
                          "30": "calendar_remove",
                          "31": "iot_hue_lightdim",
                          "32": "calendar_query",
                          "33": "email_sendemail",
                          "34": "iot_cleaning",
                          "35": "audio_volume_down",
                          "36": "play_radio",
                          "37": "cooking_query",
                          "38": "datetime_convert",
                          "39": "qa_maths",
                          "4": "qa_stock",
                          "40": "iot_hue_lightoff",
                          "41": "iot_hue_lighton",
                          "42": "transport_query",
                          "43": "music_likeness",
                          "44": "email_query",
                          "45": "play_music",
                          "46": "audio_volume_mute",
                          "47": "social_post",
                          "48": "alarm_set",
                          "49": "qa_factoid",
                          "5": "general_greet",
                          "50": "calendar_set",
                          "51": "play_game",
                          "52": "alarm_remove",
                          "53": "lists_remove",
                          "54": "transport_taxi",
                          "55": "recommendation_movies",
                          "56": "iot_coffee",
                          "57": "music_query",
                          "58": "play_podcasts",
                          "59": "lists_query",
                          "6": "recommendation_events",
                          "7": "music_dislikeness",
                          "8": "iot_wemo_off",
                          "9": "cooking_recipe"
                      }
                  },
                  "type": "map_instance_values"
              },
              {
                  "field_to_field": {
                      "intent": "label",
                      "utt": "text"
                  },
                  "type": "rename_fields"
              },
              {
                  "fields": {
                      "classes": [
                          "datetime_query",
                          "iot_hue_lightchange",
                          "transport_ticket",
                          "takeaway_query",
                          "qa_stock",
                          "general_greet",
                          "recommendation_events",
                          "music_dislikeness",
                          "iot_wemo_off",
                          "cooking_recipe",
                          "qa_currency",
                          "transport_traffic",
                          "general_quirky",
                          "weather_query",
                          "audio_volume_up",
                          "email_addcontact",
                          "takeaway_order",
                          "email_querycontact",
                          "iot_hue_lightup",
                          "recommendation_locations",
                          "play_audiobook",
                          "lists_createoradd",
                          "news_query",
                          "alarm_query",
                          "iot_wemo_on",
                          "general_joke",
                          "qa_definition",
                          "social_query",
                          "music_settings",
                          "audio_volume_other",
                          "calendar_remove",
                          "iot_hue_lightdim",
                          "calendar_query",
                          "email_sendemail",
                          "iot_cleaning",
                          "audio_volume_down",
                          "play_radio",
                          "cooking_query",
                          "datetime_convert",
                          "qa_maths",
                          "iot_hue_lightoff",
                          "iot_hue_lighton",
                          "transport_query",
                          "music_likeness",
                          "email_query",
                          "play_music",
                          "audio_volume_mute",
                          "social_post",
                          "alarm_set",
                          "qa_factoid",
                          "calendar_set",
                          "play_game",
                          "alarm_remove",
                          "lists_remove",
                          "transport_taxi",
                          "recommendation_movies",
                          "iot_coffee",
                          "music_query",
                          "play_podcasts",
                          "lists_query"
                      ],
                      "text_type": "sentence",
                      "type_of_class": "intent"
                  },
                  "type": "add_fields"
              }
          ],
          "task": "tasks.classification.multi_class",
          "templates": "templates.classification.multi_class.all",
          "type": "task_card"
      }

References: :ref:`tasks.classification.multi_class <tasks.classification.multi_class>`, :ref:`templates.classification.multi_class.all <templates.classification.multi_class.all>`

|
|



.. _cards.amazon_mass.es_ES:

----------

es_ES
"""""

.. note:: ID: ``cards.amazon_mass.es_ES``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "es-ES",
              "path": "AmazonScience/massive",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "mappers": {
                      "intent": {
                          "0": "datetime_query",
                          "1": "iot_hue_lightchange",
                          "10": "qa_currency",
                          "11": "transport_traffic",
                          "12": "general_quirky",
                          "13": "weather_query",
                          "14": "audio_volume_up",
                          "15": "email_addcontact",
                          "16": "takeaway_order",
                          "17": "email_querycontact",
                          "18": "iot_hue_lightup",
                          "19": "recommendation_locations",
                          "2": "transport_ticket",
                          "20": "play_audiobook",
                          "21": "lists_createoradd",
                          "22": "news_query",
                          "23": "alarm_query",
                          "24": "iot_wemo_on",
                          "25": "general_joke",
                          "26": "qa_definition",
                          "27": "social_query",
                          "28": "music_settings",
                          "29": "audio_volume_other",
                          "3": "takeaway_query",
                          "30": "calendar_remove",
                          "31": "iot_hue_lightdim",
                          "32": "calendar_query",
                          "33": "email_sendemail",
                          "34": "iot_cleaning",
                          "35": "audio_volume_down",
                          "36": "play_radio",
                          "37": "cooking_query",
                          "38": "datetime_convert",
                          "39": "qa_maths",
                          "4": "qa_stock",
                          "40": "iot_hue_lightoff",
                          "41": "iot_hue_lighton",
                          "42": "transport_query",
                          "43": "music_likeness",
                          "44": "email_query",
                          "45": "play_music",
                          "46": "audio_volume_mute",
                          "47": "social_post",
                          "48": "alarm_set",
                          "49": "qa_factoid",
                          "5": "general_greet",
                          "50": "calendar_set",
                          "51": "play_game",
                          "52": "alarm_remove",
                          "53": "lists_remove",
                          "54": "transport_taxi",
                          "55": "recommendation_movies",
                          "56": "iot_coffee",
                          "57": "music_query",
                          "58": "play_podcasts",
                          "59": "lists_query",
                          "6": "recommendation_events",
                          "7": "music_dislikeness",
                          "8": "iot_wemo_off",
                          "9": "cooking_recipe"
                      }
                  },
                  "type": "map_instance_values"
              },
              {
                  "field_to_field": {
                      "intent": "label",
                      "utt": "text"
                  },
                  "type": "rename_fields"
              },
              {
                  "fields": {
                      "classes": [
                          "datetime_query",
                          "iot_hue_lightchange",
                          "transport_ticket",
                          "takeaway_query",
                          "qa_stock",
                          "general_greet",
                          "recommendation_events",
                          "music_dislikeness",
                          "iot_wemo_off",
                          "cooking_recipe",
                          "qa_currency",
                          "transport_traffic",
                          "general_quirky",
                          "weather_query",
                          "audio_volume_up",
                          "email_addcontact",
                          "takeaway_order",
                          "email_querycontact",
                          "iot_hue_lightup",
                          "recommendation_locations",
                          "play_audiobook",
                          "lists_createoradd",
                          "news_query",
                          "alarm_query",
                          "iot_wemo_on",
                          "general_joke",
                          "qa_definition",
                          "social_query",
                          "music_settings",
                          "audio_volume_other",
                          "calendar_remove",
                          "iot_hue_lightdim",
                          "calendar_query",
                          "email_sendemail",
                          "iot_cleaning",
                          "audio_volume_down",
                          "play_radio",
                          "cooking_query",
                          "datetime_convert",
                          "qa_maths",
                          "iot_hue_lightoff",
                          "iot_hue_lighton",
                          "transport_query",
                          "music_likeness",
                          "email_query",
                          "play_music",
                          "audio_volume_mute",
                          "social_post",
                          "alarm_set",
                          "qa_factoid",
                          "calendar_set",
                          "play_game",
                          "alarm_remove",
                          "lists_remove",
                          "transport_taxi",
                          "recommendation_movies",
                          "iot_coffee",
                          "music_query",
                          "play_podcasts",
                          "lists_query"
                      ],
                      "text_type": "sentence",
                      "type_of_class": "intent"
                  },
                  "type": "add_fields"
              }
          ],
          "task": "tasks.classification.multi_class",
          "templates": "templates.classification.multi_class.all",
          "type": "task_card"
      }

References: :ref:`tasks.classification.multi_class <tasks.classification.multi_class>`, :ref:`templates.classification.multi_class.all <templates.classification.multi_class.all>`

|
|



.. _cards.amazon_mass.ta_IN:

----------

ta_IN
"""""

.. note:: ID: ``cards.amazon_mass.ta_IN``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "ta-IN",
              "path": "AmazonScience/massive",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "mappers": {
                      "intent": {
                          "0": "datetime_query",
                          "1": "iot_hue_lightchange",
                          "10": "qa_currency",
                          "11": "transport_traffic",
                          "12": "general_quirky",
                          "13": "weather_query",
                          "14": "audio_volume_up",
                          "15": "email_addcontact",
                          "16": "takeaway_order",
                          "17": "email_querycontact",
                          "18": "iot_hue_lightup",
                          "19": "recommendation_locations",
                          "2": "transport_ticket",
                          "20": "play_audiobook",
                          "21": "lists_createoradd",
                          "22": "news_query",
                          "23": "alarm_query",
                          "24": "iot_wemo_on",
                          "25": "general_joke",
                          "26": "qa_definition",
                          "27": "social_query",
                          "28": "music_settings",
                          "29": "audio_volume_other",
                          "3": "takeaway_query",
                          "30": "calendar_remove",
                          "31": "iot_hue_lightdim",
                          "32": "calendar_query",
                          "33": "email_sendemail",
                          "34": "iot_cleaning",
                          "35": "audio_volume_down",
                          "36": "play_radio",
                          "37": "cooking_query",
                          "38": "datetime_convert",
                          "39": "qa_maths",
                          "4": "qa_stock",
                          "40": "iot_hue_lightoff",
                          "41": "iot_hue_lighton",
                          "42": "transport_query",
                          "43": "music_likeness",
                          "44": "email_query",
                          "45": "play_music",
                          "46": "audio_volume_mute",
                          "47": "social_post",
                          "48": "alarm_set",
                          "49": "qa_factoid",
                          "5": "general_greet",
                          "50": "calendar_set",
                          "51": "play_game",
                          "52": "alarm_remove",
                          "53": "lists_remove",
                          "54": "transport_taxi",
                          "55": "recommendation_movies",
                          "56": "iot_coffee",
                          "57": "music_query",
                          "58": "play_podcasts",
                          "59": "lists_query",
                          "6": "recommendation_events",
                          "7": "music_dislikeness",
                          "8": "iot_wemo_off",
                          "9": "cooking_recipe"
                      }
                  },
                  "type": "map_instance_values"
              },
              {
                  "field_to_field": {
                      "intent": "label",
                      "utt": "text"
                  },
                  "type": "rename_fields"
              },
              {
                  "fields": {
                      "classes": [
                          "datetime_query",
                          "iot_hue_lightchange",
                          "transport_ticket",
                          "takeaway_query",
                          "qa_stock",
                          "general_greet",
                          "recommendation_events",
                          "music_dislikeness",
                          "iot_wemo_off",
                          "cooking_recipe",
                          "qa_currency",
                          "transport_traffic",
                          "general_quirky",
                          "weather_query",
                          "audio_volume_up",
                          "email_addcontact",
                          "takeaway_order",
                          "email_querycontact",
                          "iot_hue_lightup",
                          "recommendation_locations",
                          "play_audiobook",
                          "lists_createoradd",
                          "news_query",
                          "alarm_query",
                          "iot_wemo_on",
                          "general_joke",
                          "qa_definition",
                          "social_query",
                          "music_settings",
                          "audio_volume_other",
                          "calendar_remove",
                          "iot_hue_lightdim",
                          "calendar_query",
                          "email_sendemail",
                          "iot_cleaning",
                          "audio_volume_down",
                          "play_radio",
                          "cooking_query",
                          "datetime_convert",
                          "qa_maths",
                          "iot_hue_lightoff",
                          "iot_hue_lighton",
                          "transport_query",
                          "music_likeness",
                          "email_query",
                          "play_music",
                          "audio_volume_mute",
                          "social_post",
                          "alarm_set",
                          "qa_factoid",
                          "calendar_set",
                          "play_game",
                          "alarm_remove",
                          "lists_remove",
                          "transport_taxi",
                          "recommendation_movies",
                          "iot_coffee",
                          "music_query",
                          "play_podcasts",
                          "lists_query"
                      ],
                      "text_type": "sentence",
                      "type_of_class": "intent"
                  },
                  "type": "add_fields"
              }
          ],
          "task": "tasks.classification.multi_class",
          "templates": "templates.classification.multi_class.all",
          "type": "task_card"
      }

References: :ref:`tasks.classification.multi_class <tasks.classification.multi_class>`, :ref:`templates.classification.multi_class.all <templates.classification.multi_class.all>`

|
|



.. _cards.amazon_mass.lv_LV:

----------

lv_LV
"""""

.. note:: ID: ``cards.amazon_mass.lv_LV``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "lv-LV",
              "path": "AmazonScience/massive",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "mappers": {
                      "intent": {
                          "0": "datetime_query",
                          "1": "iot_hue_lightchange",
                          "10": "qa_currency",
                          "11": "transport_traffic",
                          "12": "general_quirky",
                          "13": "weather_query",
                          "14": "audio_volume_up",
                          "15": "email_addcontact",
                          "16": "takeaway_order",
                          "17": "email_querycontact",
                          "18": "iot_hue_lightup",
                          "19": "recommendation_locations",
                          "2": "transport_ticket",
                          "20": "play_audiobook",
                          "21": "lists_createoradd",
                          "22": "news_query",
                          "23": "alarm_query",
                          "24": "iot_wemo_on",
                          "25": "general_joke",
                          "26": "qa_definition",
                          "27": "social_query",
                          "28": "music_settings",
                          "29": "audio_volume_other",
                          "3": "takeaway_query",
                          "30": "calendar_remove",
                          "31": "iot_hue_lightdim",
                          "32": "calendar_query",
                          "33": "email_sendemail",
                          "34": "iot_cleaning",
                          "35": "audio_volume_down",
                          "36": "play_radio",
                          "37": "cooking_query",
                          "38": "datetime_convert",
                          "39": "qa_maths",
                          "4": "qa_stock",
                          "40": "iot_hue_lightoff",
                          "41": "iot_hue_lighton",
                          "42": "transport_query",
                          "43": "music_likeness",
                          "44": "email_query",
                          "45": "play_music",
                          "46": "audio_volume_mute",
                          "47": "social_post",
                          "48": "alarm_set",
                          "49": "qa_factoid",
                          "5": "general_greet",
                          "50": "calendar_set",
                          "51": "play_game",
                          "52": "alarm_remove",
                          "53": "lists_remove",
                          "54": "transport_taxi",
                          "55": "recommendation_movies",
                          "56": "iot_coffee",
                          "57": "music_query",
                          "58": "play_podcasts",
                          "59": "lists_query",
                          "6": "recommendation_events",
                          "7": "music_dislikeness",
                          "8": "iot_wemo_off",
                          "9": "cooking_recipe"
                      }
                  },
                  "type": "map_instance_values"
              },
              {
                  "field_to_field": {
                      "intent": "label",
                      "utt": "text"
                  },
                  "type": "rename_fields"
              },
              {
                  "fields": {
                      "classes": [
                          "datetime_query",
                          "iot_hue_lightchange",
                          "transport_ticket",
                          "takeaway_query",
                          "qa_stock",
                          "general_greet",
                          "recommendation_events",
                          "music_dislikeness",
                          "iot_wemo_off",
                          "cooking_recipe",
                          "qa_currency",
                          "transport_traffic",
                          "general_quirky",
                          "weather_query",
                          "audio_volume_up",
                          "email_addcontact",
                          "takeaway_order",
                          "email_querycontact",
                          "iot_hue_lightup",
                          "recommendation_locations",
                          "play_audiobook",
                          "lists_createoradd",
                          "news_query",
                          "alarm_query",
                          "iot_wemo_on",
                          "general_joke",
                          "qa_definition",
                          "social_query",
                          "music_settings",
                          "audio_volume_other",
                          "calendar_remove",
                          "iot_hue_lightdim",
                          "calendar_query",
                          "email_sendemail",
                          "iot_cleaning",
                          "audio_volume_down",
                          "play_radio",
                          "cooking_query",
                          "datetime_convert",
                          "qa_maths",
                          "iot_hue_lightoff",
                          "iot_hue_lighton",
                          "transport_query",
                          "music_likeness",
                          "email_query",
                          "play_music",
                          "audio_volume_mute",
                          "social_post",
                          "alarm_set",
                          "qa_factoid",
                          "calendar_set",
                          "play_game",
                          "alarm_remove",
                          "lists_remove",
                          "transport_taxi",
                          "recommendation_movies",
                          "iot_coffee",
                          "music_query",
                          "play_podcasts",
                          "lists_query"
                      ],
                      "text_type": "sentence",
                      "type_of_class": "intent"
                  },
                  "type": "add_fields"
              }
          ],
          "task": "tasks.classification.multi_class",
          "templates": "templates.classification.multi_class.all",
          "type": "task_card"
      }

References: :ref:`tasks.classification.multi_class <tasks.classification.multi_class>`, :ref:`templates.classification.multi_class.all <templates.classification.multi_class.all>`

|
|



.. _cards.amazon_mass.tl_PH:

----------

tl_PH
"""""

.. note:: ID: ``cards.amazon_mass.tl_PH``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "tl-PH",
              "path": "AmazonScience/massive",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "mappers": {
                      "intent": {
                          "0": "datetime_query",
                          "1": "iot_hue_lightchange",
                          "10": "qa_currency",
                          "11": "transport_traffic",
                          "12": "general_quirky",
                          "13": "weather_query",
                          "14": "audio_volume_up",
                          "15": "email_addcontact",
                          "16": "takeaway_order",
                          "17": "email_querycontact",
                          "18": "iot_hue_lightup",
                          "19": "recommendation_locations",
                          "2": "transport_ticket",
                          "20": "play_audiobook",
                          "21": "lists_createoradd",
                          "22": "news_query",
                          "23": "alarm_query",
                          "24": "iot_wemo_on",
                          "25": "general_joke",
                          "26": "qa_definition",
                          "27": "social_query",
                          "28": "music_settings",
                          "29": "audio_volume_other",
                          "3": "takeaway_query",
                          "30": "calendar_remove",
                          "31": "iot_hue_lightdim",
                          "32": "calendar_query",
                          "33": "email_sendemail",
                          "34": "iot_cleaning",
                          "35": "audio_volume_down",
                          "36": "play_radio",
                          "37": "cooking_query",
                          "38": "datetime_convert",
                          "39": "qa_maths",
                          "4": "qa_stock",
                          "40": "iot_hue_lightoff",
                          "41": "iot_hue_lighton",
                          "42": "transport_query",
                          "43": "music_likeness",
                          "44": "email_query",
                          "45": "play_music",
                          "46": "audio_volume_mute",
                          "47": "social_post",
                          "48": "alarm_set",
                          "49": "qa_factoid",
                          "5": "general_greet",
                          "50": "calendar_set",
                          "51": "play_game",
                          "52": "alarm_remove",
                          "53": "lists_remove",
                          "54": "transport_taxi",
                          "55": "recommendation_movies",
                          "56": "iot_coffee",
                          "57": "music_query",
                          "58": "play_podcasts",
                          "59": "lists_query",
                          "6": "recommendation_events",
                          "7": "music_dislikeness",
                          "8": "iot_wemo_off",
                          "9": "cooking_recipe"
                      }
                  },
                  "type": "map_instance_values"
              },
              {
                  "field_to_field": {
                      "intent": "label",
                      "utt": "text"
                  },
                  "type": "rename_fields"
              },
              {
                  "fields": {
                      "classes": [
                          "datetime_query",
                          "iot_hue_lightchange",
                          "transport_ticket",
                          "takeaway_query",
                          "qa_stock",
                          "general_greet",
                          "recommendation_events",
                          "music_dislikeness",
                          "iot_wemo_off",
                          "cooking_recipe",
                          "qa_currency",
                          "transport_traffic",
                          "general_quirky",
                          "weather_query",
                          "audio_volume_up",
                          "email_addcontact",
                          "takeaway_order",
                          "email_querycontact",
                          "iot_hue_lightup",
                          "recommendation_locations",
                          "play_audiobook",
                          "lists_createoradd",
                          "news_query",
                          "alarm_query",
                          "iot_wemo_on",
                          "general_joke",
                          "qa_definition",
                          "social_query",
                          "music_settings",
                          "audio_volume_other",
                          "calendar_remove",
                          "iot_hue_lightdim",
                          "calendar_query",
                          "email_sendemail",
                          "iot_cleaning",
                          "audio_volume_down",
                          "play_radio",
                          "cooking_query",
                          "datetime_convert",
                          "qa_maths",
                          "iot_hue_lightoff",
                          "iot_hue_lighton",
                          "transport_query",
                          "music_likeness",
                          "email_query",
                          "play_music",
                          "audio_volume_mute",
                          "social_post",
                          "alarm_set",
                          "qa_factoid",
                          "calendar_set",
                          "play_game",
                          "alarm_remove",
                          "lists_remove",
                          "transport_taxi",
                          "recommendation_movies",
                          "iot_coffee",
                          "music_query",
                          "play_podcasts",
                          "lists_query"
                      ],
                      "text_type": "sentence",
                      "type_of_class": "intent"
                  },
                  "type": "add_fields"
              }
          ],
          "task": "tasks.classification.multi_class",
          "templates": "templates.classification.multi_class.all",
          "type": "task_card"
      }

References: :ref:`tasks.classification.multi_class <tasks.classification.multi_class>`, :ref:`templates.classification.multi_class.all <templates.classification.multi_class.all>`

|
|



.. _cards.amazon_mass.hu_HU:

----------

hu_HU
"""""

.. note:: ID: ``cards.amazon_mass.hu_HU``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "hu-HU",
              "path": "AmazonScience/massive",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "mappers": {
                      "intent": {
                          "0": "datetime_query",
                          "1": "iot_hue_lightchange",
                          "10": "qa_currency",
                          "11": "transport_traffic",
                          "12": "general_quirky",
                          "13": "weather_query",
                          "14": "audio_volume_up",
                          "15": "email_addcontact",
                          "16": "takeaway_order",
                          "17": "email_querycontact",
                          "18": "iot_hue_lightup",
                          "19": "recommendation_locations",
                          "2": "transport_ticket",
                          "20": "play_audiobook",
                          "21": "lists_createoradd",
                          "22": "news_query",
                          "23": "alarm_query",
                          "24": "iot_wemo_on",
                          "25": "general_joke",
                          "26": "qa_definition",
                          "27": "social_query",
                          "28": "music_settings",
                          "29": "audio_volume_other",
                          "3": "takeaway_query",
                          "30": "calendar_remove",
                          "31": "iot_hue_lightdim",
                          "32": "calendar_query",
                          "33": "email_sendemail",
                          "34": "iot_cleaning",
                          "35": "audio_volume_down",
                          "36": "play_radio",
                          "37": "cooking_query",
                          "38": "datetime_convert",
                          "39": "qa_maths",
                          "4": "qa_stock",
                          "40": "iot_hue_lightoff",
                          "41": "iot_hue_lighton",
                          "42": "transport_query",
                          "43": "music_likeness",
                          "44": "email_query",
                          "45": "play_music",
                          "46": "audio_volume_mute",
                          "47": "social_post",
                          "48": "alarm_set",
                          "49": "qa_factoid",
                          "5": "general_greet",
                          "50": "calendar_set",
                          "51": "play_game",
                          "52": "alarm_remove",
                          "53": "lists_remove",
                          "54": "transport_taxi",
                          "55": "recommendation_movies",
                          "56": "iot_coffee",
                          "57": "music_query",
                          "58": "play_podcasts",
                          "59": "lists_query",
                          "6": "recommendation_events",
                          "7": "music_dislikeness",
                          "8": "iot_wemo_off",
                          "9": "cooking_recipe"
                      }
                  },
                  "type": "map_instance_values"
              },
              {
                  "field_to_field": {
                      "intent": "label",
                      "utt": "text"
                  },
                  "type": "rename_fields"
              },
              {
                  "fields": {
                      "classes": [
                          "datetime_query",
                          "iot_hue_lightchange",
                          "transport_ticket",
                          "takeaway_query",
                          "qa_stock",
                          "general_greet",
                          "recommendation_events",
                          "music_dislikeness",
                          "iot_wemo_off",
                          "cooking_recipe",
                          "qa_currency",
                          "transport_traffic",
                          "general_quirky",
                          "weather_query",
                          "audio_volume_up",
                          "email_addcontact",
                          "takeaway_order",
                          "email_querycontact",
                          "iot_hue_lightup",
                          "recommendation_locations",
                          "play_audiobook",
                          "lists_createoradd",
                          "news_query",
                          "alarm_query",
                          "iot_wemo_on",
                          "general_joke",
                          "qa_definition",
                          "social_query",
                          "music_settings",
                          "audio_volume_other",
                          "calendar_remove",
                          "iot_hue_lightdim",
                          "calendar_query",
                          "email_sendemail",
                          "iot_cleaning",
                          "audio_volume_down",
                          "play_radio",
                          "cooking_query",
                          "datetime_convert",
                          "qa_maths",
                          "iot_hue_lightoff",
                          "iot_hue_lighton",
                          "transport_query",
                          "music_likeness",
                          "email_query",
                          "play_music",
                          "audio_volume_mute",
                          "social_post",
                          "alarm_set",
                          "qa_factoid",
                          "calendar_set",
                          "play_game",
                          "alarm_remove",
                          "lists_remove",
                          "transport_taxi",
                          "recommendation_movies",
                          "iot_coffee",
                          "music_query",
                          "play_podcasts",
                          "lists_query"
                      ],
                      "text_type": "sentence",
                      "type_of_class": "intent"
                  },
                  "type": "add_fields"
              }
          ],
          "task": "tasks.classification.multi_class",
          "templates": "templates.classification.multi_class.all",
          "type": "task_card"
      }

References: :ref:`tasks.classification.multi_class <tasks.classification.multi_class>`, :ref:`templates.classification.multi_class.all <templates.classification.multi_class.all>`

|
|



.. _cards.amazon_mass.ml_IN:

----------

ml_IN
"""""

.. note:: ID: ``cards.amazon_mass.ml_IN``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "ml-IN",
              "path": "AmazonScience/massive",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "mappers": {
                      "intent": {
                          "0": "datetime_query",
                          "1": "iot_hue_lightchange",
                          "10": "qa_currency",
                          "11": "transport_traffic",
                          "12": "general_quirky",
                          "13": "weather_query",
                          "14": "audio_volume_up",
                          "15": "email_addcontact",
                          "16": "takeaway_order",
                          "17": "email_querycontact",
                          "18": "iot_hue_lightup",
                          "19": "recommendation_locations",
                          "2": "transport_ticket",
                          "20": "play_audiobook",
                          "21": "lists_createoradd",
                          "22": "news_query",
                          "23": "alarm_query",
                          "24": "iot_wemo_on",
                          "25": "general_joke",
                          "26": "qa_definition",
                          "27": "social_query",
                          "28": "music_settings",
                          "29": "audio_volume_other",
                          "3": "takeaway_query",
                          "30": "calendar_remove",
                          "31": "iot_hue_lightdim",
                          "32": "calendar_query",
                          "33": "email_sendemail",
                          "34": "iot_cleaning",
                          "35": "audio_volume_down",
                          "36": "play_radio",
                          "37": "cooking_query",
                          "38": "datetime_convert",
                          "39": "qa_maths",
                          "4": "qa_stock",
                          "40": "iot_hue_lightoff",
                          "41": "iot_hue_lighton",
                          "42": "transport_query",
                          "43": "music_likeness",
                          "44": "email_query",
                          "45": "play_music",
                          "46": "audio_volume_mute",
                          "47": "social_post",
                          "48": "alarm_set",
                          "49": "qa_factoid",
                          "5": "general_greet",
                          "50": "calendar_set",
                          "51": "play_game",
                          "52": "alarm_remove",
                          "53": "lists_remove",
                          "54": "transport_taxi",
                          "55": "recommendation_movies",
                          "56": "iot_coffee",
                          "57": "music_query",
                          "58": "play_podcasts",
                          "59": "lists_query",
                          "6": "recommendation_events",
                          "7": "music_dislikeness",
                          "8": "iot_wemo_off",
                          "9": "cooking_recipe"
                      }
                  },
                  "type": "map_instance_values"
              },
              {
                  "field_to_field": {
                      "intent": "label",
                      "utt": "text"
                  },
                  "type": "rename_fields"
              },
              {
                  "fields": {
                      "classes": [
                          "datetime_query",
                          "iot_hue_lightchange",
                          "transport_ticket",
                          "takeaway_query",
                          "qa_stock",
                          "general_greet",
                          "recommendation_events",
                          "music_dislikeness",
                          "iot_wemo_off",
                          "cooking_recipe",
                          "qa_currency",
                          "transport_traffic",
                          "general_quirky",
                          "weather_query",
                          "audio_volume_up",
                          "email_addcontact",
                          "takeaway_order",
                          "email_querycontact",
                          "iot_hue_lightup",
                          "recommendation_locations",
                          "play_audiobook",
                          "lists_createoradd",
                          "news_query",
                          "alarm_query",
                          "iot_wemo_on",
                          "general_joke",
                          "qa_definition",
                          "social_query",
                          "music_settings",
                          "audio_volume_other",
                          "calendar_remove",
                          "iot_hue_lightdim",
                          "calendar_query",
                          "email_sendemail",
                          "iot_cleaning",
                          "audio_volume_down",
                          "play_radio",
                          "cooking_query",
                          "datetime_convert",
                          "qa_maths",
                          "iot_hue_lightoff",
                          "iot_hue_lighton",
                          "transport_query",
                          "music_likeness",
                          "email_query",
                          "play_music",
                          "audio_volume_mute",
                          "social_post",
                          "alarm_set",
                          "qa_factoid",
                          "calendar_set",
                          "play_game",
                          "alarm_remove",
                          "lists_remove",
                          "transport_taxi",
                          "recommendation_movies",
                          "iot_coffee",
                          "music_query",
                          "play_podcasts",
                          "lists_query"
                      ],
                      "text_type": "sentence",
                      "type_of_class": "intent"
                  },
                  "type": "add_fields"
              }
          ],
          "task": "tasks.classification.multi_class",
          "templates": "templates.classification.multi_class.all",
          "type": "task_card"
      }

References: :ref:`tasks.classification.multi_class <tasks.classification.multi_class>`, :ref:`templates.classification.multi_class.all <templates.classification.multi_class.all>`

|
|



.. _cards.amazon_mass.vi_VN:

----------

vi_VN
"""""

.. note:: ID: ``cards.amazon_mass.vi_VN``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "vi-VN",
              "path": "AmazonScience/massive",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "mappers": {
                      "intent": {
                          "0": "datetime_query",
                          "1": "iot_hue_lightchange",
                          "10": "qa_currency",
                          "11": "transport_traffic",
                          "12": "general_quirky",
                          "13": "weather_query",
                          "14": "audio_volume_up",
                          "15": "email_addcontact",
                          "16": "takeaway_order",
                          "17": "email_querycontact",
                          "18": "iot_hue_lightup",
                          "19": "recommendation_locations",
                          "2": "transport_ticket",
                          "20": "play_audiobook",
                          "21": "lists_createoradd",
                          "22": "news_query",
                          "23": "alarm_query",
                          "24": "iot_wemo_on",
                          "25": "general_joke",
                          "26": "qa_definition",
                          "27": "social_query",
                          "28": "music_settings",
                          "29": "audio_volume_other",
                          "3": "takeaway_query",
                          "30": "calendar_remove",
                          "31": "iot_hue_lightdim",
                          "32": "calendar_query",
                          "33": "email_sendemail",
                          "34": "iot_cleaning",
                          "35": "audio_volume_down",
                          "36": "play_radio",
                          "37": "cooking_query",
                          "38": "datetime_convert",
                          "39": "qa_maths",
                          "4": "qa_stock",
                          "40": "iot_hue_lightoff",
                          "41": "iot_hue_lighton",
                          "42": "transport_query",
                          "43": "music_likeness",
                          "44": "email_query",
                          "45": "play_music",
                          "46": "audio_volume_mute",
                          "47": "social_post",
                          "48": "alarm_set",
                          "49": "qa_factoid",
                          "5": "general_greet",
                          "50": "calendar_set",
                          "51": "play_game",
                          "52": "alarm_remove",
                          "53": "lists_remove",
                          "54": "transport_taxi",
                          "55": "recommendation_movies",
                          "56": "iot_coffee",
                          "57": "music_query",
                          "58": "play_podcasts",
                          "59": "lists_query",
                          "6": "recommendation_events",
                          "7": "music_dislikeness",
                          "8": "iot_wemo_off",
                          "9": "cooking_recipe"
                      }
                  },
                  "type": "map_instance_values"
              },
              {
                  "field_to_field": {
                      "intent": "label",
                      "utt": "text"
                  },
                  "type": "rename_fields"
              },
              {
                  "fields": {
                      "classes": [
                          "datetime_query",
                          "iot_hue_lightchange",
                          "transport_ticket",
                          "takeaway_query",
                          "qa_stock",
                          "general_greet",
                          "recommendation_events",
                          "music_dislikeness",
                          "iot_wemo_off",
                          "cooking_recipe",
                          "qa_currency",
                          "transport_traffic",
                          "general_quirky",
                          "weather_query",
                          "audio_volume_up",
                          "email_addcontact",
                          "takeaway_order",
                          "email_querycontact",
                          "iot_hue_lightup",
                          "recommendation_locations",
                          "play_audiobook",
                          "lists_createoradd",
                          "news_query",
                          "alarm_query",
                          "iot_wemo_on",
                          "general_joke",
                          "qa_definition",
                          "social_query",
                          "music_settings",
                          "audio_volume_other",
                          "calendar_remove",
                          "iot_hue_lightdim",
                          "calendar_query",
                          "email_sendemail",
                          "iot_cleaning",
                          "audio_volume_down",
                          "play_radio",
                          "cooking_query",
                          "datetime_convert",
                          "qa_maths",
                          "iot_hue_lightoff",
                          "iot_hue_lighton",
                          "transport_query",
                          "music_likeness",
                          "email_query",
                          "play_music",
                          "audio_volume_mute",
                          "social_post",
                          "alarm_set",
                          "qa_factoid",
                          "calendar_set",
                          "play_game",
                          "alarm_remove",
                          "lists_remove",
                          "transport_taxi",
                          "recommendation_movies",
                          "iot_coffee",
                          "music_query",
                          "play_podcasts",
                          "lists_query"
                      ],
                      "text_type": "sentence",
                      "type_of_class": "intent"
                  },
                  "type": "add_fields"
              }
          ],
          "task": "tasks.classification.multi_class",
          "templates": "templates.classification.multi_class.all",
          "type": "task_card"
      }

References: :ref:`tasks.classification.multi_class <tasks.classification.multi_class>`, :ref:`templates.classification.multi_class.all <templates.classification.multi_class.all>`

|
|



.. _cards.amazon_mass.ja_JP:

----------

ja_JP
"""""

.. note:: ID: ``cards.amazon_mass.ja_JP``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "ja-JP",
              "path": "AmazonScience/massive",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "mappers": {
                      "intent": {
                          "0": "datetime_query",
                          "1": "iot_hue_lightchange",
                          "10": "qa_currency",
                          "11": "transport_traffic",
                          "12": "general_quirky",
                          "13": "weather_query",
                          "14": "audio_volume_up",
                          "15": "email_addcontact",
                          "16": "takeaway_order",
                          "17": "email_querycontact",
                          "18": "iot_hue_lightup",
                          "19": "recommendation_locations",
                          "2": "transport_ticket",
                          "20": "play_audiobook",
                          "21": "lists_createoradd",
                          "22": "news_query",
                          "23": "alarm_query",
                          "24": "iot_wemo_on",
                          "25": "general_joke",
                          "26": "qa_definition",
                          "27": "social_query",
                          "28": "music_settings",
                          "29": "audio_volume_other",
                          "3": "takeaway_query",
                          "30": "calendar_remove",
                          "31": "iot_hue_lightdim",
                          "32": "calendar_query",
                          "33": "email_sendemail",
                          "34": "iot_cleaning",
                          "35": "audio_volume_down",
                          "36": "play_radio",
                          "37": "cooking_query",
                          "38": "datetime_convert",
                          "39": "qa_maths",
                          "4": "qa_stock",
                          "40": "iot_hue_lightoff",
                          "41": "iot_hue_lighton",
                          "42": "transport_query",
                          "43": "music_likeness",
                          "44": "email_query",
                          "45": "play_music",
                          "46": "audio_volume_mute",
                          "47": "social_post",
                          "48": "alarm_set",
                          "49": "qa_factoid",
                          "5": "general_greet",
                          "50": "calendar_set",
                          "51": "play_game",
                          "52": "alarm_remove",
                          "53": "lists_remove",
                          "54": "transport_taxi",
                          "55": "recommendation_movies",
                          "56": "iot_coffee",
                          "57": "music_query",
                          "58": "play_podcasts",
                          "59": "lists_query",
                          "6": "recommendation_events",
                          "7": "music_dislikeness",
                          "8": "iot_wemo_off",
                          "9": "cooking_recipe"
                      }
                  },
                  "type": "map_instance_values"
              },
              {
                  "field_to_field": {
                      "intent": "label",
                      "utt": "text"
                  },
                  "type": "rename_fields"
              },
              {
                  "fields": {
                      "classes": [
                          "datetime_query",
                          "iot_hue_lightchange",
                          "transport_ticket",
                          "takeaway_query",
                          "qa_stock",
                          "general_greet",
                          "recommendation_events",
                          "music_dislikeness",
                          "iot_wemo_off",
                          "cooking_recipe",
                          "qa_currency",
                          "transport_traffic",
                          "general_quirky",
                          "weather_query",
                          "audio_volume_up",
                          "email_addcontact",
                          "takeaway_order",
                          "email_querycontact",
                          "iot_hue_lightup",
                          "recommendation_locations",
                          "play_audiobook",
                          "lists_createoradd",
                          "news_query",
                          "alarm_query",
                          "iot_wemo_on",
                          "general_joke",
                          "qa_definition",
                          "social_query",
                          "music_settings",
                          "audio_volume_other",
                          "calendar_remove",
                          "iot_hue_lightdim",
                          "calendar_query",
                          "email_sendemail",
                          "iot_cleaning",
                          "audio_volume_down",
                          "play_radio",
                          "cooking_query",
                          "datetime_convert",
                          "qa_maths",
                          "iot_hue_lightoff",
                          "iot_hue_lighton",
                          "transport_query",
                          "music_likeness",
                          "email_query",
                          "play_music",
                          "audio_volume_mute",
                          "social_post",
                          "alarm_set",
                          "qa_factoid",
                          "calendar_set",
                          "play_game",
                          "alarm_remove",
                          "lists_remove",
                          "transport_taxi",
                          "recommendation_movies",
                          "iot_coffee",
                          "music_query",
                          "play_podcasts",
                          "lists_query"
                      ],
                      "text_type": "sentence",
                      "type_of_class": "intent"
                  },
                  "type": "add_fields"
              }
          ],
          "task": "tasks.classification.multi_class",
          "templates": "templates.classification.multi_class.all",
          "type": "task_card"
      }

References: :ref:`tasks.classification.multi_class <tasks.classification.multi_class>`, :ref:`templates.classification.multi_class.all <templates.classification.multi_class.all>`

|
|



.. _cards.amazon_mass.ko_KR:

----------

ko_KR
"""""

.. note:: ID: ``cards.amazon_mass.ko_KR``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "ko-KR",
              "path": "AmazonScience/massive",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "mappers": {
                      "intent": {
                          "0": "datetime_query",
                          "1": "iot_hue_lightchange",
                          "10": "qa_currency",
                          "11": "transport_traffic",
                          "12": "general_quirky",
                          "13": "weather_query",
                          "14": "audio_volume_up",
                          "15": "email_addcontact",
                          "16": "takeaway_order",
                          "17": "email_querycontact",
                          "18": "iot_hue_lightup",
                          "19": "recommendation_locations",
                          "2": "transport_ticket",
                          "20": "play_audiobook",
                          "21": "lists_createoradd",
                          "22": "news_query",
                          "23": "alarm_query",
                          "24": "iot_wemo_on",
                          "25": "general_joke",
                          "26": "qa_definition",
                          "27": "social_query",
                          "28": "music_settings",
                          "29": "audio_volume_other",
                          "3": "takeaway_query",
                          "30": "calendar_remove",
                          "31": "iot_hue_lightdim",
                          "32": "calendar_query",
                          "33": "email_sendemail",
                          "34": "iot_cleaning",
                          "35": "audio_volume_down",
                          "36": "play_radio",
                          "37": "cooking_query",
                          "38": "datetime_convert",
                          "39": "qa_maths",
                          "4": "qa_stock",
                          "40": "iot_hue_lightoff",
                          "41": "iot_hue_lighton",
                          "42": "transport_query",
                          "43": "music_likeness",
                          "44": "email_query",
                          "45": "play_music",
                          "46": "audio_volume_mute",
                          "47": "social_post",
                          "48": "alarm_set",
                          "49": "qa_factoid",
                          "5": "general_greet",
                          "50": "calendar_set",
                          "51": "play_game",
                          "52": "alarm_remove",
                          "53": "lists_remove",
                          "54": "transport_taxi",
                          "55": "recommendation_movies",
                          "56": "iot_coffee",
                          "57": "music_query",
                          "58": "play_podcasts",
                          "59": "lists_query",
                          "6": "recommendation_events",
                          "7": "music_dislikeness",
                          "8": "iot_wemo_off",
                          "9": "cooking_recipe"
                      }
                  },
                  "type": "map_instance_values"
              },
              {
                  "field_to_field": {
                      "intent": "label",
                      "utt": "text"
                  },
                  "type": "rename_fields"
              },
              {
                  "fields": {
                      "classes": [
                          "datetime_query",
                          "iot_hue_lightchange",
                          "transport_ticket",
                          "takeaway_query",
                          "qa_stock",
                          "general_greet",
                          "recommendation_events",
                          "music_dislikeness",
                          "iot_wemo_off",
                          "cooking_recipe",
                          "qa_currency",
                          "transport_traffic",
                          "general_quirky",
                          "weather_query",
                          "audio_volume_up",
                          "email_addcontact",
                          "takeaway_order",
                          "email_querycontact",
                          "iot_hue_lightup",
                          "recommendation_locations",
                          "play_audiobook",
                          "lists_createoradd",
                          "news_query",
                          "alarm_query",
                          "iot_wemo_on",
                          "general_joke",
                          "qa_definition",
                          "social_query",
                          "music_settings",
                          "audio_volume_other",
                          "calendar_remove",
                          "iot_hue_lightdim",
                          "calendar_query",
                          "email_sendemail",
                          "iot_cleaning",
                          "audio_volume_down",
                          "play_radio",
                          "cooking_query",
                          "datetime_convert",
                          "qa_maths",
                          "iot_hue_lightoff",
                          "iot_hue_lighton",
                          "transport_query",
                          "music_likeness",
                          "email_query",
                          "play_music",
                          "audio_volume_mute",
                          "social_post",
                          "alarm_set",
                          "qa_factoid",
                          "calendar_set",
                          "play_game",
                          "alarm_remove",
                          "lists_remove",
                          "transport_taxi",
                          "recommendation_movies",
                          "iot_coffee",
                          "music_query",
                          "play_podcasts",
                          "lists_query"
                      ],
                      "text_type": "sentence",
                      "type_of_class": "intent"
                  },
                  "type": "add_fields"
              }
          ],
          "task": "tasks.classification.multi_class",
          "templates": "templates.classification.multi_class.all",
          "type": "task_card"
      }

References: :ref:`tasks.classification.multi_class <tasks.classification.multi_class>`, :ref:`templates.classification.multi_class.all <templates.classification.multi_class.all>`

|
|



.. _cards.amazon_mass.kn_IN:

----------

kn_IN
"""""

.. note:: ID: ``cards.amazon_mass.kn_IN``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "kn-IN",
              "path": "AmazonScience/massive",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "mappers": {
                      "intent": {
                          "0": "datetime_query",
                          "1": "iot_hue_lightchange",
                          "10": "qa_currency",
                          "11": "transport_traffic",
                          "12": "general_quirky",
                          "13": "weather_query",
                          "14": "audio_volume_up",
                          "15": "email_addcontact",
                          "16": "takeaway_order",
                          "17": "email_querycontact",
                          "18": "iot_hue_lightup",
                          "19": "recommendation_locations",
                          "2": "transport_ticket",
                          "20": "play_audiobook",
                          "21": "lists_createoradd",
                          "22": "news_query",
                          "23": "alarm_query",
                          "24": "iot_wemo_on",
                          "25": "general_joke",
                          "26": "qa_definition",
                          "27": "social_query",
                          "28": "music_settings",
                          "29": "audio_volume_other",
                          "3": "takeaway_query",
                          "30": "calendar_remove",
                          "31": "iot_hue_lightdim",
                          "32": "calendar_query",
                          "33": "email_sendemail",
                          "34": "iot_cleaning",
                          "35": "audio_volume_down",
                          "36": "play_radio",
                          "37": "cooking_query",
                          "38": "datetime_convert",
                          "39": "qa_maths",
                          "4": "qa_stock",
                          "40": "iot_hue_lightoff",
                          "41": "iot_hue_lighton",
                          "42": "transport_query",
                          "43": "music_likeness",
                          "44": "email_query",
                          "45": "play_music",
                          "46": "audio_volume_mute",
                          "47": "social_post",
                          "48": "alarm_set",
                          "49": "qa_factoid",
                          "5": "general_greet",
                          "50": "calendar_set",
                          "51": "play_game",
                          "52": "alarm_remove",
                          "53": "lists_remove",
                          "54": "transport_taxi",
                          "55": "recommendation_movies",
                          "56": "iot_coffee",
                          "57": "music_query",
                          "58": "play_podcasts",
                          "59": "lists_query",
                          "6": "recommendation_events",
                          "7": "music_dislikeness",
                          "8": "iot_wemo_off",
                          "9": "cooking_recipe"
                      }
                  },
                  "type": "map_instance_values"
              },
              {
                  "field_to_field": {
                      "intent": "label",
                      "utt": "text"
                  },
                  "type": "rename_fields"
              },
              {
                  "fields": {
                      "classes": [
                          "datetime_query",
                          "iot_hue_lightchange",
                          "transport_ticket",
                          "takeaway_query",
                          "qa_stock",
                          "general_greet",
                          "recommendation_events",
                          "music_dislikeness",
                          "iot_wemo_off",
                          "cooking_recipe",
                          "qa_currency",
                          "transport_traffic",
                          "general_quirky",
                          "weather_query",
                          "audio_volume_up",
                          "email_addcontact",
                          "takeaway_order",
                          "email_querycontact",
                          "iot_hue_lightup",
                          "recommendation_locations",
                          "play_audiobook",
                          "lists_createoradd",
                          "news_query",
                          "alarm_query",
                          "iot_wemo_on",
                          "general_joke",
                          "qa_definition",
                          "social_query",
                          "music_settings",
                          "audio_volume_other",
                          "calendar_remove",
                          "iot_hue_lightdim",
                          "calendar_query",
                          "email_sendemail",
                          "iot_cleaning",
                          "audio_volume_down",
                          "play_radio",
                          "cooking_query",
                          "datetime_convert",
                          "qa_maths",
                          "iot_hue_lightoff",
                          "iot_hue_lighton",
                          "transport_query",
                          "music_likeness",
                          "email_query",
                          "play_music",
                          "audio_volume_mute",
                          "social_post",
                          "alarm_set",
                          "qa_factoid",
                          "calendar_set",
                          "play_game",
                          "alarm_remove",
                          "lists_remove",
                          "transport_taxi",
                          "recommendation_movies",
                          "iot_coffee",
                          "music_query",
                          "play_podcasts",
                          "lists_query"
                      ],
                      "text_type": "sentence",
                      "type_of_class": "intent"
                  },
                  "type": "add_fields"
              }
          ],
          "task": "tasks.classification.multi_class",
          "templates": "templates.classification.multi_class.all",
          "type": "task_card"
      }

References: :ref:`tasks.classification.multi_class <tasks.classification.multi_class>`, :ref:`templates.classification.multi_class.all <templates.classification.multi_class.all>`

|
|



.. _cards.amazon_mass.all:

----------

all
"""

.. note:: ID: ``cards.amazon_mass.all``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "all",
              "path": "AmazonScience/massive",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "mappers": {
                      "intent": {
                          "0": "datetime_query",
                          "1": "iot_hue_lightchange",
                          "10": "qa_currency",
                          "11": "transport_traffic",
                          "12": "general_quirky",
                          "13": "weather_query",
                          "14": "audio_volume_up",
                          "15": "email_addcontact",
                          "16": "takeaway_order",
                          "17": "email_querycontact",
                          "18": "iot_hue_lightup",
                          "19": "recommendation_locations",
                          "2": "transport_ticket",
                          "20": "play_audiobook",
                          "21": "lists_createoradd",
                          "22": "news_query",
                          "23": "alarm_query",
                          "24": "iot_wemo_on",
                          "25": "general_joke",
                          "26": "qa_definition",
                          "27": "social_query",
                          "28": "music_settings",
                          "29": "audio_volume_other",
                          "3": "takeaway_query",
                          "30": "calendar_remove",
                          "31": "iot_hue_lightdim",
                          "32": "calendar_query",
                          "33": "email_sendemail",
                          "34": "iot_cleaning",
                          "35": "audio_volume_down",
                          "36": "play_radio",
                          "37": "cooking_query",
                          "38": "datetime_convert",
                          "39": "qa_maths",
                          "4": "qa_stock",
                          "40": "iot_hue_lightoff",
                          "41": "iot_hue_lighton",
                          "42": "transport_query",
                          "43": "music_likeness",
                          "44": "email_query",
                          "45": "play_music",
                          "46": "audio_volume_mute",
                          "47": "social_post",
                          "48": "alarm_set",
                          "49": "qa_factoid",
                          "5": "general_greet",
                          "50": "calendar_set",
                          "51": "play_game",
                          "52": "alarm_remove",
                          "53": "lists_remove",
                          "54": "transport_taxi",
                          "55": "recommendation_movies",
                          "56": "iot_coffee",
                          "57": "music_query",
                          "58": "play_podcasts",
                          "59": "lists_query",
                          "6": "recommendation_events",
                          "7": "music_dislikeness",
                          "8": "iot_wemo_off",
                          "9": "cooking_recipe"
                      }
                  },
                  "type": "map_instance_values"
              },
              {
                  "field_to_field": {
                      "intent": "label",
                      "utt": "text"
                  },
                  "type": "rename_fields"
              },
              {
                  "fields": {
                      "classes": [
                          "datetime_query",
                          "iot_hue_lightchange",
                          "transport_ticket",
                          "takeaway_query",
                          "qa_stock",
                          "general_greet",
                          "recommendation_events",
                          "music_dislikeness",
                          "iot_wemo_off",
                          "cooking_recipe",
                          "qa_currency",
                          "transport_traffic",
                          "general_quirky",
                          "weather_query",
                          "audio_volume_up",
                          "email_addcontact",
                          "takeaway_order",
                          "email_querycontact",
                          "iot_hue_lightup",
                          "recommendation_locations",
                          "play_audiobook",
                          "lists_createoradd",
                          "news_query",
                          "alarm_query",
                          "iot_wemo_on",
                          "general_joke",
                          "qa_definition",
                          "social_query",
                          "music_settings",
                          "audio_volume_other",
                          "calendar_remove",
                          "iot_hue_lightdim",
                          "calendar_query",
                          "email_sendemail",
                          "iot_cleaning",
                          "audio_volume_down",
                          "play_radio",
                          "cooking_query",
                          "datetime_convert",
                          "qa_maths",
                          "iot_hue_lightoff",
                          "iot_hue_lighton",
                          "transport_query",
                          "music_likeness",
                          "email_query",
                          "play_music",
                          "audio_volume_mute",
                          "social_post",
                          "alarm_set",
                          "qa_factoid",
                          "calendar_set",
                          "play_game",
                          "alarm_remove",
                          "lists_remove",
                          "transport_taxi",
                          "recommendation_movies",
                          "iot_coffee",
                          "music_query",
                          "play_podcasts",
                          "lists_query"
                      ],
                      "text_type": "sentence",
                      "type_of_class": "intent"
                  },
                  "type": "add_fields"
              }
          ],
          "task": "tasks.classification.multi_class",
          "templates": "templates.classification.multi_class.all",
          "type": "task_card"
      }

References: :ref:`tasks.classification.multi_class <tasks.classification.multi_class>`, :ref:`templates.classification.multi_class.all <templates.classification.multi_class.all>`

|
|



.. _cards.amazon_mass.ka_GE:

----------

ka_GE
"""""

.. note:: ID: ``cards.amazon_mass.ka_GE``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "ka-GE",
              "path": "AmazonScience/massive",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "mappers": {
                      "intent": {
                          "0": "datetime_query",
                          "1": "iot_hue_lightchange",
                          "10": "qa_currency",
                          "11": "transport_traffic",
                          "12": "general_quirky",
                          "13": "weather_query",
                          "14": "audio_volume_up",
                          "15": "email_addcontact",
                          "16": "takeaway_order",
                          "17": "email_querycontact",
                          "18": "iot_hue_lightup",
                          "19": "recommendation_locations",
                          "2": "transport_ticket",
                          "20": "play_audiobook",
                          "21": "lists_createoradd",
                          "22": "news_query",
                          "23": "alarm_query",
                          "24": "iot_wemo_on",
                          "25": "general_joke",
                          "26": "qa_definition",
                          "27": "social_query",
                          "28": "music_settings",
                          "29": "audio_volume_other",
                          "3": "takeaway_query",
                          "30": "calendar_remove",
                          "31": "iot_hue_lightdim",
                          "32": "calendar_query",
                          "33": "email_sendemail",
                          "34": "iot_cleaning",
                          "35": "audio_volume_down",
                          "36": "play_radio",
                          "37": "cooking_query",
                          "38": "datetime_convert",
                          "39": "qa_maths",
                          "4": "qa_stock",
                          "40": "iot_hue_lightoff",
                          "41": "iot_hue_lighton",
                          "42": "transport_query",
                          "43": "music_likeness",
                          "44": "email_query",
                          "45": "play_music",
                          "46": "audio_volume_mute",
                          "47": "social_post",
                          "48": "alarm_set",
                          "49": "qa_factoid",
                          "5": "general_greet",
                          "50": "calendar_set",
                          "51": "play_game",
                          "52": "alarm_remove",
                          "53": "lists_remove",
                          "54": "transport_taxi",
                          "55": "recommendation_movies",
                          "56": "iot_coffee",
                          "57": "music_query",
                          "58": "play_podcasts",
                          "59": "lists_query",
                          "6": "recommendation_events",
                          "7": "music_dislikeness",
                          "8": "iot_wemo_off",
                          "9": "cooking_recipe"
                      }
                  },
                  "type": "map_instance_values"
              },
              {
                  "field_to_field": {
                      "intent": "label",
                      "utt": "text"
                  },
                  "type": "rename_fields"
              },
              {
                  "fields": {
                      "classes": [
                          "datetime_query",
                          "iot_hue_lightchange",
                          "transport_ticket",
                          "takeaway_query",
                          "qa_stock",
                          "general_greet",
                          "recommendation_events",
                          "music_dislikeness",
                          "iot_wemo_off",
                          "cooking_recipe",
                          "qa_currency",
                          "transport_traffic",
                          "general_quirky",
                          "weather_query",
                          "audio_volume_up",
                          "email_addcontact",
                          "takeaway_order",
                          "email_querycontact",
                          "iot_hue_lightup",
                          "recommendation_locations",
                          "play_audiobook",
                          "lists_createoradd",
                          "news_query",
                          "alarm_query",
                          "iot_wemo_on",
                          "general_joke",
                          "qa_definition",
                          "social_query",
                          "music_settings",
                          "audio_volume_other",
                          "calendar_remove",
                          "iot_hue_lightdim",
                          "calendar_query",
                          "email_sendemail",
                          "iot_cleaning",
                          "audio_volume_down",
                          "play_radio",
                          "cooking_query",
                          "datetime_convert",
                          "qa_maths",
                          "iot_hue_lightoff",
                          "iot_hue_lighton",
                          "transport_query",
                          "music_likeness",
                          "email_query",
                          "play_music",
                          "audio_volume_mute",
                          "social_post",
                          "alarm_set",
                          "qa_factoid",
                          "calendar_set",
                          "play_game",
                          "alarm_remove",
                          "lists_remove",
                          "transport_taxi",
                          "recommendation_movies",
                          "iot_coffee",
                          "music_query",
                          "play_podcasts",
                          "lists_query"
                      ],
                      "text_type": "sentence",
                      "type_of_class": "intent"
                  },
                  "type": "add_fields"
              }
          ],
          "task": "tasks.classification.multi_class",
          "templates": "templates.classification.multi_class.all",
          "type": "task_card"
      }

References: :ref:`tasks.classification.multi_class <tasks.classification.multi_class>`, :ref:`templates.classification.multi_class.all <templates.classification.multi_class.all>`

|
|



.. _cards.amazon_mass.cy_GB:

----------

cy_GB
"""""

.. note:: ID: ``cards.amazon_mass.cy_GB``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "cy-GB",
              "path": "AmazonScience/massive",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "mappers": {
                      "intent": {
                          "0": "datetime_query",
                          "1": "iot_hue_lightchange",
                          "10": "qa_currency",
                          "11": "transport_traffic",
                          "12": "general_quirky",
                          "13": "weather_query",
                          "14": "audio_volume_up",
                          "15": "email_addcontact",
                          "16": "takeaway_order",
                          "17": "email_querycontact",
                          "18": "iot_hue_lightup",
                          "19": "recommendation_locations",
                          "2": "transport_ticket",
                          "20": "play_audiobook",
                          "21": "lists_createoradd",
                          "22": "news_query",
                          "23": "alarm_query",
                          "24": "iot_wemo_on",
                          "25": "general_joke",
                          "26": "qa_definition",
                          "27": "social_query",
                          "28": "music_settings",
                          "29": "audio_volume_other",
                          "3": "takeaway_query",
                          "30": "calendar_remove",
                          "31": "iot_hue_lightdim",
                          "32": "calendar_query",
                          "33": "email_sendemail",
                          "34": "iot_cleaning",
                          "35": "audio_volume_down",
                          "36": "play_radio",
                          "37": "cooking_query",
                          "38": "datetime_convert",
                          "39": "qa_maths",
                          "4": "qa_stock",
                          "40": "iot_hue_lightoff",
                          "41": "iot_hue_lighton",
                          "42": "transport_query",
                          "43": "music_likeness",
                          "44": "email_query",
                          "45": "play_music",
                          "46": "audio_volume_mute",
                          "47": "social_post",
                          "48": "alarm_set",
                          "49": "qa_factoid",
                          "5": "general_greet",
                          "50": "calendar_set",
                          "51": "play_game",
                          "52": "alarm_remove",
                          "53": "lists_remove",
                          "54": "transport_taxi",
                          "55": "recommendation_movies",
                          "56": "iot_coffee",
                          "57": "music_query",
                          "58": "play_podcasts",
                          "59": "lists_query",
                          "6": "recommendation_events",
                          "7": "music_dislikeness",
                          "8": "iot_wemo_off",
                          "9": "cooking_recipe"
                      }
                  },
                  "type": "map_instance_values"
              },
              {
                  "field_to_field": {
                      "intent": "label",
                      "utt": "text"
                  },
                  "type": "rename_fields"
              },
              {
                  "fields": {
                      "classes": [
                          "datetime_query",
                          "iot_hue_lightchange",
                          "transport_ticket",
                          "takeaway_query",
                          "qa_stock",
                          "general_greet",
                          "recommendation_events",
                          "music_dislikeness",
                          "iot_wemo_off",
                          "cooking_recipe",
                          "qa_currency",
                          "transport_traffic",
                          "general_quirky",
                          "weather_query",
                          "audio_volume_up",
                          "email_addcontact",
                          "takeaway_order",
                          "email_querycontact",
                          "iot_hue_lightup",
                          "recommendation_locations",
                          "play_audiobook",
                          "lists_createoradd",
                          "news_query",
                          "alarm_query",
                          "iot_wemo_on",
                          "general_joke",
                          "qa_definition",
                          "social_query",
                          "music_settings",
                          "audio_volume_other",
                          "calendar_remove",
                          "iot_hue_lightdim",
                          "calendar_query",
                          "email_sendemail",
                          "iot_cleaning",
                          "audio_volume_down",
                          "play_radio",
                          "cooking_query",
                          "datetime_convert",
                          "qa_maths",
                          "iot_hue_lightoff",
                          "iot_hue_lighton",
                          "transport_query",
                          "music_likeness",
                          "email_query",
                          "play_music",
                          "audio_volume_mute",
                          "social_post",
                          "alarm_set",
                          "qa_factoid",
                          "calendar_set",
                          "play_game",
                          "alarm_remove",
                          "lists_remove",
                          "transport_taxi",
                          "recommendation_movies",
                          "iot_coffee",
                          "music_query",
                          "play_podcasts",
                          "lists_query"
                      ],
                      "text_type": "sentence",
                      "type_of_class": "intent"
                  },
                  "type": "add_fields"
              }
          ],
          "task": "tasks.classification.multi_class",
          "templates": "templates.classification.multi_class.all",
          "type": "task_card"
      }

References: :ref:`tasks.classification.multi_class <tasks.classification.multi_class>`, :ref:`templates.classification.multi_class.all <templates.classification.multi_class.all>`

|
|



.. _cards.amazon_mass.sw_KE:

----------

sw_KE
"""""

.. note:: ID: ``cards.amazon_mass.sw_KE``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "sw-KE",
              "path": "AmazonScience/massive",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "mappers": {
                      "intent": {
                          "0": "datetime_query",
                          "1": "iot_hue_lightchange",
                          "10": "qa_currency",
                          "11": "transport_traffic",
                          "12": "general_quirky",
                          "13": "weather_query",
                          "14": "audio_volume_up",
                          "15": "email_addcontact",
                          "16": "takeaway_order",
                          "17": "email_querycontact",
                          "18": "iot_hue_lightup",
                          "19": "recommendation_locations",
                          "2": "transport_ticket",
                          "20": "play_audiobook",
                          "21": "lists_createoradd",
                          "22": "news_query",
                          "23": "alarm_query",
                          "24": "iot_wemo_on",
                          "25": "general_joke",
                          "26": "qa_definition",
                          "27": "social_query",
                          "28": "music_settings",
                          "29": "audio_volume_other",
                          "3": "takeaway_query",
                          "30": "calendar_remove",
                          "31": "iot_hue_lightdim",
                          "32": "calendar_query",
                          "33": "email_sendemail",
                          "34": "iot_cleaning",
                          "35": "audio_volume_down",
                          "36": "play_radio",
                          "37": "cooking_query",
                          "38": "datetime_convert",
                          "39": "qa_maths",
                          "4": "qa_stock",
                          "40": "iot_hue_lightoff",
                          "41": "iot_hue_lighton",
                          "42": "transport_query",
                          "43": "music_likeness",
                          "44": "email_query",
                          "45": "play_music",
                          "46": "audio_volume_mute",
                          "47": "social_post",
                          "48": "alarm_set",
                          "49": "qa_factoid",
                          "5": "general_greet",
                          "50": "calendar_set",
                          "51": "play_game",
                          "52": "alarm_remove",
                          "53": "lists_remove",
                          "54": "transport_taxi",
                          "55": "recommendation_movies",
                          "56": "iot_coffee",
                          "57": "music_query",
                          "58": "play_podcasts",
                          "59": "lists_query",
                          "6": "recommendation_events",
                          "7": "music_dislikeness",
                          "8": "iot_wemo_off",
                          "9": "cooking_recipe"
                      }
                  },
                  "type": "map_instance_values"
              },
              {
                  "field_to_field": {
                      "intent": "label",
                      "utt": "text"
                  },
                  "type": "rename_fields"
              },
              {
                  "fields": {
                      "classes": [
                          "datetime_query",
                          "iot_hue_lightchange",
                          "transport_ticket",
                          "takeaway_query",
                          "qa_stock",
                          "general_greet",
                          "recommendation_events",
                          "music_dislikeness",
                          "iot_wemo_off",
                          "cooking_recipe",
                          "qa_currency",
                          "transport_traffic",
                          "general_quirky",
                          "weather_query",
                          "audio_volume_up",
                          "email_addcontact",
                          "takeaway_order",
                          "email_querycontact",
                          "iot_hue_lightup",
                          "recommendation_locations",
                          "play_audiobook",
                          "lists_createoradd",
                          "news_query",
                          "alarm_query",
                          "iot_wemo_on",
                          "general_joke",
                          "qa_definition",
                          "social_query",
                          "music_settings",
                          "audio_volume_other",
                          "calendar_remove",
                          "iot_hue_lightdim",
                          "calendar_query",
                          "email_sendemail",
                          "iot_cleaning",
                          "audio_volume_down",
                          "play_radio",
                          "cooking_query",
                          "datetime_convert",
                          "qa_maths",
                          "iot_hue_lightoff",
                          "iot_hue_lighton",
                          "transport_query",
                          "music_likeness",
                          "email_query",
                          "play_music",
                          "audio_volume_mute",
                          "social_post",
                          "alarm_set",
                          "qa_factoid",
                          "calendar_set",
                          "play_game",
                          "alarm_remove",
                          "lists_remove",
                          "transport_taxi",
                          "recommendation_movies",
                          "iot_coffee",
                          "music_query",
                          "play_podcasts",
                          "lists_query"
                      ],
                      "text_type": "sentence",
                      "type_of_class": "intent"
                  },
                  "type": "add_fields"
              }
          ],
          "task": "tasks.classification.multi_class",
          "templates": "templates.classification.multi_class.all",
          "type": "task_card"
      }

References: :ref:`tasks.classification.multi_class <tasks.classification.multi_class>`, :ref:`templates.classification.multi_class.all <templates.classification.multi_class.all>`

|
|



.. _cards.amazon_mass.el_GR:

----------

el_GR
"""""

.. note:: ID: ``cards.amazon_mass.el_GR``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "el-GR",
              "path": "AmazonScience/massive",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "mappers": {
                      "intent": {
                          "0": "datetime_query",
                          "1": "iot_hue_lightchange",
                          "10": "qa_currency",
                          "11": "transport_traffic",
                          "12": "general_quirky",
                          "13": "weather_query",
                          "14": "audio_volume_up",
                          "15": "email_addcontact",
                          "16": "takeaway_order",
                          "17": "email_querycontact",
                          "18": "iot_hue_lightup",
                          "19": "recommendation_locations",
                          "2": "transport_ticket",
                          "20": "play_audiobook",
                          "21": "lists_createoradd",
                          "22": "news_query",
                          "23": "alarm_query",
                          "24": "iot_wemo_on",
                          "25": "general_joke",
                          "26": "qa_definition",
                          "27": "social_query",
                          "28": "music_settings",
                          "29": "audio_volume_other",
                          "3": "takeaway_query",
                          "30": "calendar_remove",
                          "31": "iot_hue_lightdim",
                          "32": "calendar_query",
                          "33": "email_sendemail",
                          "34": "iot_cleaning",
                          "35": "audio_volume_down",
                          "36": "play_radio",
                          "37": "cooking_query",
                          "38": "datetime_convert",
                          "39": "qa_maths",
                          "4": "qa_stock",
                          "40": "iot_hue_lightoff",
                          "41": "iot_hue_lighton",
                          "42": "transport_query",
                          "43": "music_likeness",
                          "44": "email_query",
                          "45": "play_music",
                          "46": "audio_volume_mute",
                          "47": "social_post",
                          "48": "alarm_set",
                          "49": "qa_factoid",
                          "5": "general_greet",
                          "50": "calendar_set",
                          "51": "play_game",
                          "52": "alarm_remove",
                          "53": "lists_remove",
                          "54": "transport_taxi",
                          "55": "recommendation_movies",
                          "56": "iot_coffee",
                          "57": "music_query",
                          "58": "play_podcasts",
                          "59": "lists_query",
                          "6": "recommendation_events",
                          "7": "music_dislikeness",
                          "8": "iot_wemo_off",
                          "9": "cooking_recipe"
                      }
                  },
                  "type": "map_instance_values"
              },
              {
                  "field_to_field": {
                      "intent": "label",
                      "utt": "text"
                  },
                  "type": "rename_fields"
              },
              {
                  "fields": {
                      "classes": [
                          "datetime_query",
                          "iot_hue_lightchange",
                          "transport_ticket",
                          "takeaway_query",
                          "qa_stock",
                          "general_greet",
                          "recommendation_events",
                          "music_dislikeness",
                          "iot_wemo_off",
                          "cooking_recipe",
                          "qa_currency",
                          "transport_traffic",
                          "general_quirky",
                          "weather_query",
                          "audio_volume_up",
                          "email_addcontact",
                          "takeaway_order",
                          "email_querycontact",
                          "iot_hue_lightup",
                          "recommendation_locations",
                          "play_audiobook",
                          "lists_createoradd",
                          "news_query",
                          "alarm_query",
                          "iot_wemo_on",
                          "general_joke",
                          "qa_definition",
                          "social_query",
                          "music_settings",
                          "audio_volume_other",
                          "calendar_remove",
                          "iot_hue_lightdim",
                          "calendar_query",
                          "email_sendemail",
                          "iot_cleaning",
                          "audio_volume_down",
                          "play_radio",
                          "cooking_query",
                          "datetime_convert",
                          "qa_maths",
                          "iot_hue_lightoff",
                          "iot_hue_lighton",
                          "transport_query",
                          "music_likeness",
                          "email_query",
                          "play_music",
                          "audio_volume_mute",
                          "social_post",
                          "alarm_set",
                          "qa_factoid",
                          "calendar_set",
                          "play_game",
                          "alarm_remove",
                          "lists_remove",
                          "transport_taxi",
                          "recommendation_movies",
                          "iot_coffee",
                          "music_query",
                          "play_podcasts",
                          "lists_query"
                      ],
                      "text_type": "sentence",
                      "type_of_class": "intent"
                  },
                  "type": "add_fields"
              }
          ],
          "task": "tasks.classification.multi_class",
          "templates": "templates.classification.multi_class.all",
          "type": "task_card"
      }

References: :ref:`tasks.classification.multi_class <tasks.classification.multi_class>`, :ref:`templates.classification.multi_class.all <templates.classification.multi_class.all>`

|
|



.. _cards.amazon_mass.nb_NO:

----------

nb_NO
"""""

.. note:: ID: ``cards.amazon_mass.nb_NO``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "nb-NO",
              "path": "AmazonScience/massive",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "mappers": {
                      "intent": {
                          "0": "datetime_query",
                          "1": "iot_hue_lightchange",
                          "10": "qa_currency",
                          "11": "transport_traffic",
                          "12": "general_quirky",
                          "13": "weather_query",
                          "14": "audio_volume_up",
                          "15": "email_addcontact",
                          "16": "takeaway_order",
                          "17": "email_querycontact",
                          "18": "iot_hue_lightup",
                          "19": "recommendation_locations",
                          "2": "transport_ticket",
                          "20": "play_audiobook",
                          "21": "lists_createoradd",
                          "22": "news_query",
                          "23": "alarm_query",
                          "24": "iot_wemo_on",
                          "25": "general_joke",
                          "26": "qa_definition",
                          "27": "social_query",
                          "28": "music_settings",
                          "29": "audio_volume_other",
                          "3": "takeaway_query",
                          "30": "calendar_remove",
                          "31": "iot_hue_lightdim",
                          "32": "calendar_query",
                          "33": "email_sendemail",
                          "34": "iot_cleaning",
                          "35": "audio_volume_down",
                          "36": "play_radio",
                          "37": "cooking_query",
                          "38": "datetime_convert",
                          "39": "qa_maths",
                          "4": "qa_stock",
                          "40": "iot_hue_lightoff",
                          "41": "iot_hue_lighton",
                          "42": "transport_query",
                          "43": "music_likeness",
                          "44": "email_query",
                          "45": "play_music",
                          "46": "audio_volume_mute",
                          "47": "social_post",
                          "48": "alarm_set",
                          "49": "qa_factoid",
                          "5": "general_greet",
                          "50": "calendar_set",
                          "51": "play_game",
                          "52": "alarm_remove",
                          "53": "lists_remove",
                          "54": "transport_taxi",
                          "55": "recommendation_movies",
                          "56": "iot_coffee",
                          "57": "music_query",
                          "58": "play_podcasts",
                          "59": "lists_query",
                          "6": "recommendation_events",
                          "7": "music_dislikeness",
                          "8": "iot_wemo_off",
                          "9": "cooking_recipe"
                      }
                  },
                  "type": "map_instance_values"
              },
              {
                  "field_to_field": {
                      "intent": "label",
                      "utt": "text"
                  },
                  "type": "rename_fields"
              },
              {
                  "fields": {
                      "classes": [
                          "datetime_query",
                          "iot_hue_lightchange",
                          "transport_ticket",
                          "takeaway_query",
                          "qa_stock",
                          "general_greet",
                          "recommendation_events",
                          "music_dislikeness",
                          "iot_wemo_off",
                          "cooking_recipe",
                          "qa_currency",
                          "transport_traffic",
                          "general_quirky",
                          "weather_query",
                          "audio_volume_up",
                          "email_addcontact",
                          "takeaway_order",
                          "email_querycontact",
                          "iot_hue_lightup",
                          "recommendation_locations",
                          "play_audiobook",
                          "lists_createoradd",
                          "news_query",
                          "alarm_query",
                          "iot_wemo_on",
                          "general_joke",
                          "qa_definition",
                          "social_query",
                          "music_settings",
                          "audio_volume_other",
                          "calendar_remove",
                          "iot_hue_lightdim",
                          "calendar_query",
                          "email_sendemail",
                          "iot_cleaning",
                          "audio_volume_down",
                          "play_radio",
                          "cooking_query",
                          "datetime_convert",
                          "qa_maths",
                          "iot_hue_lightoff",
                          "iot_hue_lighton",
                          "transport_query",
                          "music_likeness",
                          "email_query",
                          "play_music",
                          "audio_volume_mute",
                          "social_post",
                          "alarm_set",
                          "qa_factoid",
                          "calendar_set",
                          "play_game",
                          "alarm_remove",
                          "lists_remove",
                          "transport_taxi",
                          "recommendation_movies",
                          "iot_coffee",
                          "music_query",
                          "play_podcasts",
                          "lists_query"
                      ],
                      "text_type": "sentence",
                      "type_of_class": "intent"
                  },
                  "type": "add_fields"
              }
          ],
          "task": "tasks.classification.multi_class",
          "templates": "templates.classification.multi_class.all",
          "type": "task_card"
      }

References: :ref:`tasks.classification.multi_class <tasks.classification.multi_class>`, :ref:`templates.classification.multi_class.all <templates.classification.multi_class.all>`

|
|



.. _cards.amazon_mass.ur_PK:

----------

ur_PK
"""""

.. note:: ID: ``cards.amazon_mass.ur_PK``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "ur-PK",
              "path": "AmazonScience/massive",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "mappers": {
                      "intent": {
                          "0": "datetime_query",
                          "1": "iot_hue_lightchange",
                          "10": "qa_currency",
                          "11": "transport_traffic",
                          "12": "general_quirky",
                          "13": "weather_query",
                          "14": "audio_volume_up",
                          "15": "email_addcontact",
                          "16": "takeaway_order",
                          "17": "email_querycontact",
                          "18": "iot_hue_lightup",
                          "19": "recommendation_locations",
                          "2": "transport_ticket",
                          "20": "play_audiobook",
                          "21": "lists_createoradd",
                          "22": "news_query",
                          "23": "alarm_query",
                          "24": "iot_wemo_on",
                          "25": "general_joke",
                          "26": "qa_definition",
                          "27": "social_query",
                          "28": "music_settings",
                          "29": "audio_volume_other",
                          "3": "takeaway_query",
                          "30": "calendar_remove",
                          "31": "iot_hue_lightdim",
                          "32": "calendar_query",
                          "33": "email_sendemail",
                          "34": "iot_cleaning",
                          "35": "audio_volume_down",
                          "36": "play_radio",
                          "37": "cooking_query",
                          "38": "datetime_convert",
                          "39": "qa_maths",
                          "4": "qa_stock",
                          "40": "iot_hue_lightoff",
                          "41": "iot_hue_lighton",
                          "42": "transport_query",
                          "43": "music_likeness",
                          "44": "email_query",
                          "45": "play_music",
                          "46": "audio_volume_mute",
                          "47": "social_post",
                          "48": "alarm_set",
                          "49": "qa_factoid",
                          "5": "general_greet",
                          "50": "calendar_set",
                          "51": "play_game",
                          "52": "alarm_remove",
                          "53": "lists_remove",
                          "54": "transport_taxi",
                          "55": "recommendation_movies",
                          "56": "iot_coffee",
                          "57": "music_query",
                          "58": "play_podcasts",
                          "59": "lists_query",
                          "6": "recommendation_events",
                          "7": "music_dislikeness",
                          "8": "iot_wemo_off",
                          "9": "cooking_recipe"
                      }
                  },
                  "type": "map_instance_values"
              },
              {
                  "field_to_field": {
                      "intent": "label",
                      "utt": "text"
                  },
                  "type": "rename_fields"
              },
              {
                  "fields": {
                      "classes": [
                          "datetime_query",
                          "iot_hue_lightchange",
                          "transport_ticket",
                          "takeaway_query",
                          "qa_stock",
                          "general_greet",
                          "recommendation_events",
                          "music_dislikeness",
                          "iot_wemo_off",
                          "cooking_recipe",
                          "qa_currency",
                          "transport_traffic",
                          "general_quirky",
                          "weather_query",
                          "audio_volume_up",
                          "email_addcontact",
                          "takeaway_order",
                          "email_querycontact",
                          "iot_hue_lightup",
                          "recommendation_locations",
                          "play_audiobook",
                          "lists_createoradd",
                          "news_query",
                          "alarm_query",
                          "iot_wemo_on",
                          "general_joke",
                          "qa_definition",
                          "social_query",
                          "music_settings",
                          "audio_volume_other",
                          "calendar_remove",
                          "iot_hue_lightdim",
                          "calendar_query",
                          "email_sendemail",
                          "iot_cleaning",
                          "audio_volume_down",
                          "play_radio",
                          "cooking_query",
                          "datetime_convert",
                          "qa_maths",
                          "iot_hue_lightoff",
                          "iot_hue_lighton",
                          "transport_query",
                          "music_likeness",
                          "email_query",
                          "play_music",
                          "audio_volume_mute",
                          "social_post",
                          "alarm_set",
                          "qa_factoid",
                          "calendar_set",
                          "play_game",
                          "alarm_remove",
                          "lists_remove",
                          "transport_taxi",
                          "recommendation_movies",
                          "iot_coffee",
                          "music_query",
                          "play_podcasts",
                          "lists_query"
                      ],
                      "text_type": "sentence",
                      "type_of_class": "intent"
                  },
                  "type": "add_fields"
              }
          ],
          "task": "tasks.classification.multi_class",
          "templates": "templates.classification.multi_class.all",
          "type": "task_card"
      }

References: :ref:`tasks.classification.multi_class <tasks.classification.multi_class>`, :ref:`templates.classification.multi_class.all <templates.classification.multi_class.all>`

|
|



.. _cards.amazon_mass.bn_BD:

----------

bn_BD
"""""

.. note:: ID: ``cards.amazon_mass.bn_BD``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "bn-BD",
              "path": "AmazonScience/massive",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "mappers": {
                      "intent": {
                          "0": "datetime_query",
                          "1": "iot_hue_lightchange",
                          "10": "qa_currency",
                          "11": "transport_traffic",
                          "12": "general_quirky",
                          "13": "weather_query",
                          "14": "audio_volume_up",
                          "15": "email_addcontact",
                          "16": "takeaway_order",
                          "17": "email_querycontact",
                          "18": "iot_hue_lightup",
                          "19": "recommendation_locations",
                          "2": "transport_ticket",
                          "20": "play_audiobook",
                          "21": "lists_createoradd",
                          "22": "news_query",
                          "23": "alarm_query",
                          "24": "iot_wemo_on",
                          "25": "general_joke",
                          "26": "qa_definition",
                          "27": "social_query",
                          "28": "music_settings",
                          "29": "audio_volume_other",
                          "3": "takeaway_query",
                          "30": "calendar_remove",
                          "31": "iot_hue_lightdim",
                          "32": "calendar_query",
                          "33": "email_sendemail",
                          "34": "iot_cleaning",
                          "35": "audio_volume_down",
                          "36": "play_radio",
                          "37": "cooking_query",
                          "38": "datetime_convert",
                          "39": "qa_maths",
                          "4": "qa_stock",
                          "40": "iot_hue_lightoff",
                          "41": "iot_hue_lighton",
                          "42": "transport_query",
                          "43": "music_likeness",
                          "44": "email_query",
                          "45": "play_music",
                          "46": "audio_volume_mute",
                          "47": "social_post",
                          "48": "alarm_set",
                          "49": "qa_factoid",
                          "5": "general_greet",
                          "50": "calendar_set",
                          "51": "play_game",
                          "52": "alarm_remove",
                          "53": "lists_remove",
                          "54": "transport_taxi",
                          "55": "recommendation_movies",
                          "56": "iot_coffee",
                          "57": "music_query",
                          "58": "play_podcasts",
                          "59": "lists_query",
                          "6": "recommendation_events",
                          "7": "music_dislikeness",
                          "8": "iot_wemo_off",
                          "9": "cooking_recipe"
                      }
                  },
                  "type": "map_instance_values"
              },
              {
                  "field_to_field": {
                      "intent": "label",
                      "utt": "text"
                  },
                  "type": "rename_fields"
              },
              {
                  "fields": {
                      "classes": [
                          "datetime_query",
                          "iot_hue_lightchange",
                          "transport_ticket",
                          "takeaway_query",
                          "qa_stock",
                          "general_greet",
                          "recommendation_events",
                          "music_dislikeness",
                          "iot_wemo_off",
                          "cooking_recipe",
                          "qa_currency",
                          "transport_traffic",
                          "general_quirky",
                          "weather_query",
                          "audio_volume_up",
                          "email_addcontact",
                          "takeaway_order",
                          "email_querycontact",
                          "iot_hue_lightup",
                          "recommendation_locations",
                          "play_audiobook",
                          "lists_createoradd",
                          "news_query",
                          "alarm_query",
                          "iot_wemo_on",
                          "general_joke",
                          "qa_definition",
                          "social_query",
                          "music_settings",
                          "audio_volume_other",
                          "calendar_remove",
                          "iot_hue_lightdim",
                          "calendar_query",
                          "email_sendemail",
                          "iot_cleaning",
                          "audio_volume_down",
                          "play_radio",
                          "cooking_query",
                          "datetime_convert",
                          "qa_maths",
                          "iot_hue_lightoff",
                          "iot_hue_lighton",
                          "transport_query",
                          "music_likeness",
                          "email_query",
                          "play_music",
                          "audio_volume_mute",
                          "social_post",
                          "alarm_set",
                          "qa_factoid",
                          "calendar_set",
                          "play_game",
                          "alarm_remove",
                          "lists_remove",
                          "transport_taxi",
                          "recommendation_movies",
                          "iot_coffee",
                          "music_query",
                          "play_podcasts",
                          "lists_query"
                      ],
                      "text_type": "sentence",
                      "type_of_class": "intent"
                  },
                  "type": "add_fields"
              }
          ],
          "task": "tasks.classification.multi_class",
          "templates": "templates.classification.multi_class.all",
          "type": "task_card"
      }

References: :ref:`tasks.classification.multi_class <tasks.classification.multi_class>`, :ref:`templates.classification.multi_class.all <templates.classification.multi_class.all>`

|
|



.. _cards.amazon_mass.nl_NL:

----------

nl_NL
"""""

.. note:: ID: ``cards.amazon_mass.nl_NL``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "nl-NL",
              "path": "AmazonScience/massive",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "mappers": {
                      "intent": {
                          "0": "datetime_query",
                          "1": "iot_hue_lightchange",
                          "10": "qa_currency",
                          "11": "transport_traffic",
                          "12": "general_quirky",
                          "13": "weather_query",
                          "14": "audio_volume_up",
                          "15": "email_addcontact",
                          "16": "takeaway_order",
                          "17": "email_querycontact",
                          "18": "iot_hue_lightup",
                          "19": "recommendation_locations",
                          "2": "transport_ticket",
                          "20": "play_audiobook",
                          "21": "lists_createoradd",
                          "22": "news_query",
                          "23": "alarm_query",
                          "24": "iot_wemo_on",
                          "25": "general_joke",
                          "26": "qa_definition",
                          "27": "social_query",
                          "28": "music_settings",
                          "29": "audio_volume_other",
                          "3": "takeaway_query",
                          "30": "calendar_remove",
                          "31": "iot_hue_lightdim",
                          "32": "calendar_query",
                          "33": "email_sendemail",
                          "34": "iot_cleaning",
                          "35": "audio_volume_down",
                          "36": "play_radio",
                          "37": "cooking_query",
                          "38": "datetime_convert",
                          "39": "qa_maths",
                          "4": "qa_stock",
                          "40": "iot_hue_lightoff",
                          "41": "iot_hue_lighton",
                          "42": "transport_query",
                          "43": "music_likeness",
                          "44": "email_query",
                          "45": "play_music",
                          "46": "audio_volume_mute",
                          "47": "social_post",
                          "48": "alarm_set",
                          "49": "qa_factoid",
                          "5": "general_greet",
                          "50": "calendar_set",
                          "51": "play_game",
                          "52": "alarm_remove",
                          "53": "lists_remove",
                          "54": "transport_taxi",
                          "55": "recommendation_movies",
                          "56": "iot_coffee",
                          "57": "music_query",
                          "58": "play_podcasts",
                          "59": "lists_query",
                          "6": "recommendation_events",
                          "7": "music_dislikeness",
                          "8": "iot_wemo_off",
                          "9": "cooking_recipe"
                      }
                  },
                  "type": "map_instance_values"
              },
              {
                  "field_to_field": {
                      "intent": "label",
                      "utt": "text"
                  },
                  "type": "rename_fields"
              },
              {
                  "fields": {
                      "classes": [
                          "datetime_query",
                          "iot_hue_lightchange",
                          "transport_ticket",
                          "takeaway_query",
                          "qa_stock",
                          "general_greet",
                          "recommendation_events",
                          "music_dislikeness",
                          "iot_wemo_off",
                          "cooking_recipe",
                          "qa_currency",
                          "transport_traffic",
                          "general_quirky",
                          "weather_query",
                          "audio_volume_up",
                          "email_addcontact",
                          "takeaway_order",
                          "email_querycontact",
                          "iot_hue_lightup",
                          "recommendation_locations",
                          "play_audiobook",
                          "lists_createoradd",
                          "news_query",
                          "alarm_query",
                          "iot_wemo_on",
                          "general_joke",
                          "qa_definition",
                          "social_query",
                          "music_settings",
                          "audio_volume_other",
                          "calendar_remove",
                          "iot_hue_lightdim",
                          "calendar_query",
                          "email_sendemail",
                          "iot_cleaning",
                          "audio_volume_down",
                          "play_radio",
                          "cooking_query",
                          "datetime_convert",
                          "qa_maths",
                          "iot_hue_lightoff",
                          "iot_hue_lighton",
                          "transport_query",
                          "music_likeness",
                          "email_query",
                          "play_music",
                          "audio_volume_mute",
                          "social_post",
                          "alarm_set",
                          "qa_factoid",
                          "calendar_set",
                          "play_game",
                          "alarm_remove",
                          "lists_remove",
                          "transport_taxi",
                          "recommendation_movies",
                          "iot_coffee",
                          "music_query",
                          "play_podcasts",
                          "lists_query"
                      ],
                      "text_type": "sentence",
                      "type_of_class": "intent"
                  },
                  "type": "add_fields"
              }
          ],
          "task": "tasks.classification.multi_class",
          "templates": "templates.classification.multi_class.all",
          "type": "task_card"
      }

References: :ref:`tasks.classification.multi_class <tasks.classification.multi_class>`, :ref:`templates.classification.multi_class.all <templates.classification.multi_class.all>`

|
|



.. _cards.amazon_mass.zh_CN:

----------

zh_CN
"""""

.. note:: ID: ``cards.amazon_mass.zh_CN``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "zh-CN",
              "path": "AmazonScience/massive",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "mappers": {
                      "intent": {
                          "0": "datetime_query",
                          "1": "iot_hue_lightchange",
                          "10": "qa_currency",
                          "11": "transport_traffic",
                          "12": "general_quirky",
                          "13": "weather_query",
                          "14": "audio_volume_up",
                          "15": "email_addcontact",
                          "16": "takeaway_order",
                          "17": "email_querycontact",
                          "18": "iot_hue_lightup",
                          "19": "recommendation_locations",
                          "2": "transport_ticket",
                          "20": "play_audiobook",
                          "21": "lists_createoradd",
                          "22": "news_query",
                          "23": "alarm_query",
                          "24": "iot_wemo_on",
                          "25": "general_joke",
                          "26": "qa_definition",
                          "27": "social_query",
                          "28": "music_settings",
                          "29": "audio_volume_other",
                          "3": "takeaway_query",
                          "30": "calendar_remove",
                          "31": "iot_hue_lightdim",
                          "32": "calendar_query",
                          "33": "email_sendemail",
                          "34": "iot_cleaning",
                          "35": "audio_volume_down",
                          "36": "play_radio",
                          "37": "cooking_query",
                          "38": "datetime_convert",
                          "39": "qa_maths",
                          "4": "qa_stock",
                          "40": "iot_hue_lightoff",
                          "41": "iot_hue_lighton",
                          "42": "transport_query",
                          "43": "music_likeness",
                          "44": "email_query",
                          "45": "play_music",
                          "46": "audio_volume_mute",
                          "47": "social_post",
                          "48": "alarm_set",
                          "49": "qa_factoid",
                          "5": "general_greet",
                          "50": "calendar_set",
                          "51": "play_game",
                          "52": "alarm_remove",
                          "53": "lists_remove",
                          "54": "transport_taxi",
                          "55": "recommendation_movies",
                          "56": "iot_coffee",
                          "57": "music_query",
                          "58": "play_podcasts",
                          "59": "lists_query",
                          "6": "recommendation_events",
                          "7": "music_dislikeness",
                          "8": "iot_wemo_off",
                          "9": "cooking_recipe"
                      }
                  },
                  "type": "map_instance_values"
              },
              {
                  "field_to_field": {
                      "intent": "label",
                      "utt": "text"
                  },
                  "type": "rename_fields"
              },
              {
                  "fields": {
                      "classes": [
                          "datetime_query",
                          "iot_hue_lightchange",
                          "transport_ticket",
                          "takeaway_query",
                          "qa_stock",
                          "general_greet",
                          "recommendation_events",
                          "music_dislikeness",
                          "iot_wemo_off",
                          "cooking_recipe",
                          "qa_currency",
                          "transport_traffic",
                          "general_quirky",
                          "weather_query",
                          "audio_volume_up",
                          "email_addcontact",
                          "takeaway_order",
                          "email_querycontact",
                          "iot_hue_lightup",
                          "recommendation_locations",
                          "play_audiobook",
                          "lists_createoradd",
                          "news_query",
                          "alarm_query",
                          "iot_wemo_on",
                          "general_joke",
                          "qa_definition",
                          "social_query",
                          "music_settings",
                          "audio_volume_other",
                          "calendar_remove",
                          "iot_hue_lightdim",
                          "calendar_query",
                          "email_sendemail",
                          "iot_cleaning",
                          "audio_volume_down",
                          "play_radio",
                          "cooking_query",
                          "datetime_convert",
                          "qa_maths",
                          "iot_hue_lightoff",
                          "iot_hue_lighton",
                          "transport_query",
                          "music_likeness",
                          "email_query",
                          "play_music",
                          "audio_volume_mute",
                          "social_post",
                          "alarm_set",
                          "qa_factoid",
                          "calendar_set",
                          "play_game",
                          "alarm_remove",
                          "lists_remove",
                          "transport_taxi",
                          "recommendation_movies",
                          "iot_coffee",
                          "music_query",
                          "play_podcasts",
                          "lists_query"
                      ],
                      "text_type": "sentence",
                      "type_of_class": "intent"
                  },
                  "type": "add_fields"
              }
          ],
          "task": "tasks.classification.multi_class",
          "templates": "templates.classification.multi_class.all",
          "type": "task_card"
      }

References: :ref:`tasks.classification.multi_class <tasks.classification.multi_class>`, :ref:`templates.classification.multi_class.all <templates.classification.multi_class.all>`

|
|



.. _cards.amazon_mass.zh_TW:

----------

zh_TW
"""""

.. note:: ID: ``cards.amazon_mass.zh_TW``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "zh-TW",
              "path": "AmazonScience/massive",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "mappers": {
                      "intent": {
                          "0": "datetime_query",
                          "1": "iot_hue_lightchange",
                          "10": "qa_currency",
                          "11": "transport_traffic",
                          "12": "general_quirky",
                          "13": "weather_query",
                          "14": "audio_volume_up",
                          "15": "email_addcontact",
                          "16": "takeaway_order",
                          "17": "email_querycontact",
                          "18": "iot_hue_lightup",
                          "19": "recommendation_locations",
                          "2": "transport_ticket",
                          "20": "play_audiobook",
                          "21": "lists_createoradd",
                          "22": "news_query",
                          "23": "alarm_query",
                          "24": "iot_wemo_on",
                          "25": "general_joke",
                          "26": "qa_definition",
                          "27": "social_query",
                          "28": "music_settings",
                          "29": "audio_volume_other",
                          "3": "takeaway_query",
                          "30": "calendar_remove",
                          "31": "iot_hue_lightdim",
                          "32": "calendar_query",
                          "33": "email_sendemail",
                          "34": "iot_cleaning",
                          "35": "audio_volume_down",
                          "36": "play_radio",
                          "37": "cooking_query",
                          "38": "datetime_convert",
                          "39": "qa_maths",
                          "4": "qa_stock",
                          "40": "iot_hue_lightoff",
                          "41": "iot_hue_lighton",
                          "42": "transport_query",
                          "43": "music_likeness",
                          "44": "email_query",
                          "45": "play_music",
                          "46": "audio_volume_mute",
                          "47": "social_post",
                          "48": "alarm_set",
                          "49": "qa_factoid",
                          "5": "general_greet",
                          "50": "calendar_set",
                          "51": "play_game",
                          "52": "alarm_remove",
                          "53": "lists_remove",
                          "54": "transport_taxi",
                          "55": "recommendation_movies",
                          "56": "iot_coffee",
                          "57": "music_query",
                          "58": "play_podcasts",
                          "59": "lists_query",
                          "6": "recommendation_events",
                          "7": "music_dislikeness",
                          "8": "iot_wemo_off",
                          "9": "cooking_recipe"
                      }
                  },
                  "type": "map_instance_values"
              },
              {
                  "field_to_field": {
                      "intent": "label",
                      "utt": "text"
                  },
                  "type": "rename_fields"
              },
              {
                  "fields": {
                      "classes": [
                          "datetime_query",
                          "iot_hue_lightchange",
                          "transport_ticket",
                          "takeaway_query",
                          "qa_stock",
                          "general_greet",
                          "recommendation_events",
                          "music_dislikeness",
                          "iot_wemo_off",
                          "cooking_recipe",
                          "qa_currency",
                          "transport_traffic",
                          "general_quirky",
                          "weather_query",
                          "audio_volume_up",
                          "email_addcontact",
                          "takeaway_order",
                          "email_querycontact",
                          "iot_hue_lightup",
                          "recommendation_locations",
                          "play_audiobook",
                          "lists_createoradd",
                          "news_query",
                          "alarm_query",
                          "iot_wemo_on",
                          "general_joke",
                          "qa_definition",
                          "social_query",
                          "music_settings",
                          "audio_volume_other",
                          "calendar_remove",
                          "iot_hue_lightdim",
                          "calendar_query",
                          "email_sendemail",
                          "iot_cleaning",
                          "audio_volume_down",
                          "play_radio",
                          "cooking_query",
                          "datetime_convert",
                          "qa_maths",
                          "iot_hue_lightoff",
                          "iot_hue_lighton",
                          "transport_query",
                          "music_likeness",
                          "email_query",
                          "play_music",
                          "audio_volume_mute",
                          "social_post",
                          "alarm_set",
                          "qa_factoid",
                          "calendar_set",
                          "play_game",
                          "alarm_remove",
                          "lists_remove",
                          "transport_taxi",
                          "recommendation_movies",
                          "iot_coffee",
                          "music_query",
                          "play_podcasts",
                          "lists_query"
                      ],
                      "text_type": "sentence",
                      "type_of_class": "intent"
                  },
                  "type": "add_fields"
              }
          ],
          "task": "tasks.classification.multi_class",
          "templates": "templates.classification.multi_class.all",
          "type": "task_card"
      }

References: :ref:`tasks.classification.multi_class <tasks.classification.multi_class>`, :ref:`templates.classification.multi_class.all <templates.classification.multi_class.all>`

|
|



.. _cards.amazon_mass.fr_FR:

----------

fr_FR
"""""

.. note:: ID: ``cards.amazon_mass.fr_FR``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "fr-FR",
              "path": "AmazonScience/massive",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "mappers": {
                      "intent": {
                          "0": "datetime_query",
                          "1": "iot_hue_lightchange",
                          "10": "qa_currency",
                          "11": "transport_traffic",
                          "12": "general_quirky",
                          "13": "weather_query",
                          "14": "audio_volume_up",
                          "15": "email_addcontact",
                          "16": "takeaway_order",
                          "17": "email_querycontact",
                          "18": "iot_hue_lightup",
                          "19": "recommendation_locations",
                          "2": "transport_ticket",
                          "20": "play_audiobook",
                          "21": "lists_createoradd",
                          "22": "news_query",
                          "23": "alarm_query",
                          "24": "iot_wemo_on",
                          "25": "general_joke",
                          "26": "qa_definition",
                          "27": "social_query",
                          "28": "music_settings",
                          "29": "audio_volume_other",
                          "3": "takeaway_query",
                          "30": "calendar_remove",
                          "31": "iot_hue_lightdim",
                          "32": "calendar_query",
                          "33": "email_sendemail",
                          "34": "iot_cleaning",
                          "35": "audio_volume_down",
                          "36": "play_radio",
                          "37": "cooking_query",
                          "38": "datetime_convert",
                          "39": "qa_maths",
                          "4": "qa_stock",
                          "40": "iot_hue_lightoff",
                          "41": "iot_hue_lighton",
                          "42": "transport_query",
                          "43": "music_likeness",
                          "44": "email_query",
                          "45": "play_music",
                          "46": "audio_volume_mute",
                          "47": "social_post",
                          "48": "alarm_set",
                          "49": "qa_factoid",
                          "5": "general_greet",
                          "50": "calendar_set",
                          "51": "play_game",
                          "52": "alarm_remove",
                          "53": "lists_remove",
                          "54": "transport_taxi",
                          "55": "recommendation_movies",
                          "56": "iot_coffee",
                          "57": "music_query",
                          "58": "play_podcasts",
                          "59": "lists_query",
                          "6": "recommendation_events",
                          "7": "music_dislikeness",
                          "8": "iot_wemo_off",
                          "9": "cooking_recipe"
                      }
                  },
                  "type": "map_instance_values"
              },
              {
                  "field_to_field": {
                      "intent": "label",
                      "utt": "text"
                  },
                  "type": "rename_fields"
              },
              {
                  "fields": {
                      "classes": [
                          "datetime_query",
                          "iot_hue_lightchange",
                          "transport_ticket",
                          "takeaway_query",
                          "qa_stock",
                          "general_greet",
                          "recommendation_events",
                          "music_dislikeness",
                          "iot_wemo_off",
                          "cooking_recipe",
                          "qa_currency",
                          "transport_traffic",
                          "general_quirky",
                          "weather_query",
                          "audio_volume_up",
                          "email_addcontact",
                          "takeaway_order",
                          "email_querycontact",
                          "iot_hue_lightup",
                          "recommendation_locations",
                          "play_audiobook",
                          "lists_createoradd",
                          "news_query",
                          "alarm_query",
                          "iot_wemo_on",
                          "general_joke",
                          "qa_definition",
                          "social_query",
                          "music_settings",
                          "audio_volume_other",
                          "calendar_remove",
                          "iot_hue_lightdim",
                          "calendar_query",
                          "email_sendemail",
                          "iot_cleaning",
                          "audio_volume_down",
                          "play_radio",
                          "cooking_query",
                          "datetime_convert",
                          "qa_maths",
                          "iot_hue_lightoff",
                          "iot_hue_lighton",
                          "transport_query",
                          "music_likeness",
                          "email_query",
                          "play_music",
                          "audio_volume_mute",
                          "social_post",
                          "alarm_set",
                          "qa_factoid",
                          "calendar_set",
                          "play_game",
                          "alarm_remove",
                          "lists_remove",
                          "transport_taxi",
                          "recommendation_movies",
                          "iot_coffee",
                          "music_query",
                          "play_podcasts",
                          "lists_query"
                      ],
                      "text_type": "sentence",
                      "type_of_class": "intent"
                  },
                  "type": "add_fields"
              }
          ],
          "task": "tasks.classification.multi_class",
          "templates": "templates.classification.multi_class.all",
          "type": "task_card"
      }

References: :ref:`tasks.classification.multi_class <tasks.classification.multi_class>`, :ref:`templates.classification.multi_class.all <templates.classification.multi_class.all>`

|
|



.. _cards.amazon_mass.hi_IN:

----------

hi_IN
"""""

.. note:: ID: ``cards.amazon_mass.hi_IN``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "hi-IN",
              "path": "AmazonScience/massive",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "mappers": {
                      "intent": {
                          "0": "datetime_query",
                          "1": "iot_hue_lightchange",
                          "10": "qa_currency",
                          "11": "transport_traffic",
                          "12": "general_quirky",
                          "13": "weather_query",
                          "14": "audio_volume_up",
                          "15": "email_addcontact",
                          "16": "takeaway_order",
                          "17": "email_querycontact",
                          "18": "iot_hue_lightup",
                          "19": "recommendation_locations",
                          "2": "transport_ticket",
                          "20": "play_audiobook",
                          "21": "lists_createoradd",
                          "22": "news_query",
                          "23": "alarm_query",
                          "24": "iot_wemo_on",
                          "25": "general_joke",
                          "26": "qa_definition",
                          "27": "social_query",
                          "28": "music_settings",
                          "29": "audio_volume_other",
                          "3": "takeaway_query",
                          "30": "calendar_remove",
                          "31": "iot_hue_lightdim",
                          "32": "calendar_query",
                          "33": "email_sendemail",
                          "34": "iot_cleaning",
                          "35": "audio_volume_down",
                          "36": "play_radio",
                          "37": "cooking_query",
                          "38": "datetime_convert",
                          "39": "qa_maths",
                          "4": "qa_stock",
                          "40": "iot_hue_lightoff",
                          "41": "iot_hue_lighton",
                          "42": "transport_query",
                          "43": "music_likeness",
                          "44": "email_query",
                          "45": "play_music",
                          "46": "audio_volume_mute",
                          "47": "social_post",
                          "48": "alarm_set",
                          "49": "qa_factoid",
                          "5": "general_greet",
                          "50": "calendar_set",
                          "51": "play_game",
                          "52": "alarm_remove",
                          "53": "lists_remove",
                          "54": "transport_taxi",
                          "55": "recommendation_movies",
                          "56": "iot_coffee",
                          "57": "music_query",
                          "58": "play_podcasts",
                          "59": "lists_query",
                          "6": "recommendation_events",
                          "7": "music_dislikeness",
                          "8": "iot_wemo_off",
                          "9": "cooking_recipe"
                      }
                  },
                  "type": "map_instance_values"
              },
              {
                  "field_to_field": {
                      "intent": "label",
                      "utt": "text"
                  },
                  "type": "rename_fields"
              },
              {
                  "fields": {
                      "classes": [
                          "datetime_query",
                          "iot_hue_lightchange",
                          "transport_ticket",
                          "takeaway_query",
                          "qa_stock",
                          "general_greet",
                          "recommendation_events",
                          "music_dislikeness",
                          "iot_wemo_off",
                          "cooking_recipe",
                          "qa_currency",
                          "transport_traffic",
                          "general_quirky",
                          "weather_query",
                          "audio_volume_up",
                          "email_addcontact",
                          "takeaway_order",
                          "email_querycontact",
                          "iot_hue_lightup",
                          "recommendation_locations",
                          "play_audiobook",
                          "lists_createoradd",
                          "news_query",
                          "alarm_query",
                          "iot_wemo_on",
                          "general_joke",
                          "qa_definition",
                          "social_query",
                          "music_settings",
                          "audio_volume_other",
                          "calendar_remove",
                          "iot_hue_lightdim",
                          "calendar_query",
                          "email_sendemail",
                          "iot_cleaning",
                          "audio_volume_down",
                          "play_radio",
                          "cooking_query",
                          "datetime_convert",
                          "qa_maths",
                          "iot_hue_lightoff",
                          "iot_hue_lighton",
                          "transport_query",
                          "music_likeness",
                          "email_query",
                          "play_music",
                          "audio_volume_mute",
                          "social_post",
                          "alarm_set",
                          "qa_factoid",
                          "calendar_set",
                          "play_game",
                          "alarm_remove",
                          "lists_remove",
                          "transport_taxi",
                          "recommendation_movies",
                          "iot_coffee",
                          "music_query",
                          "play_podcasts",
                          "lists_query"
                      ],
                      "text_type": "sentence",
                      "type_of_class": "intent"
                  },
                  "type": "add_fields"
              }
          ],
          "task": "tasks.classification.multi_class",
          "templates": "templates.classification.multi_class.all",
          "type": "task_card"
      }

References: :ref:`tasks.classification.multi_class <tasks.classification.multi_class>`, :ref:`templates.classification.multi_class.all <templates.classification.multi_class.all>`

|
|



.. _cards.amazon_mass.am_ET:

----------

am_ET
"""""

.. note:: ID: ``cards.amazon_mass.am_ET``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "am-ET",
              "path": "AmazonScience/massive",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "mappers": {
                      "intent": {
                          "0": "datetime_query",
                          "1": "iot_hue_lightchange",
                          "10": "qa_currency",
                          "11": "transport_traffic",
                          "12": "general_quirky",
                          "13": "weather_query",
                          "14": "audio_volume_up",
                          "15": "email_addcontact",
                          "16": "takeaway_order",
                          "17": "email_querycontact",
                          "18": "iot_hue_lightup",
                          "19": "recommendation_locations",
                          "2": "transport_ticket",
                          "20": "play_audiobook",
                          "21": "lists_createoradd",
                          "22": "news_query",
                          "23": "alarm_query",
                          "24": "iot_wemo_on",
                          "25": "general_joke",
                          "26": "qa_definition",
                          "27": "social_query",
                          "28": "music_settings",
                          "29": "audio_volume_other",
                          "3": "takeaway_query",
                          "30": "calendar_remove",
                          "31": "iot_hue_lightdim",
                          "32": "calendar_query",
                          "33": "email_sendemail",
                          "34": "iot_cleaning",
                          "35": "audio_volume_down",
                          "36": "play_radio",
                          "37": "cooking_query",
                          "38": "datetime_convert",
                          "39": "qa_maths",
                          "4": "qa_stock",
                          "40": "iot_hue_lightoff",
                          "41": "iot_hue_lighton",
                          "42": "transport_query",
                          "43": "music_likeness",
                          "44": "email_query",
                          "45": "play_music",
                          "46": "audio_volume_mute",
                          "47": "social_post",
                          "48": "alarm_set",
                          "49": "qa_factoid",
                          "5": "general_greet",
                          "50": "calendar_set",
                          "51": "play_game",
                          "52": "alarm_remove",
                          "53": "lists_remove",
                          "54": "transport_taxi",
                          "55": "recommendation_movies",
                          "56": "iot_coffee",
                          "57": "music_query",
                          "58": "play_podcasts",
                          "59": "lists_query",
                          "6": "recommendation_events",
                          "7": "music_dislikeness",
                          "8": "iot_wemo_off",
                          "9": "cooking_recipe"
                      }
                  },
                  "type": "map_instance_values"
              },
              {
                  "field_to_field": {
                      "intent": "label",
                      "utt": "text"
                  },
                  "type": "rename_fields"
              },
              {
                  "fields": {
                      "classes": [
                          "datetime_query",
                          "iot_hue_lightchange",
                          "transport_ticket",
                          "takeaway_query",
                          "qa_stock",
                          "general_greet",
                          "recommendation_events",
                          "music_dislikeness",
                          "iot_wemo_off",
                          "cooking_recipe",
                          "qa_currency",
                          "transport_traffic",
                          "general_quirky",
                          "weather_query",
                          "audio_volume_up",
                          "email_addcontact",
                          "takeaway_order",
                          "email_querycontact",
                          "iot_hue_lightup",
                          "recommendation_locations",
                          "play_audiobook",
                          "lists_createoradd",
                          "news_query",
                          "alarm_query",
                          "iot_wemo_on",
                          "general_joke",
                          "qa_definition",
                          "social_query",
                          "music_settings",
                          "audio_volume_other",
                          "calendar_remove",
                          "iot_hue_lightdim",
                          "calendar_query",
                          "email_sendemail",
                          "iot_cleaning",
                          "audio_volume_down",
                          "play_radio",
                          "cooking_query",
                          "datetime_convert",
                          "qa_maths",
                          "iot_hue_lightoff",
                          "iot_hue_lighton",
                          "transport_query",
                          "music_likeness",
                          "email_query",
                          "play_music",
                          "audio_volume_mute",
                          "social_post",
                          "alarm_set",
                          "qa_factoid",
                          "calendar_set",
                          "play_game",
                          "alarm_remove",
                          "lists_remove",
                          "transport_taxi",
                          "recommendation_movies",
                          "iot_coffee",
                          "music_query",
                          "play_podcasts",
                          "lists_query"
                      ],
                      "text_type": "sentence",
                      "type_of_class": "intent"
                  },
                  "type": "add_fields"
              }
          ],
          "task": "tasks.classification.multi_class",
          "templates": "templates.classification.multi_class.all",
          "type": "task_card"
      }

References: :ref:`tasks.classification.multi_class <tasks.classification.multi_class>`, :ref:`templates.classification.multi_class.all <templates.classification.multi_class.all>`

|
|



.. _cards.amazon_mass.ro_RO:

----------

ro_RO
"""""

.. note:: ID: ``cards.amazon_mass.ro_RO``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "ro-RO",
              "path": "AmazonScience/massive",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "mappers": {
                      "intent": {
                          "0": "datetime_query",
                          "1": "iot_hue_lightchange",
                          "10": "qa_currency",
                          "11": "transport_traffic",
                          "12": "general_quirky",
                          "13": "weather_query",
                          "14": "audio_volume_up",
                          "15": "email_addcontact",
                          "16": "takeaway_order",
                          "17": "email_querycontact",
                          "18": "iot_hue_lightup",
                          "19": "recommendation_locations",
                          "2": "transport_ticket",
                          "20": "play_audiobook",
                          "21": "lists_createoradd",
                          "22": "news_query",
                          "23": "alarm_query",
                          "24": "iot_wemo_on",
                          "25": "general_joke",
                          "26": "qa_definition",
                          "27": "social_query",
                          "28": "music_settings",
                          "29": "audio_volume_other",
                          "3": "takeaway_query",
                          "30": "calendar_remove",
                          "31": "iot_hue_lightdim",
                          "32": "calendar_query",
                          "33": "email_sendemail",
                          "34": "iot_cleaning",
                          "35": "audio_volume_down",
                          "36": "play_radio",
                          "37": "cooking_query",
                          "38": "datetime_convert",
                          "39": "qa_maths",
                          "4": "qa_stock",
                          "40": "iot_hue_lightoff",
                          "41": "iot_hue_lighton",
                          "42": "transport_query",
                          "43": "music_likeness",
                          "44": "email_query",
                          "45": "play_music",
                          "46": "audio_volume_mute",
                          "47": "social_post",
                          "48": "alarm_set",
                          "49": "qa_factoid",
                          "5": "general_greet",
                          "50": "calendar_set",
                          "51": "play_game",
                          "52": "alarm_remove",
                          "53": "lists_remove",
                          "54": "transport_taxi",
                          "55": "recommendation_movies",
                          "56": "iot_coffee",
                          "57": "music_query",
                          "58": "play_podcasts",
                          "59": "lists_query",
                          "6": "recommendation_events",
                          "7": "music_dislikeness",
                          "8": "iot_wemo_off",
                          "9": "cooking_recipe"
                      }
                  },
                  "type": "map_instance_values"
              },
              {
                  "field_to_field": {
                      "intent": "label",
                      "utt": "text"
                  },
                  "type": "rename_fields"
              },
              {
                  "fields": {
                      "classes": [
                          "datetime_query",
                          "iot_hue_lightchange",
                          "transport_ticket",
                          "takeaway_query",
                          "qa_stock",
                          "general_greet",
                          "recommendation_events",
                          "music_dislikeness",
                          "iot_wemo_off",
                          "cooking_recipe",
                          "qa_currency",
                          "transport_traffic",
                          "general_quirky",
                          "weather_query",
                          "audio_volume_up",
                          "email_addcontact",
                          "takeaway_order",
                          "email_querycontact",
                          "iot_hue_lightup",
                          "recommendation_locations",
                          "play_audiobook",
                          "lists_createoradd",
                          "news_query",
                          "alarm_query",
                          "iot_wemo_on",
                          "general_joke",
                          "qa_definition",
                          "social_query",
                          "music_settings",
                          "audio_volume_other",
                          "calendar_remove",
                          "iot_hue_lightdim",
                          "calendar_query",
                          "email_sendemail",
                          "iot_cleaning",
                          "audio_volume_down",
                          "play_radio",
                          "cooking_query",
                          "datetime_convert",
                          "qa_maths",
                          "iot_hue_lightoff",
                          "iot_hue_lighton",
                          "transport_query",
                          "music_likeness",
                          "email_query",
                          "play_music",
                          "audio_volume_mute",
                          "social_post",
                          "alarm_set",
                          "qa_factoid",
                          "calendar_set",
                          "play_game",
                          "alarm_remove",
                          "lists_remove",
                          "transport_taxi",
                          "recommendation_movies",
                          "iot_coffee",
                          "music_query",
                          "play_podcasts",
                          "lists_query"
                      ],
                      "text_type": "sentence",
                      "type_of_class": "intent"
                  },
                  "type": "add_fields"
              }
          ],
          "task": "tasks.classification.multi_class",
          "templates": "templates.classification.multi_class.all",
          "type": "task_card"
      }

References: :ref:`tasks.classification.multi_class <tasks.classification.multi_class>`, :ref:`templates.classification.multi_class.all <templates.classification.multi_class.all>`

|
|



.. _cards.amazon_mass.pl_PL:

----------

pl_PL
"""""

.. note:: ID: ``cards.amazon_mass.pl_PL``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "pl-PL",
              "path": "AmazonScience/massive",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "mappers": {
                      "intent": {
                          "0": "datetime_query",
                          "1": "iot_hue_lightchange",
                          "10": "qa_currency",
                          "11": "transport_traffic",
                          "12": "general_quirky",
                          "13": "weather_query",
                          "14": "audio_volume_up",
                          "15": "email_addcontact",
                          "16": "takeaway_order",
                          "17": "email_querycontact",
                          "18": "iot_hue_lightup",
                          "19": "recommendation_locations",
                          "2": "transport_ticket",
                          "20": "play_audiobook",
                          "21": "lists_createoradd",
                          "22": "news_query",
                          "23": "alarm_query",
                          "24": "iot_wemo_on",
                          "25": "general_joke",
                          "26": "qa_definition",
                          "27": "social_query",
                          "28": "music_settings",
                          "29": "audio_volume_other",
                          "3": "takeaway_query",
                          "30": "calendar_remove",
                          "31": "iot_hue_lightdim",
                          "32": "calendar_query",
                          "33": "email_sendemail",
                          "34": "iot_cleaning",
                          "35": "audio_volume_down",
                          "36": "play_radio",
                          "37": "cooking_query",
                          "38": "datetime_convert",
                          "39": "qa_maths",
                          "4": "qa_stock",
                          "40": "iot_hue_lightoff",
                          "41": "iot_hue_lighton",
                          "42": "transport_query",
                          "43": "music_likeness",
                          "44": "email_query",
                          "45": "play_music",
                          "46": "audio_volume_mute",
                          "47": "social_post",
                          "48": "alarm_set",
                          "49": "qa_factoid",
                          "5": "general_greet",
                          "50": "calendar_set",
                          "51": "play_game",
                          "52": "alarm_remove",
                          "53": "lists_remove",
                          "54": "transport_taxi",
                          "55": "recommendation_movies",
                          "56": "iot_coffee",
                          "57": "music_query",
                          "58": "play_podcasts",
                          "59": "lists_query",
                          "6": "recommendation_events",
                          "7": "music_dislikeness",
                          "8": "iot_wemo_off",
                          "9": "cooking_recipe"
                      }
                  },
                  "type": "map_instance_values"
              },
              {
                  "field_to_field": {
                      "intent": "label",
                      "utt": "text"
                  },
                  "type": "rename_fields"
              },
              {
                  "fields": {
                      "classes": [
                          "datetime_query",
                          "iot_hue_lightchange",
                          "transport_ticket",
                          "takeaway_query",
                          "qa_stock",
                          "general_greet",
                          "recommendation_events",
                          "music_dislikeness",
                          "iot_wemo_off",
                          "cooking_recipe",
                          "qa_currency",
                          "transport_traffic",
                          "general_quirky",
                          "weather_query",
                          "audio_volume_up",
                          "email_addcontact",
                          "takeaway_order",
                          "email_querycontact",
                          "iot_hue_lightup",
                          "recommendation_locations",
                          "play_audiobook",
                          "lists_createoradd",
                          "news_query",
                          "alarm_query",
                          "iot_wemo_on",
                          "general_joke",
                          "qa_definition",
                          "social_query",
                          "music_settings",
                          "audio_volume_other",
                          "calendar_remove",
                          "iot_hue_lightdim",
                          "calendar_query",
                          "email_sendemail",
                          "iot_cleaning",
                          "audio_volume_down",
                          "play_radio",
                          "cooking_query",
                          "datetime_convert",
                          "qa_maths",
                          "iot_hue_lightoff",
                          "iot_hue_lighton",
                          "transport_query",
                          "music_likeness",
                          "email_query",
                          "play_music",
                          "audio_volume_mute",
                          "social_post",
                          "alarm_set",
                          "qa_factoid",
                          "calendar_set",
                          "play_game",
                          "alarm_remove",
                          "lists_remove",
                          "transport_taxi",
                          "recommendation_movies",
                          "iot_coffee",
                          "music_query",
                          "play_podcasts",
                          "lists_query"
                      ],
                      "text_type": "sentence",
                      "type_of_class": "intent"
                  },
                  "type": "add_fields"
              }
          ],
          "task": "tasks.classification.multi_class",
          "templates": "templates.classification.multi_class.all",
          "type": "task_card"
      }

References: :ref:`tasks.classification.multi_class <tasks.classification.multi_class>`, :ref:`templates.classification.multi_class.all <templates.classification.multi_class.all>`

|
|



.. _cards.amazon_mass.en_US:

----------

en_US
"""""

.. note:: ID: ``cards.amazon_mass.en_US``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "en-US",
              "path": "AmazonScience/massive",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "mappers": {
                      "intent": {
                          "0": "datetime_query",
                          "1": "iot_hue_lightchange",
                          "10": "qa_currency",
                          "11": "transport_traffic",
                          "12": "general_quirky",
                          "13": "weather_query",
                          "14": "audio_volume_up",
                          "15": "email_addcontact",
                          "16": "takeaway_order",
                          "17": "email_querycontact",
                          "18": "iot_hue_lightup",
                          "19": "recommendation_locations",
                          "2": "transport_ticket",
                          "20": "play_audiobook",
                          "21": "lists_createoradd",
                          "22": "news_query",
                          "23": "alarm_query",
                          "24": "iot_wemo_on",
                          "25": "general_joke",
                          "26": "qa_definition",
                          "27": "social_query",
                          "28": "music_settings",
                          "29": "audio_volume_other",
                          "3": "takeaway_query",
                          "30": "calendar_remove",
                          "31": "iot_hue_lightdim",
                          "32": "calendar_query",
                          "33": "email_sendemail",
                          "34": "iot_cleaning",
                          "35": "audio_volume_down",
                          "36": "play_radio",
                          "37": "cooking_query",
                          "38": "datetime_convert",
                          "39": "qa_maths",
                          "4": "qa_stock",
                          "40": "iot_hue_lightoff",
                          "41": "iot_hue_lighton",
                          "42": "transport_query",
                          "43": "music_likeness",
                          "44": "email_query",
                          "45": "play_music",
                          "46": "audio_volume_mute",
                          "47": "social_post",
                          "48": "alarm_set",
                          "49": "qa_factoid",
                          "5": "general_greet",
                          "50": "calendar_set",
                          "51": "play_game",
                          "52": "alarm_remove",
                          "53": "lists_remove",
                          "54": "transport_taxi",
                          "55": "recommendation_movies",
                          "56": "iot_coffee",
                          "57": "music_query",
                          "58": "play_podcasts",
                          "59": "lists_query",
                          "6": "recommendation_events",
                          "7": "music_dislikeness",
                          "8": "iot_wemo_off",
                          "9": "cooking_recipe"
                      }
                  },
                  "type": "map_instance_values"
              },
              {
                  "field_to_field": {
                      "intent": "label",
                      "utt": "text"
                  },
                  "type": "rename_fields"
              },
              {
                  "fields": {
                      "classes": [
                          "datetime_query",
                          "iot_hue_lightchange",
                          "transport_ticket",
                          "takeaway_query",
                          "qa_stock",
                          "general_greet",
                          "recommendation_events",
                          "music_dislikeness",
                          "iot_wemo_off",
                          "cooking_recipe",
                          "qa_currency",
                          "transport_traffic",
                          "general_quirky",
                          "weather_query",
                          "audio_volume_up",
                          "email_addcontact",
                          "takeaway_order",
                          "email_querycontact",
                          "iot_hue_lightup",
                          "recommendation_locations",
                          "play_audiobook",
                          "lists_createoradd",
                          "news_query",
                          "alarm_query",
                          "iot_wemo_on",
                          "general_joke",
                          "qa_definition",
                          "social_query",
                          "music_settings",
                          "audio_volume_other",
                          "calendar_remove",
                          "iot_hue_lightdim",
                          "calendar_query",
                          "email_sendemail",
                          "iot_cleaning",
                          "audio_volume_down",
                          "play_radio",
                          "cooking_query",
                          "datetime_convert",
                          "qa_maths",
                          "iot_hue_lightoff",
                          "iot_hue_lighton",
                          "transport_query",
                          "music_likeness",
                          "email_query",
                          "play_music",
                          "audio_volume_mute",
                          "social_post",
                          "alarm_set",
                          "qa_factoid",
                          "calendar_set",
                          "play_game",
                          "alarm_remove",
                          "lists_remove",
                          "transport_taxi",
                          "recommendation_movies",
                          "iot_coffee",
                          "music_query",
                          "play_podcasts",
                          "lists_query"
                      ],
                      "text_type": "sentence",
                      "type_of_class": "intent"
                  },
                  "type": "add_fields"
              }
          ],
          "task": "tasks.classification.multi_class",
          "templates": "templates.classification.multi_class.all",
          "type": "task_card"
      }

References: :ref:`tasks.classification.multi_class <tasks.classification.multi_class>`, :ref:`templates.classification.multi_class.all <templates.classification.multi_class.all>`

|
|



.. _cards.amazon_mass.az_AZ:

----------

az_AZ
"""""

.. note:: ID: ``cards.amazon_mass.az_AZ``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "az-AZ",
              "path": "AmazonScience/massive",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "mappers": {
                      "intent": {
                          "0": "datetime_query",
                          "1": "iot_hue_lightchange",
                          "10": "qa_currency",
                          "11": "transport_traffic",
                          "12": "general_quirky",
                          "13": "weather_query",
                          "14": "audio_volume_up",
                          "15": "email_addcontact",
                          "16": "takeaway_order",
                          "17": "email_querycontact",
                          "18": "iot_hue_lightup",
                          "19": "recommendation_locations",
                          "2": "transport_ticket",
                          "20": "play_audiobook",
                          "21": "lists_createoradd",
                          "22": "news_query",
                          "23": "alarm_query",
                          "24": "iot_wemo_on",
                          "25": "general_joke",
                          "26": "qa_definition",
                          "27": "social_query",
                          "28": "music_settings",
                          "29": "audio_volume_other",
                          "3": "takeaway_query",
                          "30": "calendar_remove",
                          "31": "iot_hue_lightdim",
                          "32": "calendar_query",
                          "33": "email_sendemail",
                          "34": "iot_cleaning",
                          "35": "audio_volume_down",
                          "36": "play_radio",
                          "37": "cooking_query",
                          "38": "datetime_convert",
                          "39": "qa_maths",
                          "4": "qa_stock",
                          "40": "iot_hue_lightoff",
                          "41": "iot_hue_lighton",
                          "42": "transport_query",
                          "43": "music_likeness",
                          "44": "email_query",
                          "45": "play_music",
                          "46": "audio_volume_mute",
                          "47": "social_post",
                          "48": "alarm_set",
                          "49": "qa_factoid",
                          "5": "general_greet",
                          "50": "calendar_set",
                          "51": "play_game",
                          "52": "alarm_remove",
                          "53": "lists_remove",
                          "54": "transport_taxi",
                          "55": "recommendation_movies",
                          "56": "iot_coffee",
                          "57": "music_query",
                          "58": "play_podcasts",
                          "59": "lists_query",
                          "6": "recommendation_events",
                          "7": "music_dislikeness",
                          "8": "iot_wemo_off",
                          "9": "cooking_recipe"
                      }
                  },
                  "type": "map_instance_values"
              },
              {
                  "field_to_field": {
                      "intent": "label",
                      "utt": "text"
                  },
                  "type": "rename_fields"
              },
              {
                  "fields": {
                      "classes": [
                          "datetime_query",
                          "iot_hue_lightchange",
                          "transport_ticket",
                          "takeaway_query",
                          "qa_stock",
                          "general_greet",
                          "recommendation_events",
                          "music_dislikeness",
                          "iot_wemo_off",
                          "cooking_recipe",
                          "qa_currency",
                          "transport_traffic",
                          "general_quirky",
                          "weather_query",
                          "audio_volume_up",
                          "email_addcontact",
                          "takeaway_order",
                          "email_querycontact",
                          "iot_hue_lightup",
                          "recommendation_locations",
                          "play_audiobook",
                          "lists_createoradd",
                          "news_query",
                          "alarm_query",
                          "iot_wemo_on",
                          "general_joke",
                          "qa_definition",
                          "social_query",
                          "music_settings",
                          "audio_volume_other",
                          "calendar_remove",
                          "iot_hue_lightdim",
                          "calendar_query",
                          "email_sendemail",
                          "iot_cleaning",
                          "audio_volume_down",
                          "play_radio",
                          "cooking_query",
                          "datetime_convert",
                          "qa_maths",
                          "iot_hue_lightoff",
                          "iot_hue_lighton",
                          "transport_query",
                          "music_likeness",
                          "email_query",
                          "play_music",
                          "audio_volume_mute",
                          "social_post",
                          "alarm_set",
                          "qa_factoid",
                          "calendar_set",
                          "play_game",
                          "alarm_remove",
                          "lists_remove",
                          "transport_taxi",
                          "recommendation_movies",
                          "iot_coffee",
                          "music_query",
                          "play_podcasts",
                          "lists_query"
                      ],
                      "text_type": "sentence",
                      "type_of_class": "intent"
                  },
                  "type": "add_fields"
              }
          ],
          "task": "tasks.classification.multi_class",
          "templates": "templates.classification.multi_class.all",
          "type": "task_card"
      }

References: :ref:`tasks.classification.multi_class <tasks.classification.multi_class>`, :ref:`templates.classification.multi_class.all <templates.classification.multi_class.all>`

|
|



.. _cards.amazon_mass.hy_AM:

----------

hy_AM
"""""

.. note:: ID: ``cards.amazon_mass.hy_AM``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "hy-AM",
              "path": "AmazonScience/massive",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "mappers": {
                      "intent": {
                          "0": "datetime_query",
                          "1": "iot_hue_lightchange",
                          "10": "qa_currency",
                          "11": "transport_traffic",
                          "12": "general_quirky",
                          "13": "weather_query",
                          "14": "audio_volume_up",
                          "15": "email_addcontact",
                          "16": "takeaway_order",
                          "17": "email_querycontact",
                          "18": "iot_hue_lightup",
                          "19": "recommendation_locations",
                          "2": "transport_ticket",
                          "20": "play_audiobook",
                          "21": "lists_createoradd",
                          "22": "news_query",
                          "23": "alarm_query",
                          "24": "iot_wemo_on",
                          "25": "general_joke",
                          "26": "qa_definition",
                          "27": "social_query",
                          "28": "music_settings",
                          "29": "audio_volume_other",
                          "3": "takeaway_query",
                          "30": "calendar_remove",
                          "31": "iot_hue_lightdim",
                          "32": "calendar_query",
                          "33": "email_sendemail",
                          "34": "iot_cleaning",
                          "35": "audio_volume_down",
                          "36": "play_radio",
                          "37": "cooking_query",
                          "38": "datetime_convert",
                          "39": "qa_maths",
                          "4": "qa_stock",
                          "40": "iot_hue_lightoff",
                          "41": "iot_hue_lighton",
                          "42": "transport_query",
                          "43": "music_likeness",
                          "44": "email_query",
                          "45": "play_music",
                          "46": "audio_volume_mute",
                          "47": "social_post",
                          "48": "alarm_set",
                          "49": "qa_factoid",
                          "5": "general_greet",
                          "50": "calendar_set",
                          "51": "play_game",
                          "52": "alarm_remove",
                          "53": "lists_remove",
                          "54": "transport_taxi",
                          "55": "recommendation_movies",
                          "56": "iot_coffee",
                          "57": "music_query",
                          "58": "play_podcasts",
                          "59": "lists_query",
                          "6": "recommendation_events",
                          "7": "music_dislikeness",
                          "8": "iot_wemo_off",
                          "9": "cooking_recipe"
                      }
                  },
                  "type": "map_instance_values"
              },
              {
                  "field_to_field": {
                      "intent": "label",
                      "utt": "text"
                  },
                  "type": "rename_fields"
              },
              {
                  "fields": {
                      "classes": [
                          "datetime_query",
                          "iot_hue_lightchange",
                          "transport_ticket",
                          "takeaway_query",
                          "qa_stock",
                          "general_greet",
                          "recommendation_events",
                          "music_dislikeness",
                          "iot_wemo_off",
                          "cooking_recipe",
                          "qa_currency",
                          "transport_traffic",
                          "general_quirky",
                          "weather_query",
                          "audio_volume_up",
                          "email_addcontact",
                          "takeaway_order",
                          "email_querycontact",
                          "iot_hue_lightup",
                          "recommendation_locations",
                          "play_audiobook",
                          "lists_createoradd",
                          "news_query",
                          "alarm_query",
                          "iot_wemo_on",
                          "general_joke",
                          "qa_definition",
                          "social_query",
                          "music_settings",
                          "audio_volume_other",
                          "calendar_remove",
                          "iot_hue_lightdim",
                          "calendar_query",
                          "email_sendemail",
                          "iot_cleaning",
                          "audio_volume_down",
                          "play_radio",
                          "cooking_query",
                          "datetime_convert",
                          "qa_maths",
                          "iot_hue_lightoff",
                          "iot_hue_lighton",
                          "transport_query",
                          "music_likeness",
                          "email_query",
                          "play_music",
                          "audio_volume_mute",
                          "social_post",
                          "alarm_set",
                          "qa_factoid",
                          "calendar_set",
                          "play_game",
                          "alarm_remove",
                          "lists_remove",
                          "transport_taxi",
                          "recommendation_movies",
                          "iot_coffee",
                          "music_query",
                          "play_podcasts",
                          "lists_query"
                      ],
                      "text_type": "sentence",
                      "type_of_class": "intent"
                  },
                  "type": "add_fields"
              }
          ],
          "task": "tasks.classification.multi_class",
          "templates": "templates.classification.multi_class.all",
          "type": "task_card"
      }

References: :ref:`tasks.classification.multi_class <tasks.classification.multi_class>`, :ref:`templates.classification.multi_class.all <templates.classification.multi_class.all>`

|
|



.. _cards.amazon_mass.sv_SE:

----------

sv_SE
"""""

.. note:: ID: ``cards.amazon_mass.sv_SE``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "sv-SE",
              "path": "AmazonScience/massive",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "mappers": {
                      "intent": {
                          "0": "datetime_query",
                          "1": "iot_hue_lightchange",
                          "10": "qa_currency",
                          "11": "transport_traffic",
                          "12": "general_quirky",
                          "13": "weather_query",
                          "14": "audio_volume_up",
                          "15": "email_addcontact",
                          "16": "takeaway_order",
                          "17": "email_querycontact",
                          "18": "iot_hue_lightup",
                          "19": "recommendation_locations",
                          "2": "transport_ticket",
                          "20": "play_audiobook",
                          "21": "lists_createoradd",
                          "22": "news_query",
                          "23": "alarm_query",
                          "24": "iot_wemo_on",
                          "25": "general_joke",
                          "26": "qa_definition",
                          "27": "social_query",
                          "28": "music_settings",
                          "29": "audio_volume_other",
                          "3": "takeaway_query",
                          "30": "calendar_remove",
                          "31": "iot_hue_lightdim",
                          "32": "calendar_query",
                          "33": "email_sendemail",
                          "34": "iot_cleaning",
                          "35": "audio_volume_down",
                          "36": "play_radio",
                          "37": "cooking_query",
                          "38": "datetime_convert",
                          "39": "qa_maths",
                          "4": "qa_stock",
                          "40": "iot_hue_lightoff",
                          "41": "iot_hue_lighton",
                          "42": "transport_query",
                          "43": "music_likeness",
                          "44": "email_query",
                          "45": "play_music",
                          "46": "audio_volume_mute",
                          "47": "social_post",
                          "48": "alarm_set",
                          "49": "qa_factoid",
                          "5": "general_greet",
                          "50": "calendar_set",
                          "51": "play_game",
                          "52": "alarm_remove",
                          "53": "lists_remove",
                          "54": "transport_taxi",
                          "55": "recommendation_movies",
                          "56": "iot_coffee",
                          "57": "music_query",
                          "58": "play_podcasts",
                          "59": "lists_query",
                          "6": "recommendation_events",
                          "7": "music_dislikeness",
                          "8": "iot_wemo_off",
                          "9": "cooking_recipe"
                      }
                  },
                  "type": "map_instance_values"
              },
              {
                  "field_to_field": {
                      "intent": "label",
                      "utt": "text"
                  },
                  "type": "rename_fields"
              },
              {
                  "fields": {
                      "classes": [
                          "datetime_query",
                          "iot_hue_lightchange",
                          "transport_ticket",
                          "takeaway_query",
                          "qa_stock",
                          "general_greet",
                          "recommendation_events",
                          "music_dislikeness",
                          "iot_wemo_off",
                          "cooking_recipe",
                          "qa_currency",
                          "transport_traffic",
                          "general_quirky",
                          "weather_query",
                          "audio_volume_up",
                          "email_addcontact",
                          "takeaway_order",
                          "email_querycontact",
                          "iot_hue_lightup",
                          "recommendation_locations",
                          "play_audiobook",
                          "lists_createoradd",
                          "news_query",
                          "alarm_query",
                          "iot_wemo_on",
                          "general_joke",
                          "qa_definition",
                          "social_query",
                          "music_settings",
                          "audio_volume_other",
                          "calendar_remove",
                          "iot_hue_lightdim",
                          "calendar_query",
                          "email_sendemail",
                          "iot_cleaning",
                          "audio_volume_down",
                          "play_radio",
                          "cooking_query",
                          "datetime_convert",
                          "qa_maths",
                          "iot_hue_lightoff",
                          "iot_hue_lighton",
                          "transport_query",
                          "music_likeness",
                          "email_query",
                          "play_music",
                          "audio_volume_mute",
                          "social_post",
                          "alarm_set",
                          "qa_factoid",
                          "calendar_set",
                          "play_game",
                          "alarm_remove",
                          "lists_remove",
                          "transport_taxi",
                          "recommendation_movies",
                          "iot_coffee",
                          "music_query",
                          "play_podcasts",
                          "lists_query"
                      ],
                      "text_type": "sentence",
                      "type_of_class": "intent"
                  },
                  "type": "add_fields"
              }
          ],
          "task": "tasks.classification.multi_class",
          "templates": "templates.classification.multi_class.all",
          "type": "task_card"
      }

References: :ref:`tasks.classification.multi_class <tasks.classification.multi_class>`, :ref:`templates.classification.multi_class.all <templates.classification.multi_class.all>`

|
|



.. _cards.amazon_mass.is_IS:

----------

is_IS
"""""

.. note:: ID: ``cards.amazon_mass.is_IS``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "is-IS",
              "path": "AmazonScience/massive",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "mappers": {
                      "intent": {
                          "0": "datetime_query",
                          "1": "iot_hue_lightchange",
                          "10": "qa_currency",
                          "11": "transport_traffic",
                          "12": "general_quirky",
                          "13": "weather_query",
                          "14": "audio_volume_up",
                          "15": "email_addcontact",
                          "16": "takeaway_order",
                          "17": "email_querycontact",
                          "18": "iot_hue_lightup",
                          "19": "recommendation_locations",
                          "2": "transport_ticket",
                          "20": "play_audiobook",
                          "21": "lists_createoradd",
                          "22": "news_query",
                          "23": "alarm_query",
                          "24": "iot_wemo_on",
                          "25": "general_joke",
                          "26": "qa_definition",
                          "27": "social_query",
                          "28": "music_settings",
                          "29": "audio_volume_other",
                          "3": "takeaway_query",
                          "30": "calendar_remove",
                          "31": "iot_hue_lightdim",
                          "32": "calendar_query",
                          "33": "email_sendemail",
                          "34": "iot_cleaning",
                          "35": "audio_volume_down",
                          "36": "play_radio",
                          "37": "cooking_query",
                          "38": "datetime_convert",
                          "39": "qa_maths",
                          "4": "qa_stock",
                          "40": "iot_hue_lightoff",
                          "41": "iot_hue_lighton",
                          "42": "transport_query",
                          "43": "music_likeness",
                          "44": "email_query",
                          "45": "play_music",
                          "46": "audio_volume_mute",
                          "47": "social_post",
                          "48": "alarm_set",
                          "49": "qa_factoid",
                          "5": "general_greet",
                          "50": "calendar_set",
                          "51": "play_game",
                          "52": "alarm_remove",
                          "53": "lists_remove",
                          "54": "transport_taxi",
                          "55": "recommendation_movies",
                          "56": "iot_coffee",
                          "57": "music_query",
                          "58": "play_podcasts",
                          "59": "lists_query",
                          "6": "recommendation_events",
                          "7": "music_dislikeness",
                          "8": "iot_wemo_off",
                          "9": "cooking_recipe"
                      }
                  },
                  "type": "map_instance_values"
              },
              {
                  "field_to_field": {
                      "intent": "label",
                      "utt": "text"
                  },
                  "type": "rename_fields"
              },
              {
                  "fields": {
                      "classes": [
                          "datetime_query",
                          "iot_hue_lightchange",
                          "transport_ticket",
                          "takeaway_query",
                          "qa_stock",
                          "general_greet",
                          "recommendation_events",
                          "music_dislikeness",
                          "iot_wemo_off",
                          "cooking_recipe",
                          "qa_currency",
                          "transport_traffic",
                          "general_quirky",
                          "weather_query",
                          "audio_volume_up",
                          "email_addcontact",
                          "takeaway_order",
                          "email_querycontact",
                          "iot_hue_lightup",
                          "recommendation_locations",
                          "play_audiobook",
                          "lists_createoradd",
                          "news_query",
                          "alarm_query",
                          "iot_wemo_on",
                          "general_joke",
                          "qa_definition",
                          "social_query",
                          "music_settings",
                          "audio_volume_other",
                          "calendar_remove",
                          "iot_hue_lightdim",
                          "calendar_query",
                          "email_sendemail",
                          "iot_cleaning",
                          "audio_volume_down",
                          "play_radio",
                          "cooking_query",
                          "datetime_convert",
                          "qa_maths",
                          "iot_hue_lightoff",
                          "iot_hue_lighton",
                          "transport_query",
                          "music_likeness",
                          "email_query",
                          "play_music",
                          "audio_volume_mute",
                          "social_post",
                          "alarm_set",
                          "qa_factoid",
                          "calendar_set",
                          "play_game",
                          "alarm_remove",
                          "lists_remove",
                          "transport_taxi",
                          "recommendation_movies",
                          "iot_coffee",
                          "music_query",
                          "play_podcasts",
                          "lists_query"
                      ],
                      "text_type": "sentence",
                      "type_of_class": "intent"
                  },
                  "type": "add_fields"
              }
          ],
          "task": "tasks.classification.multi_class",
          "templates": "templates.classification.multi_class.all",
          "type": "task_card"
      }

References: :ref:`tasks.classification.multi_class <tasks.classification.multi_class>`, :ref:`templates.classification.multi_class.all <templates.classification.multi_class.all>`

|
|



.. _cards.amazon_mass.pt_PT:

----------

pt_PT
"""""

.. note:: ID: ``cards.amazon_mass.pt_PT``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "pt-PT",
              "path": "AmazonScience/massive",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "mappers": {
                      "intent": {
                          "0": "datetime_query",
                          "1": "iot_hue_lightchange",
                          "10": "qa_currency",
                          "11": "transport_traffic",
                          "12": "general_quirky",
                          "13": "weather_query",
                          "14": "audio_volume_up",
                          "15": "email_addcontact",
                          "16": "takeaway_order",
                          "17": "email_querycontact",
                          "18": "iot_hue_lightup",
                          "19": "recommendation_locations",
                          "2": "transport_ticket",
                          "20": "play_audiobook",
                          "21": "lists_createoradd",
                          "22": "news_query",
                          "23": "alarm_query",
                          "24": "iot_wemo_on",
                          "25": "general_joke",
                          "26": "qa_definition",
                          "27": "social_query",
                          "28": "music_settings",
                          "29": "audio_volume_other",
                          "3": "takeaway_query",
                          "30": "calendar_remove",
                          "31": "iot_hue_lightdim",
                          "32": "calendar_query",
                          "33": "email_sendemail",
                          "34": "iot_cleaning",
                          "35": "audio_volume_down",
                          "36": "play_radio",
                          "37": "cooking_query",
                          "38": "datetime_convert",
                          "39": "qa_maths",
                          "4": "qa_stock",
                          "40": "iot_hue_lightoff",
                          "41": "iot_hue_lighton",
                          "42": "transport_query",
                          "43": "music_likeness",
                          "44": "email_query",
                          "45": "play_music",
                          "46": "audio_volume_mute",
                          "47": "social_post",
                          "48": "alarm_set",
                          "49": "qa_factoid",
                          "5": "general_greet",
                          "50": "calendar_set",
                          "51": "play_game",
                          "52": "alarm_remove",
                          "53": "lists_remove",
                          "54": "transport_taxi",
                          "55": "recommendation_movies",
                          "56": "iot_coffee",
                          "57": "music_query",
                          "58": "play_podcasts",
                          "59": "lists_query",
                          "6": "recommendation_events",
                          "7": "music_dislikeness",
                          "8": "iot_wemo_off",
                          "9": "cooking_recipe"
                      }
                  },
                  "type": "map_instance_values"
              },
              {
                  "field_to_field": {
                      "intent": "label",
                      "utt": "text"
                  },
                  "type": "rename_fields"
              },
              {
                  "fields": {
                      "classes": [
                          "datetime_query",
                          "iot_hue_lightchange",
                          "transport_ticket",
                          "takeaway_query",
                          "qa_stock",
                          "general_greet",
                          "recommendation_events",
                          "music_dislikeness",
                          "iot_wemo_off",
                          "cooking_recipe",
                          "qa_currency",
                          "transport_traffic",
                          "general_quirky",
                          "weather_query",
                          "audio_volume_up",
                          "email_addcontact",
                          "takeaway_order",
                          "email_querycontact",
                          "iot_hue_lightup",
                          "recommendation_locations",
                          "play_audiobook",
                          "lists_createoradd",
                          "news_query",
                          "alarm_query",
                          "iot_wemo_on",
                          "general_joke",
                          "qa_definition",
                          "social_query",
                          "music_settings",
                          "audio_volume_other",
                          "calendar_remove",
                          "iot_hue_lightdim",
                          "calendar_query",
                          "email_sendemail",
                          "iot_cleaning",
                          "audio_volume_down",
                          "play_radio",
                          "cooking_query",
                          "datetime_convert",
                          "qa_maths",
                          "iot_hue_lightoff",
                          "iot_hue_lighton",
                          "transport_query",
                          "music_likeness",
                          "email_query",
                          "play_music",
                          "audio_volume_mute",
                          "social_post",
                          "alarm_set",
                          "qa_factoid",
                          "calendar_set",
                          "play_game",
                          "alarm_remove",
                          "lists_remove",
                          "transport_taxi",
                          "recommendation_movies",
                          "iot_coffee",
                          "music_query",
                          "play_podcasts",
                          "lists_query"
                      ],
                      "text_type": "sentence",
                      "type_of_class": "intent"
                  },
                  "type": "add_fields"
              }
          ],
          "task": "tasks.classification.multi_class",
          "templates": "templates.classification.multi_class.all",
          "type": "task_card"
      }

References: :ref:`tasks.classification.multi_class <tasks.classification.multi_class>`, :ref:`templates.classification.multi_class.all <templates.classification.multi_class.all>`

|
|



.. _cards.amazon_mass.it_IT:

----------

it_IT
"""""

.. note:: ID: ``cards.amazon_mass.it_IT``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "it-IT",
              "path": "AmazonScience/massive",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "mappers": {
                      "intent": {
                          "0": "datetime_query",
                          "1": "iot_hue_lightchange",
                          "10": "qa_currency",
                          "11": "transport_traffic",
                          "12": "general_quirky",
                          "13": "weather_query",
                          "14": "audio_volume_up",
                          "15": "email_addcontact",
                          "16": "takeaway_order",
                          "17": "email_querycontact",
                          "18": "iot_hue_lightup",
                          "19": "recommendation_locations",
                          "2": "transport_ticket",
                          "20": "play_audiobook",
                          "21": "lists_createoradd",
                          "22": "news_query",
                          "23": "alarm_query",
                          "24": "iot_wemo_on",
                          "25": "general_joke",
                          "26": "qa_definition",
                          "27": "social_query",
                          "28": "music_settings",
                          "29": "audio_volume_other",
                          "3": "takeaway_query",
                          "30": "calendar_remove",
                          "31": "iot_hue_lightdim",
                          "32": "calendar_query",
                          "33": "email_sendemail",
                          "34": "iot_cleaning",
                          "35": "audio_volume_down",
                          "36": "play_radio",
                          "37": "cooking_query",
                          "38": "datetime_convert",
                          "39": "qa_maths",
                          "4": "qa_stock",
                          "40": "iot_hue_lightoff",
                          "41": "iot_hue_lighton",
                          "42": "transport_query",
                          "43": "music_likeness",
                          "44": "email_query",
                          "45": "play_music",
                          "46": "audio_volume_mute",
                          "47": "social_post",
                          "48": "alarm_set",
                          "49": "qa_factoid",
                          "5": "general_greet",
                          "50": "calendar_set",
                          "51": "play_game",
                          "52": "alarm_remove",
                          "53": "lists_remove",
                          "54": "transport_taxi",
                          "55": "recommendation_movies",
                          "56": "iot_coffee",
                          "57": "music_query",
                          "58": "play_podcasts",
                          "59": "lists_query",
                          "6": "recommendation_events",
                          "7": "music_dislikeness",
                          "8": "iot_wemo_off",
                          "9": "cooking_recipe"
                      }
                  },
                  "type": "map_instance_values"
              },
              {
                  "field_to_field": {
                      "intent": "label",
                      "utt": "text"
                  },
                  "type": "rename_fields"
              },
              {
                  "fields": {
                      "classes": [
                          "datetime_query",
                          "iot_hue_lightchange",
                          "transport_ticket",
                          "takeaway_query",
                          "qa_stock",
                          "general_greet",
                          "recommendation_events",
                          "music_dislikeness",
                          "iot_wemo_off",
                          "cooking_recipe",
                          "qa_currency",
                          "transport_traffic",
                          "general_quirky",
                          "weather_query",
                          "audio_volume_up",
                          "email_addcontact",
                          "takeaway_order",
                          "email_querycontact",
                          "iot_hue_lightup",
                          "recommendation_locations",
                          "play_audiobook",
                          "lists_createoradd",
                          "news_query",
                          "alarm_query",
                          "iot_wemo_on",
                          "general_joke",
                          "qa_definition",
                          "social_query",
                          "music_settings",
                          "audio_volume_other",
                          "calendar_remove",
                          "iot_hue_lightdim",
                          "calendar_query",
                          "email_sendemail",
                          "iot_cleaning",
                          "audio_volume_down",
                          "play_radio",
                          "cooking_query",
                          "datetime_convert",
                          "qa_maths",
                          "iot_hue_lightoff",
                          "iot_hue_lighton",
                          "transport_query",
                          "music_likeness",
                          "email_query",
                          "play_music",
                          "audio_volume_mute",
                          "social_post",
                          "alarm_set",
                          "qa_factoid",
                          "calendar_set",
                          "play_game",
                          "alarm_remove",
                          "lists_remove",
                          "transport_taxi",
                          "recommendation_movies",
                          "iot_coffee",
                          "music_query",
                          "play_podcasts",
                          "lists_query"
                      ],
                      "text_type": "sentence",
                      "type_of_class": "intent"
                  },
                  "type": "add_fields"
              }
          ],
          "task": "tasks.classification.multi_class",
          "templates": "templates.classification.multi_class.all",
          "type": "task_card"
      }

References: :ref:`tasks.classification.multi_class <tasks.classification.multi_class>`, :ref:`templates.classification.multi_class.all <templates.classification.multi_class.all>`

|
|



.. _cards.amazon_mass.ar_SA:

----------

ar_SA
"""""

.. note:: ID: ``cards.amazon_mass.ar_SA``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "ar-SA",
              "path": "AmazonScience/massive",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "mappers": {
                      "intent": {
                          "0": "datetime_query",
                          "1": "iot_hue_lightchange",
                          "10": "qa_currency",
                          "11": "transport_traffic",
                          "12": "general_quirky",
                          "13": "weather_query",
                          "14": "audio_volume_up",
                          "15": "email_addcontact",
                          "16": "takeaway_order",
                          "17": "email_querycontact",
                          "18": "iot_hue_lightup",
                          "19": "recommendation_locations",
                          "2": "transport_ticket",
                          "20": "play_audiobook",
                          "21": "lists_createoradd",
                          "22": "news_query",
                          "23": "alarm_query",
                          "24": "iot_wemo_on",
                          "25": "general_joke",
                          "26": "qa_definition",
                          "27": "social_query",
                          "28": "music_settings",
                          "29": "audio_volume_other",
                          "3": "takeaway_query",
                          "30": "calendar_remove",
                          "31": "iot_hue_lightdim",
                          "32": "calendar_query",
                          "33": "email_sendemail",
                          "34": "iot_cleaning",
                          "35": "audio_volume_down",
                          "36": "play_radio",
                          "37": "cooking_query",
                          "38": "datetime_convert",
                          "39": "qa_maths",
                          "4": "qa_stock",
                          "40": "iot_hue_lightoff",
                          "41": "iot_hue_lighton",
                          "42": "transport_query",
                          "43": "music_likeness",
                          "44": "email_query",
                          "45": "play_music",
                          "46": "audio_volume_mute",
                          "47": "social_post",
                          "48": "alarm_set",
                          "49": "qa_factoid",
                          "5": "general_greet",
                          "50": "calendar_set",
                          "51": "play_game",
                          "52": "alarm_remove",
                          "53": "lists_remove",
                          "54": "transport_taxi",
                          "55": "recommendation_movies",
                          "56": "iot_coffee",
                          "57": "music_query",
                          "58": "play_podcasts",
                          "59": "lists_query",
                          "6": "recommendation_events",
                          "7": "music_dislikeness",
                          "8": "iot_wemo_off",
                          "9": "cooking_recipe"
                      }
                  },
                  "type": "map_instance_values"
              },
              {
                  "field_to_field": {
                      "intent": "label",
                      "utt": "text"
                  },
                  "type": "rename_fields"
              },
              {
                  "fields": {
                      "classes": [
                          "datetime_query",
                          "iot_hue_lightchange",
                          "transport_ticket",
                          "takeaway_query",
                          "qa_stock",
                          "general_greet",
                          "recommendation_events",
                          "music_dislikeness",
                          "iot_wemo_off",
                          "cooking_recipe",
                          "qa_currency",
                          "transport_traffic",
                          "general_quirky",
                          "weather_query",
                          "audio_volume_up",
                          "email_addcontact",
                          "takeaway_order",
                          "email_querycontact",
                          "iot_hue_lightup",
                          "recommendation_locations",
                          "play_audiobook",
                          "lists_createoradd",
                          "news_query",
                          "alarm_query",
                          "iot_wemo_on",
                          "general_joke",
                          "qa_definition",
                          "social_query",
                          "music_settings",
                          "audio_volume_other",
                          "calendar_remove",
                          "iot_hue_lightdim",
                          "calendar_query",
                          "email_sendemail",
                          "iot_cleaning",
                          "audio_volume_down",
                          "play_radio",
                          "cooking_query",
                          "datetime_convert",
                          "qa_maths",
                          "iot_hue_lightoff",
                          "iot_hue_lighton",
                          "transport_query",
                          "music_likeness",
                          "email_query",
                          "play_music",
                          "audio_volume_mute",
                          "social_post",
                          "alarm_set",
                          "qa_factoid",
                          "calendar_set",
                          "play_game",
                          "alarm_remove",
                          "lists_remove",
                          "transport_taxi",
                          "recommendation_movies",
                          "iot_coffee",
                          "music_query",
                          "play_podcasts",
                          "lists_query"
                      ],
                      "text_type": "sentence",
                      "type_of_class": "intent"
                  },
                  "type": "add_fields"
              }
          ],
          "task": "tasks.classification.multi_class",
          "templates": "templates.classification.multi_class.all",
          "type": "task_card"
      }

References: :ref:`tasks.classification.multi_class <tasks.classification.multi_class>`, :ref:`templates.classification.multi_class.all <templates.classification.multi_class.all>`

|
|



.. _cards.wmt_en_de:

----------

wmt_en_de
^^^^^^^^^

.. note:: ID: ``cards.wmt_en_de``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "de-en",
              "path": "wmt16",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "mix": {
                      "test": "test",
                      "train": "train",
                      "validation": "validation"
                  },
                  "type": "split_random_mix"
              },
              {
                  "field_to_field": [
                      [
                          "translation/en",
                          "en"
                      ],
                      [
                          "translation/de",
                          "de"
                      ]
                  ],
                  "type": "copy_fields",
                  "use_query": true
              }
          ],
          "task": {
              "inputs": [
                  "en"
              ],
              "metrics": [
                  "metrics.bleu"
              ],
              "outputs": [
                  "de"
              ],
              "type": "form_task"
          },
          "templates": {
              "items": [
                  {
                      "input_format": "{en}",
                      "output_format": "{de}",
                      "type": "input_output_template"
                  }
              ],
              "type": "templates_list"
          },
          "type": "task_card"
      }

References: :ref:`metrics.bleu <metrics.bleu>`

|
|



.. _cards.piqa_middle:

----------

piqa_middle
^^^^^^^^^^^

.. note:: ID: ``cards.piqa_middle``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "middle",
              "path": "race",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "fields": {
                      "numbering": [
                          "A",
                          "B",
                          "C",
                          "D",
                          "E",
                          "F",
                          "G",
                          "H",
                          "I",
                          "J",
                          "K",
                          "L",
                          "M",
                          "N",
                          "O",
                          "P",
                          "Q",
                          "R",
                          "S",
                          "T",
                          "U",
                          "V",
                          "W",
                          "X",
                          "Y",
                          "Z"
                      ],
                      "topic": "reading comprehension"
                  },
                  "type": "add_fields"
              },
              {
                  "index_of": "answer",
                  "search_in": "numbering",
                  "to_field": "index",
                  "type": "index_of"
              },
              {
                  "field_to_field": {
                      "article": "context",
                      "index": "_index",
                      "numbering": "_numbering",
                      "options": "_options",
                      "question": "sentence1",
                      "topic": "topic"
                  },
                  "type": "rename_fields"
              },
              {
                  "field": "_numbering",
                  "index": "_index",
                  "to_field": "number",
                  "type": "take_by_field"
              },
              {
                  "field": "_options",
                  "index": "_index",
                  "to_field": "answer",
                  "type": "take_by_field"
              },
              {
                  "fields": [
                      "_numbering",
                      "_options"
                  ],
                  "to_field": "choices",
                  "type": "zip_field_values"
              },
              {
                  "field": "choices/*",
                  "process_every_value": true,
                  "separator": ". ",
                  "to_field": "choices_list",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "field": "choices_list",
                  "index": "_index",
                  "to_field": "number_and_answer",
                  "type": "take_by_field"
              },
              {
                  "field": "choices/*/0",
                  "separator": ",",
                  "to_field": "numbers",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "field": "choices_list",
                  "separator": " ",
                  "to_field": "choices",
                  "type": "join_str"
              },
              {
                  "field_to_field": {
                      "number": "label"
                  },
                  "type": "rename_fields"
              }
          ],
          "task": {
              "inputs": [
                  "choices",
                  "sentence1",
                  "numbers",
                  "topic",
                  "context"
              ],
              "metrics": [
                  "metrics.accuracy"
              ],
              "outputs": [
                  "label"
              ],
              "type": "form_task"
          },
          "templates": {
              "fm-eval": {
                  "input_format": "The following are multiple choice questions (with answers) about {topic}.\n\n\n                            Context: {context}\nQuestion: {context}\n{sentence1}\nChoose from {numbers}\nAnswers: {choices}\nAnswer:",
                  "output_format": "{label}",
                  "type": "input_output_template"
              },
              "helm": {
                  "input_format": "The following are multiple choice questions (with answers) about {topic}.\n\n\n                            Context: {context}\nQuestion: {context}\n{sentence1}.\nAnswers: {choices}.\nAnswer:",
                  "output_format": "{label}",
                  "type": "input_output_template"
              },
              "lm_eval_harness": {
                  "input_format": "Context: {context}\nQuestion: {context}\n{sentence1}.\nChoices:\n{choices}.\nAnswer:",
                  "output_format": "{label}",
                  "type": "input_output_template"
              },
              "original": {
                  "input_format": "The following are multiple choice questions (with answers) about {topic}.\n\n                            {context}\n{sentence1}.\nAnswers: {choices}.\nAnswer:",
                  "output_format": "{label}",
                  "type": "input_output_template"
              }
          },
          "type": "task_card"
      }

References: :ref:`metrics.accuracy <metrics.accuracy>`

|
|



.. _.cards.belebele:

----------

belebele
^^^^^^^^



.. _cards.belebele.war_Latn:

----------

war_Latn
""""""""

.. note:: ID: ``cards.belebele.war_Latn``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "default",
              "path": "facebook/belebele",
              "split": "war_Latn",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "mapper": {
                      "war_Latn": "test"
                  },
                  "type": "rename_splits"
              },
              {
                  "fields": {
                      "numbering": [
                          "A",
                          "B",
                          "C",
                          "D",
                          "E",
                          "F",
                          "G",
                          "H",
                          "I",
                          "J",
                          "K",
                          "L",
                          "M",
                          "N",
                          "O",
                          "P",
                          "Q",
                          "R",
                          "S",
                          "T",
                          "U",
                          "V",
                          "W",
                          "X",
                          "Y",
                          "Z"
                      ]
                  },
                  "type": "add_fields"
              },
              {
                  "fields": [
                      "mc_answer1",
                      "mc_answer2",
                      "mc_answer3",
                      "mc_answer4"
                  ],
                  "to_field": "choices",
                  "type": "list_field_values"
              },
              {
                  "mappers": {
                      "correct_answer_num": {
                          "1": "A",
                          "2": "B",
                          "3": "C",
                          "4": "D"
                      }
                  },
                  "type": "map_instance_values"
              },
              {
                  "index_of": "correct_answer_num",
                  "search_in": "numbering",
                  "to_field": "index",
                  "type": "index_of"
              },
              {
                  "field_to_field": {
                      "choices": "_choices",
                      "dialect": "topic",
                      "flores_passage": "context",
                      "index": "_index",
                      "numbering": "_numbering",
                      "question": "sentence1"
                  },
                  "type": "rename_fields"
              },
              {
                  "field": "_numbering",
                  "index": "_index",
                  "to_field": "number",
                  "type": "take_by_field"
              },
              {
                  "field": "_choices",
                  "index": "_index",
                  "to_field": "answer",
                  "type": "take_by_field"
              },
              {
                  "fields": [
                      "_numbering",
                      "_choices"
                  ],
                  "to_field": "choices",
                  "type": "zip_field_values"
              },
              {
                  "field": "choices/*",
                  "process_every_value": true,
                  "separator": ". ",
                  "to_field": "choices_list",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "field": "choices_list",
                  "index": "_index",
                  "to_field": "number_and_answer",
                  "type": "take_by_field"
              },
              {
                  "field": "choices/*/0",
                  "separator": ",",
                  "to_field": "numbers",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "add": [
                      ""
                  ],
                  "field": "choices_list",
                  "to_field": "choices_list",
                  "type": "add_constant"
              },
              {
                  "field": "choices_list",
                  "separator": "\n",
                  "to_field": "choices",
                  "type": "join_str"
              },
              {
                  "field_to_field": {
                      "number": "label"
                  },
                  "type": "rename_fields"
              }
          ],
          "task": {
              "inputs": [
                  "choices",
                  "sentence1",
                  "numbers",
                  "topic",
                  "context"
              ],
              "metrics": [
                  "metrics.accuracy"
              ],
              "outputs": [
                  "label"
              ],
              "type": "form_task"
          },
          "templates": "templates.qa.multiple_choice.context_no_intro.all",
          "type": "task_card"
      }

References: :ref:`metrics.accuracy <metrics.accuracy>`, :ref:`templates.qa.multiple_choice.context_no_intro.all <templates.qa.multiple_choice.context_no_intro.all>`

|
|



.. _cards.belebele.pbt_Arab:

----------

pbt_Arab
""""""""

.. note:: ID: ``cards.belebele.pbt_Arab``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "default",
              "path": "facebook/belebele",
              "split": "pbt_Arab",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "mapper": {
                      "pbt_Arab": "test"
                  },
                  "type": "rename_splits"
              },
              {
                  "fields": {
                      "numbering": [
                          "A",
                          "B",
                          "C",
                          "D",
                          "E",
                          "F",
                          "G",
                          "H",
                          "I",
                          "J",
                          "K",
                          "L",
                          "M",
                          "N",
                          "O",
                          "P",
                          "Q",
                          "R",
                          "S",
                          "T",
                          "U",
                          "V",
                          "W",
                          "X",
                          "Y",
                          "Z"
                      ]
                  },
                  "type": "add_fields"
              },
              {
                  "fields": [
                      "mc_answer1",
                      "mc_answer2",
                      "mc_answer3",
                      "mc_answer4"
                  ],
                  "to_field": "choices",
                  "type": "list_field_values"
              },
              {
                  "mappers": {
                      "correct_answer_num": {
                          "1": "A",
                          "2": "B",
                          "3": "C",
                          "4": "D"
                      }
                  },
                  "type": "map_instance_values"
              },
              {
                  "index_of": "correct_answer_num",
                  "search_in": "numbering",
                  "to_field": "index",
                  "type": "index_of"
              },
              {
                  "field_to_field": {
                      "choices": "_choices",
                      "dialect": "topic",
                      "flores_passage": "context",
                      "index": "_index",
                      "numbering": "_numbering",
                      "question": "sentence1"
                  },
                  "type": "rename_fields"
              },
              {
                  "field": "_numbering",
                  "index": "_index",
                  "to_field": "number",
                  "type": "take_by_field"
              },
              {
                  "field": "_choices",
                  "index": "_index",
                  "to_field": "answer",
                  "type": "take_by_field"
              },
              {
                  "fields": [
                      "_numbering",
                      "_choices"
                  ],
                  "to_field": "choices",
                  "type": "zip_field_values"
              },
              {
                  "field": "choices/*",
                  "process_every_value": true,
                  "separator": ". ",
                  "to_field": "choices_list",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "field": "choices_list",
                  "index": "_index",
                  "to_field": "number_and_answer",
                  "type": "take_by_field"
              },
              {
                  "field": "choices/*/0",
                  "separator": ",",
                  "to_field": "numbers",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "add": [
                      ""
                  ],
                  "field": "choices_list",
                  "to_field": "choices_list",
                  "type": "add_constant"
              },
              {
                  "field": "choices_list",
                  "separator": "\n",
                  "to_field": "choices",
                  "type": "join_str"
              },
              {
                  "field_to_field": {
                      "number": "label"
                  },
                  "type": "rename_fields"
              }
          ],
          "task": {
              "inputs": [
                  "choices",
                  "sentence1",
                  "numbers",
                  "topic",
                  "context"
              ],
              "metrics": [
                  "metrics.accuracy"
              ],
              "outputs": [
                  "label"
              ],
              "type": "form_task"
          },
          "templates": "templates.qa.multiple_choice.context_no_intro.all",
          "type": "task_card"
      }

References: :ref:`metrics.accuracy <metrics.accuracy>`, :ref:`templates.qa.multiple_choice.context_no_intro.all <templates.qa.multiple_choice.context_no_intro.all>`

|
|



.. _cards.belebele.nso_Latn:

----------

nso_Latn
""""""""

.. note:: ID: ``cards.belebele.nso_Latn``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "default",
              "path": "facebook/belebele",
              "split": "nso_Latn",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "mapper": {
                      "nso_Latn": "test"
                  },
                  "type": "rename_splits"
              },
              {
                  "fields": {
                      "numbering": [
                          "A",
                          "B",
                          "C",
                          "D",
                          "E",
                          "F",
                          "G",
                          "H",
                          "I",
                          "J",
                          "K",
                          "L",
                          "M",
                          "N",
                          "O",
                          "P",
                          "Q",
                          "R",
                          "S",
                          "T",
                          "U",
                          "V",
                          "W",
                          "X",
                          "Y",
                          "Z"
                      ]
                  },
                  "type": "add_fields"
              },
              {
                  "fields": [
                      "mc_answer1",
                      "mc_answer2",
                      "mc_answer3",
                      "mc_answer4"
                  ],
                  "to_field": "choices",
                  "type": "list_field_values"
              },
              {
                  "mappers": {
                      "correct_answer_num": {
                          "1": "A",
                          "2": "B",
                          "3": "C",
                          "4": "D"
                      }
                  },
                  "type": "map_instance_values"
              },
              {
                  "index_of": "correct_answer_num",
                  "search_in": "numbering",
                  "to_field": "index",
                  "type": "index_of"
              },
              {
                  "field_to_field": {
                      "choices": "_choices",
                      "dialect": "topic",
                      "flores_passage": "context",
                      "index": "_index",
                      "numbering": "_numbering",
                      "question": "sentence1"
                  },
                  "type": "rename_fields"
              },
              {
                  "field": "_numbering",
                  "index": "_index",
                  "to_field": "number",
                  "type": "take_by_field"
              },
              {
                  "field": "_choices",
                  "index": "_index",
                  "to_field": "answer",
                  "type": "take_by_field"
              },
              {
                  "fields": [
                      "_numbering",
                      "_choices"
                  ],
                  "to_field": "choices",
                  "type": "zip_field_values"
              },
              {
                  "field": "choices/*",
                  "process_every_value": true,
                  "separator": ". ",
                  "to_field": "choices_list",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "field": "choices_list",
                  "index": "_index",
                  "to_field": "number_and_answer",
                  "type": "take_by_field"
              },
              {
                  "field": "choices/*/0",
                  "separator": ",",
                  "to_field": "numbers",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "add": [
                      ""
                  ],
                  "field": "choices_list",
                  "to_field": "choices_list",
                  "type": "add_constant"
              },
              {
                  "field": "choices_list",
                  "separator": "\n",
                  "to_field": "choices",
                  "type": "join_str"
              },
              {
                  "field_to_field": {
                      "number": "label"
                  },
                  "type": "rename_fields"
              }
          ],
          "task": {
              "inputs": [
                  "choices",
                  "sentence1",
                  "numbers",
                  "topic",
                  "context"
              ],
              "metrics": [
                  "metrics.accuracy"
              ],
              "outputs": [
                  "label"
              ],
              "type": "form_task"
          },
          "templates": "templates.qa.multiple_choice.context_no_intro.all",
          "type": "task_card"
      }

References: :ref:`metrics.accuracy <metrics.accuracy>`, :ref:`templates.qa.multiple_choice.context_no_intro.all <templates.qa.multiple_choice.context_no_intro.all>`

|
|



.. _cards.belebele.hau_Latn:

----------

hau_Latn
""""""""

.. note:: ID: ``cards.belebele.hau_Latn``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "default",
              "path": "facebook/belebele",
              "split": "hau_Latn",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "mapper": {
                      "hau_Latn": "test"
                  },
                  "type": "rename_splits"
              },
              {
                  "fields": {
                      "numbering": [
                          "A",
                          "B",
                          "C",
                          "D",
                          "E",
                          "F",
                          "G",
                          "H",
                          "I",
                          "J",
                          "K",
                          "L",
                          "M",
                          "N",
                          "O",
                          "P",
                          "Q",
                          "R",
                          "S",
                          "T",
                          "U",
                          "V",
                          "W",
                          "X",
                          "Y",
                          "Z"
                      ]
                  },
                  "type": "add_fields"
              },
              {
                  "fields": [
                      "mc_answer1",
                      "mc_answer2",
                      "mc_answer3",
                      "mc_answer4"
                  ],
                  "to_field": "choices",
                  "type": "list_field_values"
              },
              {
                  "mappers": {
                      "correct_answer_num": {
                          "1": "A",
                          "2": "B",
                          "3": "C",
                          "4": "D"
                      }
                  },
                  "type": "map_instance_values"
              },
              {
                  "index_of": "correct_answer_num",
                  "search_in": "numbering",
                  "to_field": "index",
                  "type": "index_of"
              },
              {
                  "field_to_field": {
                      "choices": "_choices",
                      "dialect": "topic",
                      "flores_passage": "context",
                      "index": "_index",
                      "numbering": "_numbering",
                      "question": "sentence1"
                  },
                  "type": "rename_fields"
              },
              {
                  "field": "_numbering",
                  "index": "_index",
                  "to_field": "number",
                  "type": "take_by_field"
              },
              {
                  "field": "_choices",
                  "index": "_index",
                  "to_field": "answer",
                  "type": "take_by_field"
              },
              {
                  "fields": [
                      "_numbering",
                      "_choices"
                  ],
                  "to_field": "choices",
                  "type": "zip_field_values"
              },
              {
                  "field": "choices/*",
                  "process_every_value": true,
                  "separator": ". ",
                  "to_field": "choices_list",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "field": "choices_list",
                  "index": "_index",
                  "to_field": "number_and_answer",
                  "type": "take_by_field"
              },
              {
                  "field": "choices/*/0",
                  "separator": ",",
                  "to_field": "numbers",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "add": [
                      ""
                  ],
                  "field": "choices_list",
                  "to_field": "choices_list",
                  "type": "add_constant"
              },
              {
                  "field": "choices_list",
                  "separator": "\n",
                  "to_field": "choices",
                  "type": "join_str"
              },
              {
                  "field_to_field": {
                      "number": "label"
                  },
                  "type": "rename_fields"
              }
          ],
          "task": {
              "inputs": [
                  "choices",
                  "sentence1",
                  "numbers",
                  "topic",
                  "context"
              ],
              "metrics": [
                  "metrics.accuracy"
              ],
              "outputs": [
                  "label"
              ],
              "type": "form_task"
          },
          "templates": "templates.qa.multiple_choice.context_no_intro.all",
          "type": "task_card"
      }

References: :ref:`metrics.accuracy <metrics.accuracy>`, :ref:`templates.qa.multiple_choice.context_no_intro.all <templates.qa.multiple_choice.context_no_intro.all>`

|
|



.. _cards.belebele.sin_Sinh:

----------

sin_Sinh
""""""""

.. note:: ID: ``cards.belebele.sin_Sinh``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "default",
              "path": "facebook/belebele",
              "split": "sin_Sinh",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "mapper": {
                      "sin_Sinh": "test"
                  },
                  "type": "rename_splits"
              },
              {
                  "fields": {
                      "numbering": [
                          "A",
                          "B",
                          "C",
                          "D",
                          "E",
                          "F",
                          "G",
                          "H",
                          "I",
                          "J",
                          "K",
                          "L",
                          "M",
                          "N",
                          "O",
                          "P",
                          "Q",
                          "R",
                          "S",
                          "T",
                          "U",
                          "V",
                          "W",
                          "X",
                          "Y",
                          "Z"
                      ]
                  },
                  "type": "add_fields"
              },
              {
                  "fields": [
                      "mc_answer1",
                      "mc_answer2",
                      "mc_answer3",
                      "mc_answer4"
                  ],
                  "to_field": "choices",
                  "type": "list_field_values"
              },
              {
                  "mappers": {
                      "correct_answer_num": {
                          "1": "A",
                          "2": "B",
                          "3": "C",
                          "4": "D"
                      }
                  },
                  "type": "map_instance_values"
              },
              {
                  "index_of": "correct_answer_num",
                  "search_in": "numbering",
                  "to_field": "index",
                  "type": "index_of"
              },
              {
                  "field_to_field": {
                      "choices": "_choices",
                      "dialect": "topic",
                      "flores_passage": "context",
                      "index": "_index",
                      "numbering": "_numbering",
                      "question": "sentence1"
                  },
                  "type": "rename_fields"
              },
              {
                  "field": "_numbering",
                  "index": "_index",
                  "to_field": "number",
                  "type": "take_by_field"
              },
              {
                  "field": "_choices",
                  "index": "_index",
                  "to_field": "answer",
                  "type": "take_by_field"
              },
              {
                  "fields": [
                      "_numbering",
                      "_choices"
                  ],
                  "to_field": "choices",
                  "type": "zip_field_values"
              },
              {
                  "field": "choices/*",
                  "process_every_value": true,
                  "separator": ". ",
                  "to_field": "choices_list",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "field": "choices_list",
                  "index": "_index",
                  "to_field": "number_and_answer",
                  "type": "take_by_field"
              },
              {
                  "field": "choices/*/0",
                  "separator": ",",
                  "to_field": "numbers",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "add": [
                      ""
                  ],
                  "field": "choices_list",
                  "to_field": "choices_list",
                  "type": "add_constant"
              },
              {
                  "field": "choices_list",
                  "separator": "\n",
                  "to_field": "choices",
                  "type": "join_str"
              },
              {
                  "field_to_field": {
                      "number": "label"
                  },
                  "type": "rename_fields"
              }
          ],
          "task": {
              "inputs": [
                  "choices",
                  "sentence1",
                  "numbers",
                  "topic",
                  "context"
              ],
              "metrics": [
                  "metrics.accuracy"
              ],
              "outputs": [
                  "label"
              ],
              "type": "form_task"
          },
          "templates": "templates.qa.multiple_choice.context_no_intro.all",
          "type": "task_card"
      }

References: :ref:`metrics.accuracy <metrics.accuracy>`, :ref:`templates.qa.multiple_choice.context_no_intro.all <templates.qa.multiple_choice.context_no_intro.all>`

|
|



.. _cards.belebele.lit_Latn:

----------

lit_Latn
""""""""

.. note:: ID: ``cards.belebele.lit_Latn``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "default",
              "path": "facebook/belebele",
              "split": "lit_Latn",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "mapper": {
                      "lit_Latn": "test"
                  },
                  "type": "rename_splits"
              },
              {
                  "fields": {
                      "numbering": [
                          "A",
                          "B",
                          "C",
                          "D",
                          "E",
                          "F",
                          "G",
                          "H",
                          "I",
                          "J",
                          "K",
                          "L",
                          "M",
                          "N",
                          "O",
                          "P",
                          "Q",
                          "R",
                          "S",
                          "T",
                          "U",
                          "V",
                          "W",
                          "X",
                          "Y",
                          "Z"
                      ]
                  },
                  "type": "add_fields"
              },
              {
                  "fields": [
                      "mc_answer1",
                      "mc_answer2",
                      "mc_answer3",
                      "mc_answer4"
                  ],
                  "to_field": "choices",
                  "type": "list_field_values"
              },
              {
                  "mappers": {
                      "correct_answer_num": {
                          "1": "A",
                          "2": "B",
                          "3": "C",
                          "4": "D"
                      }
                  },
                  "type": "map_instance_values"
              },
              {
                  "index_of": "correct_answer_num",
                  "search_in": "numbering",
                  "to_field": "index",
                  "type": "index_of"
              },
              {
                  "field_to_field": {
                      "choices": "_choices",
                      "dialect": "topic",
                      "flores_passage": "context",
                      "index": "_index",
                      "numbering": "_numbering",
                      "question": "sentence1"
                  },
                  "type": "rename_fields"
              },
              {
                  "field": "_numbering",
                  "index": "_index",
                  "to_field": "number",
                  "type": "take_by_field"
              },
              {
                  "field": "_choices",
                  "index": "_index",
                  "to_field": "answer",
                  "type": "take_by_field"
              },
              {
                  "fields": [
                      "_numbering",
                      "_choices"
                  ],
                  "to_field": "choices",
                  "type": "zip_field_values"
              },
              {
                  "field": "choices/*",
                  "process_every_value": true,
                  "separator": ". ",
                  "to_field": "choices_list",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "field": "choices_list",
                  "index": "_index",
                  "to_field": "number_and_answer",
                  "type": "take_by_field"
              },
              {
                  "field": "choices/*/0",
                  "separator": ",",
                  "to_field": "numbers",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "add": [
                      ""
                  ],
                  "field": "choices_list",
                  "to_field": "choices_list",
                  "type": "add_constant"
              },
              {
                  "field": "choices_list",
                  "separator": "\n",
                  "to_field": "choices",
                  "type": "join_str"
              },
              {
                  "field_to_field": {
                      "number": "label"
                  },
                  "type": "rename_fields"
              }
          ],
          "task": {
              "inputs": [
                  "choices",
                  "sentence1",
                  "numbers",
                  "topic",
                  "context"
              ],
              "metrics": [
                  "metrics.accuracy"
              ],
              "outputs": [
                  "label"
              ],
              "type": "form_task"
          },
          "templates": "templates.qa.multiple_choice.context_no_intro.all",
          "type": "task_card"
      }

References: :ref:`metrics.accuracy <metrics.accuracy>`, :ref:`templates.qa.multiple_choice.context_no_intro.all <templates.qa.multiple_choice.context_no_intro.all>`

|
|



.. _cards.belebele.npi_Latn:

----------

npi_Latn
""""""""

.. note:: ID: ``cards.belebele.npi_Latn``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "default",
              "path": "facebook/belebele",
              "split": "npi_Latn",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "mapper": {
                      "npi_Latn": "test"
                  },
                  "type": "rename_splits"
              },
              {
                  "fields": {
                      "numbering": [
                          "A",
                          "B",
                          "C",
                          "D",
                          "E",
                          "F",
                          "G",
                          "H",
                          "I",
                          "J",
                          "K",
                          "L",
                          "M",
                          "N",
                          "O",
                          "P",
                          "Q",
                          "R",
                          "S",
                          "T",
                          "U",
                          "V",
                          "W",
                          "X",
                          "Y",
                          "Z"
                      ]
                  },
                  "type": "add_fields"
              },
              {
                  "fields": [
                      "mc_answer1",
                      "mc_answer2",
                      "mc_answer3",
                      "mc_answer4"
                  ],
                  "to_field": "choices",
                  "type": "list_field_values"
              },
              {
                  "mappers": {
                      "correct_answer_num": {
                          "1": "A",
                          "2": "B",
                          "3": "C",
                          "4": "D"
                      }
                  },
                  "type": "map_instance_values"
              },
              {
                  "index_of": "correct_answer_num",
                  "search_in": "numbering",
                  "to_field": "index",
                  "type": "index_of"
              },
              {
                  "field_to_field": {
                      "choices": "_choices",
                      "dialect": "topic",
                      "flores_passage": "context",
                      "index": "_index",
                      "numbering": "_numbering",
                      "question": "sentence1"
                  },
                  "type": "rename_fields"
              },
              {
                  "field": "_numbering",
                  "index": "_index",
                  "to_field": "number",
                  "type": "take_by_field"
              },
              {
                  "field": "_choices",
                  "index": "_index",
                  "to_field": "answer",
                  "type": "take_by_field"
              },
              {
                  "fields": [
                      "_numbering",
                      "_choices"
                  ],
                  "to_field": "choices",
                  "type": "zip_field_values"
              },
              {
                  "field": "choices/*",
                  "process_every_value": true,
                  "separator": ". ",
                  "to_field": "choices_list",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "field": "choices_list",
                  "index": "_index",
                  "to_field": "number_and_answer",
                  "type": "take_by_field"
              },
              {
                  "field": "choices/*/0",
                  "separator": ",",
                  "to_field": "numbers",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "add": [
                      ""
                  ],
                  "field": "choices_list",
                  "to_field": "choices_list",
                  "type": "add_constant"
              },
              {
                  "field": "choices_list",
                  "separator": "\n",
                  "to_field": "choices",
                  "type": "join_str"
              },
              {
                  "field_to_field": {
                      "number": "label"
                  },
                  "type": "rename_fields"
              }
          ],
          "task": {
              "inputs": [
                  "choices",
                  "sentence1",
                  "numbers",
                  "topic",
                  "context"
              ],
              "metrics": [
                  "metrics.accuracy"
              ],
              "outputs": [
                  "label"
              ],
              "type": "form_task"
          },
          "templates": "templates.qa.multiple_choice.context_no_intro.all",
          "type": "task_card"
      }

References: :ref:`metrics.accuracy <metrics.accuracy>`, :ref:`templates.qa.multiple_choice.context_no_intro.all <templates.qa.multiple_choice.context_no_intro.all>`

|
|



.. _cards.belebele.afr_Latn:

----------

afr_Latn
""""""""

.. note:: ID: ``cards.belebele.afr_Latn``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "default",
              "path": "facebook/belebele",
              "split": "afr_Latn",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "mapper": {
                      "afr_Latn": "test"
                  },
                  "type": "rename_splits"
              },
              {
                  "fields": {
                      "numbering": [
                          "A",
                          "B",
                          "C",
                          "D",
                          "E",
                          "F",
                          "G",
                          "H",
                          "I",
                          "J",
                          "K",
                          "L",
                          "M",
                          "N",
                          "O",
                          "P",
                          "Q",
                          "R",
                          "S",
                          "T",
                          "U",
                          "V",
                          "W",
                          "X",
                          "Y",
                          "Z"
                      ]
                  },
                  "type": "add_fields"
              },
              {
                  "fields": [
                      "mc_answer1",
                      "mc_answer2",
                      "mc_answer3",
                      "mc_answer4"
                  ],
                  "to_field": "choices",
                  "type": "list_field_values"
              },
              {
                  "mappers": {
                      "correct_answer_num": {
                          "1": "A",
                          "2": "B",
                          "3": "C",
                          "4": "D"
                      }
                  },
                  "type": "map_instance_values"
              },
              {
                  "index_of": "correct_answer_num",
                  "search_in": "numbering",
                  "to_field": "index",
                  "type": "index_of"
              },
              {
                  "field_to_field": {
                      "choices": "_choices",
                      "dialect": "topic",
                      "flores_passage": "context",
                      "index": "_index",
                      "numbering": "_numbering",
                      "question": "sentence1"
                  },
                  "type": "rename_fields"
              },
              {
                  "field": "_numbering",
                  "index": "_index",
                  "to_field": "number",
                  "type": "take_by_field"
              },
              {
                  "field": "_choices",
                  "index": "_index",
                  "to_field": "answer",
                  "type": "take_by_field"
              },
              {
                  "fields": [
                      "_numbering",
                      "_choices"
                  ],
                  "to_field": "choices",
                  "type": "zip_field_values"
              },
              {
                  "field": "choices/*",
                  "process_every_value": true,
                  "separator": ". ",
                  "to_field": "choices_list",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "field": "choices_list",
                  "index": "_index",
                  "to_field": "number_and_answer",
                  "type": "take_by_field"
              },
              {
                  "field": "choices/*/0",
                  "separator": ",",
                  "to_field": "numbers",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "add": [
                      ""
                  ],
                  "field": "choices_list",
                  "to_field": "choices_list",
                  "type": "add_constant"
              },
              {
                  "field": "choices_list",
                  "separator": "\n",
                  "to_field": "choices",
                  "type": "join_str"
              },
              {
                  "field_to_field": {
                      "number": "label"
                  },
                  "type": "rename_fields"
              }
          ],
          "task": {
              "inputs": [
                  "choices",
                  "sentence1",
                  "numbers",
                  "topic",
                  "context"
              ],
              "metrics": [
                  "metrics.accuracy"
              ],
              "outputs": [
                  "label"
              ],
              "type": "form_task"
          },
          "templates": "templates.qa.multiple_choice.context_no_intro.all",
          "type": "task_card"
      }

References: :ref:`metrics.accuracy <metrics.accuracy>`, :ref:`templates.qa.multiple_choice.context_no_intro.all <templates.qa.multiple_choice.context_no_intro.all>`

|
|



.. _cards.belebele.pes_Arab:

----------

pes_Arab
""""""""

.. note:: ID: ``cards.belebele.pes_Arab``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "default",
              "path": "facebook/belebele",
              "split": "pes_Arab",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "mapper": {
                      "pes_Arab": "test"
                  },
                  "type": "rename_splits"
              },
              {
                  "fields": {
                      "numbering": [
                          "A",
                          "B",
                          "C",
                          "D",
                          "E",
                          "F",
                          "G",
                          "H",
                          "I",
                          "J",
                          "K",
                          "L",
                          "M",
                          "N",
                          "O",
                          "P",
                          "Q",
                          "R",
                          "S",
                          "T",
                          "U",
                          "V",
                          "W",
                          "X",
                          "Y",
                          "Z"
                      ]
                  },
                  "type": "add_fields"
              },
              {
                  "fields": [
                      "mc_answer1",
                      "mc_answer2",
                      "mc_answer3",
                      "mc_answer4"
                  ],
                  "to_field": "choices",
                  "type": "list_field_values"
              },
              {
                  "mappers": {
                      "correct_answer_num": {
                          "1": "A",
                          "2": "B",
                          "3": "C",
                          "4": "D"
                      }
                  },
                  "type": "map_instance_values"
              },
              {
                  "index_of": "correct_answer_num",
                  "search_in": "numbering",
                  "to_field": "index",
                  "type": "index_of"
              },
              {
                  "field_to_field": {
                      "choices": "_choices",
                      "dialect": "topic",
                      "flores_passage": "context",
                      "index": "_index",
                      "numbering": "_numbering",
                      "question": "sentence1"
                  },
                  "type": "rename_fields"
              },
              {
                  "field": "_numbering",
                  "index": "_index",
                  "to_field": "number",
                  "type": "take_by_field"
              },
              {
                  "field": "_choices",
                  "index": "_index",
                  "to_field": "answer",
                  "type": "take_by_field"
              },
              {
                  "fields": [
                      "_numbering",
                      "_choices"
                  ],
                  "to_field": "choices",
                  "type": "zip_field_values"
              },
              {
                  "field": "choices/*",
                  "process_every_value": true,
                  "separator": ". ",
                  "to_field": "choices_list",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "field": "choices_list",
                  "index": "_index",
                  "to_field": "number_and_answer",
                  "type": "take_by_field"
              },
              {
                  "field": "choices/*/0",
                  "separator": ",",
                  "to_field": "numbers",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "add": [
                      ""
                  ],
                  "field": "choices_list",
                  "to_field": "choices_list",
                  "type": "add_constant"
              },
              {
                  "field": "choices_list",
                  "separator": "\n",
                  "to_field": "choices",
                  "type": "join_str"
              },
              {
                  "field_to_field": {
                      "number": "label"
                  },
                  "type": "rename_fields"
              }
          ],
          "task": {
              "inputs": [
                  "choices",
                  "sentence1",
                  "numbers",
                  "topic",
                  "context"
              ],
              "metrics": [
                  "metrics.accuracy"
              ],
              "outputs": [
                  "label"
              ],
              "type": "form_task"
          },
          "templates": "templates.qa.multiple_choice.context_no_intro.all",
          "type": "task_card"
      }

References: :ref:`metrics.accuracy <metrics.accuracy>`, :ref:`templates.qa.multiple_choice.context_no_intro.all <templates.qa.multiple_choice.context_no_intro.all>`

|
|



.. _cards.belebele.zho_Hant:

----------

zho_Hant
""""""""

.. note:: ID: ``cards.belebele.zho_Hant``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "default",
              "path": "facebook/belebele",
              "split": "zho_Hant",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "mapper": {
                      "zho_Hant": "test"
                  },
                  "type": "rename_splits"
              },
              {
                  "fields": {
                      "numbering": [
                          "A",
                          "B",
                          "C",
                          "D",
                          "E",
                          "F",
                          "G",
                          "H",
                          "I",
                          "J",
                          "K",
                          "L",
                          "M",
                          "N",
                          "O",
                          "P",
                          "Q",
                          "R",
                          "S",
                          "T",
                          "U",
                          "V",
                          "W",
                          "X",
                          "Y",
                          "Z"
                      ]
                  },
                  "type": "add_fields"
              },
              {
                  "fields": [
                      "mc_answer1",
                      "mc_answer2",
                      "mc_answer3",
                      "mc_answer4"
                  ],
                  "to_field": "choices",
                  "type": "list_field_values"
              },
              {
                  "mappers": {
                      "correct_answer_num": {
                          "1": "A",
                          "2": "B",
                          "3": "C",
                          "4": "D"
                      }
                  },
                  "type": "map_instance_values"
              },
              {
                  "index_of": "correct_answer_num",
                  "search_in": "numbering",
                  "to_field": "index",
                  "type": "index_of"
              },
              {
                  "field_to_field": {
                      "choices": "_choices",
                      "dialect": "topic",
                      "flores_passage": "context",
                      "index": "_index",
                      "numbering": "_numbering",
                      "question": "sentence1"
                  },
                  "type": "rename_fields"
              },
              {
                  "field": "_numbering",
                  "index": "_index",
                  "to_field": "number",
                  "type": "take_by_field"
              },
              {
                  "field": "_choices",
                  "index": "_index",
                  "to_field": "answer",
                  "type": "take_by_field"
              },
              {
                  "fields": [
                      "_numbering",
                      "_choices"
                  ],
                  "to_field": "choices",
                  "type": "zip_field_values"
              },
              {
                  "field": "choices/*",
                  "process_every_value": true,
                  "separator": ". ",
                  "to_field": "choices_list",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "field": "choices_list",
                  "index": "_index",
                  "to_field": "number_and_answer",
                  "type": "take_by_field"
              },
              {
                  "field": "choices/*/0",
                  "separator": ",",
                  "to_field": "numbers",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "add": [
                      ""
                  ],
                  "field": "choices_list",
                  "to_field": "choices_list",
                  "type": "add_constant"
              },
              {
                  "field": "choices_list",
                  "separator": "\n",
                  "to_field": "choices",
                  "type": "join_str"
              },
              {
                  "field_to_field": {
                      "number": "label"
                  },
                  "type": "rename_fields"
              }
          ],
          "task": {
              "inputs": [
                  "choices",
                  "sentence1",
                  "numbers",
                  "topic",
                  "context"
              ],
              "metrics": [
                  "metrics.accuracy"
              ],
              "outputs": [
                  "label"
              ],
              "type": "form_task"
          },
          "templates": "templates.qa.multiple_choice.context_no_intro.all",
          "type": "task_card"
      }

References: :ref:`metrics.accuracy <metrics.accuracy>`, :ref:`templates.qa.multiple_choice.context_no_intro.all <templates.qa.multiple_choice.context_no_intro.all>`

|
|



.. _cards.belebele.uzn_Latn:

----------

uzn_Latn
""""""""

.. note:: ID: ``cards.belebele.uzn_Latn``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "default",
              "path": "facebook/belebele",
              "split": "uzn_Latn",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "mapper": {
                      "uzn_Latn": "test"
                  },
                  "type": "rename_splits"
              },
              {
                  "fields": {
                      "numbering": [
                          "A",
                          "B",
                          "C",
                          "D",
                          "E",
                          "F",
                          "G",
                          "H",
                          "I",
                          "J",
                          "K",
                          "L",
                          "M",
                          "N",
                          "O",
                          "P",
                          "Q",
                          "R",
                          "S",
                          "T",
                          "U",
                          "V",
                          "W",
                          "X",
                          "Y",
                          "Z"
                      ]
                  },
                  "type": "add_fields"
              },
              {
                  "fields": [
                      "mc_answer1",
                      "mc_answer2",
                      "mc_answer3",
                      "mc_answer4"
                  ],
                  "to_field": "choices",
                  "type": "list_field_values"
              },
              {
                  "mappers": {
                      "correct_answer_num": {
                          "1": "A",
                          "2": "B",
                          "3": "C",
                          "4": "D"
                      }
                  },
                  "type": "map_instance_values"
              },
              {
                  "index_of": "correct_answer_num",
                  "search_in": "numbering",
                  "to_field": "index",
                  "type": "index_of"
              },
              {
                  "field_to_field": {
                      "choices": "_choices",
                      "dialect": "topic",
                      "flores_passage": "context",
                      "index": "_index",
                      "numbering": "_numbering",
                      "question": "sentence1"
                  },
                  "type": "rename_fields"
              },
              {
                  "field": "_numbering",
                  "index": "_index",
                  "to_field": "number",
                  "type": "take_by_field"
              },
              {
                  "field": "_choices",
                  "index": "_index",
                  "to_field": "answer",
                  "type": "take_by_field"
              },
              {
                  "fields": [
                      "_numbering",
                      "_choices"
                  ],
                  "to_field": "choices",
                  "type": "zip_field_values"
              },
              {
                  "field": "choices/*",
                  "process_every_value": true,
                  "separator": ". ",
                  "to_field": "choices_list",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "field": "choices_list",
                  "index": "_index",
                  "to_field": "number_and_answer",
                  "type": "take_by_field"
              },
              {
                  "field": "choices/*/0",
                  "separator": ",",
                  "to_field": "numbers",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "add": [
                      ""
                  ],
                  "field": "choices_list",
                  "to_field": "choices_list",
                  "type": "add_constant"
              },
              {
                  "field": "choices_list",
                  "separator": "\n",
                  "to_field": "choices",
                  "type": "join_str"
              },
              {
                  "field_to_field": {
                      "number": "label"
                  },
                  "type": "rename_fields"
              }
          ],
          "task": {
              "inputs": [
                  "choices",
                  "sentence1",
                  "numbers",
                  "topic",
                  "context"
              ],
              "metrics": [
                  "metrics.accuracy"
              ],
              "outputs": [
                  "label"
              ],
              "type": "form_task"
          },
          "templates": "templates.qa.multiple_choice.context_no_intro.all",
          "type": "task_card"
      }

References: :ref:`metrics.accuracy <metrics.accuracy>`, :ref:`templates.qa.multiple_choice.context_no_intro.all <templates.qa.multiple_choice.context_no_intro.all>`

|
|



.. _cards.belebele.mkd_Cyrl:

----------

mkd_Cyrl
""""""""

.. note:: ID: ``cards.belebele.mkd_Cyrl``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "default",
              "path": "facebook/belebele",
              "split": "mkd_Cyrl",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "mapper": {
                      "mkd_Cyrl": "test"
                  },
                  "type": "rename_splits"
              },
              {
                  "fields": {
                      "numbering": [
                          "A",
                          "B",
                          "C",
                          "D",
                          "E",
                          "F",
                          "G",
                          "H",
                          "I",
                          "J",
                          "K",
                          "L",
                          "M",
                          "N",
                          "O",
                          "P",
                          "Q",
                          "R",
                          "S",
                          "T",
                          "U",
                          "V",
                          "W",
                          "X",
                          "Y",
                          "Z"
                      ]
                  },
                  "type": "add_fields"
              },
              {
                  "fields": [
                      "mc_answer1",
                      "mc_answer2",
                      "mc_answer3",
                      "mc_answer4"
                  ],
                  "to_field": "choices",
                  "type": "list_field_values"
              },
              {
                  "mappers": {
                      "correct_answer_num": {
                          "1": "A",
                          "2": "B",
                          "3": "C",
                          "4": "D"
                      }
                  },
                  "type": "map_instance_values"
              },
              {
                  "index_of": "correct_answer_num",
                  "search_in": "numbering",
                  "to_field": "index",
                  "type": "index_of"
              },
              {
                  "field_to_field": {
                      "choices": "_choices",
                      "dialect": "topic",
                      "flores_passage": "context",
                      "index": "_index",
                      "numbering": "_numbering",
                      "question": "sentence1"
                  },
                  "type": "rename_fields"
              },
              {
                  "field": "_numbering",
                  "index": "_index",
                  "to_field": "number",
                  "type": "take_by_field"
              },
              {
                  "field": "_choices",
                  "index": "_index",
                  "to_field": "answer",
                  "type": "take_by_field"
              },
              {
                  "fields": [
                      "_numbering",
                      "_choices"
                  ],
                  "to_field": "choices",
                  "type": "zip_field_values"
              },
              {
                  "field": "choices/*",
                  "process_every_value": true,
                  "separator": ". ",
                  "to_field": "choices_list",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "field": "choices_list",
                  "index": "_index",
                  "to_field": "number_and_answer",
                  "type": "take_by_field"
              },
              {
                  "field": "choices/*/0",
                  "separator": ",",
                  "to_field": "numbers",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "add": [
                      ""
                  ],
                  "field": "choices_list",
                  "to_field": "choices_list",
                  "type": "add_constant"
              },
              {
                  "field": "choices_list",
                  "separator": "\n",
                  "to_field": "choices",
                  "type": "join_str"
              },
              {
                  "field_to_field": {
                      "number": "label"
                  },
                  "type": "rename_fields"
              }
          ],
          "task": {
              "inputs": [
                  "choices",
                  "sentence1",
                  "numbers",
                  "topic",
                  "context"
              ],
              "metrics": [
                  "metrics.accuracy"
              ],
              "outputs": [
                  "label"
              ],
              "type": "form_task"
          },
          "templates": "templates.qa.multiple_choice.context_no_intro.all",
          "type": "task_card"
      }

References: :ref:`metrics.accuracy <metrics.accuracy>`, :ref:`templates.qa.multiple_choice.context_no_intro.all <templates.qa.multiple_choice.context_no_intro.all>`

|
|



.. _cards.belebele.kor_Hang:

----------

kor_Hang
""""""""

.. note:: ID: ``cards.belebele.kor_Hang``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "default",
              "path": "facebook/belebele",
              "split": "kor_Hang",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "mapper": {
                      "kor_Hang": "test"
                  },
                  "type": "rename_splits"
              },
              {
                  "fields": {
                      "numbering": [
                          "A",
                          "B",
                          "C",
                          "D",
                          "E",
                          "F",
                          "G",
                          "H",
                          "I",
                          "J",
                          "K",
                          "L",
                          "M",
                          "N",
                          "O",
                          "P",
                          "Q",
                          "R",
                          "S",
                          "T",
                          "U",
                          "V",
                          "W",
                          "X",
                          "Y",
                          "Z"
                      ]
                  },
                  "type": "add_fields"
              },
              {
                  "fields": [
                      "mc_answer1",
                      "mc_answer2",
                      "mc_answer3",
                      "mc_answer4"
                  ],
                  "to_field": "choices",
                  "type": "list_field_values"
              },
              {
                  "mappers": {
                      "correct_answer_num": {
                          "1": "A",
                          "2": "B",
                          "3": "C",
                          "4": "D"
                      }
                  },
                  "type": "map_instance_values"
              },
              {
                  "index_of": "correct_answer_num",
                  "search_in": "numbering",
                  "to_field": "index",
                  "type": "index_of"
              },
              {
                  "field_to_field": {
                      "choices": "_choices",
                      "dialect": "topic",
                      "flores_passage": "context",
                      "index": "_index",
                      "numbering": "_numbering",
                      "question": "sentence1"
                  },
                  "type": "rename_fields"
              },
              {
                  "field": "_numbering",
                  "index": "_index",
                  "to_field": "number",
                  "type": "take_by_field"
              },
              {
                  "field": "_choices",
                  "index": "_index",
                  "to_field": "answer",
                  "type": "take_by_field"
              },
              {
                  "fields": [
                      "_numbering",
                      "_choices"
                  ],
                  "to_field": "choices",
                  "type": "zip_field_values"
              },
              {
                  "field": "choices/*",
                  "process_every_value": true,
                  "separator": ". ",
                  "to_field": "choices_list",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "field": "choices_list",
                  "index": "_index",
                  "to_field": "number_and_answer",
                  "type": "take_by_field"
              },
              {
                  "field": "choices/*/0",
                  "separator": ",",
                  "to_field": "numbers",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "add": [
                      ""
                  ],
                  "field": "choices_list",
                  "to_field": "choices_list",
                  "type": "add_constant"
              },
              {
                  "field": "choices_list",
                  "separator": "\n",
                  "to_field": "choices",
                  "type": "join_str"
              },
              {
                  "field_to_field": {
                      "number": "label"
                  },
                  "type": "rename_fields"
              }
          ],
          "task": {
              "inputs": [
                  "choices",
                  "sentence1",
                  "numbers",
                  "topic",
                  "context"
              ],
              "metrics": [
                  "metrics.accuracy"
              ],
              "outputs": [
                  "label"
              ],
              "type": "form_task"
          },
          "templates": "templates.qa.multiple_choice.context_no_intro.all",
          "type": "task_card"
      }

References: :ref:`metrics.accuracy <metrics.accuracy>`, :ref:`templates.qa.multiple_choice.context_no_intro.all <templates.qa.multiple_choice.context_no_intro.all>`

|
|



.. _cards.belebele.ind_Latn:

----------

ind_Latn
""""""""

.. note:: ID: ``cards.belebele.ind_Latn``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "default",
              "path": "facebook/belebele",
              "split": "ind_Latn",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "mapper": {
                      "ind_Latn": "test"
                  },
                  "type": "rename_splits"
              },
              {
                  "fields": {
                      "numbering": [
                          "A",
                          "B",
                          "C",
                          "D",
                          "E",
                          "F",
                          "G",
                          "H",
                          "I",
                          "J",
                          "K",
                          "L",
                          "M",
                          "N",
                          "O",
                          "P",
                          "Q",
                          "R",
                          "S",
                          "T",
                          "U",
                          "V",
                          "W",
                          "X",
                          "Y",
                          "Z"
                      ]
                  },
                  "type": "add_fields"
              },
              {
                  "fields": [
                      "mc_answer1",
                      "mc_answer2",
                      "mc_answer3",
                      "mc_answer4"
                  ],
                  "to_field": "choices",
                  "type": "list_field_values"
              },
              {
                  "mappers": {
                      "correct_answer_num": {
                          "1": "A",
                          "2": "B",
                          "3": "C",
                          "4": "D"
                      }
                  },
                  "type": "map_instance_values"
              },
              {
                  "index_of": "correct_answer_num",
                  "search_in": "numbering",
                  "to_field": "index",
                  "type": "index_of"
              },
              {
                  "field_to_field": {
                      "choices": "_choices",
                      "dialect": "topic",
                      "flores_passage": "context",
                      "index": "_index",
                      "numbering": "_numbering",
                      "question": "sentence1"
                  },
                  "type": "rename_fields"
              },
              {
                  "field": "_numbering",
                  "index": "_index",
                  "to_field": "number",
                  "type": "take_by_field"
              },
              {
                  "field": "_choices",
                  "index": "_index",
                  "to_field": "answer",
                  "type": "take_by_field"
              },
              {
                  "fields": [
                      "_numbering",
                      "_choices"
                  ],
                  "to_field": "choices",
                  "type": "zip_field_values"
              },
              {
                  "field": "choices/*",
                  "process_every_value": true,
                  "separator": ". ",
                  "to_field": "choices_list",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "field": "choices_list",
                  "index": "_index",
                  "to_field": "number_and_answer",
                  "type": "take_by_field"
              },
              {
                  "field": "choices/*/0",
                  "separator": ",",
                  "to_field": "numbers",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "add": [
                      ""
                  ],
                  "field": "choices_list",
                  "to_field": "choices_list",
                  "type": "add_constant"
              },
              {
                  "field": "choices_list",
                  "separator": "\n",
                  "to_field": "choices",
                  "type": "join_str"
              },
              {
                  "field_to_field": {
                      "number": "label"
                  },
                  "type": "rename_fields"
              }
          ],
          "task": {
              "inputs": [
                  "choices",
                  "sentence1",
                  "numbers",
                  "topic",
                  "context"
              ],
              "metrics": [
                  "metrics.accuracy"
              ],
              "outputs": [
                  "label"
              ],
              "type": "form_task"
          },
          "templates": "templates.qa.multiple_choice.context_no_intro.all",
          "type": "task_card"
      }

References: :ref:`metrics.accuracy <metrics.accuracy>`, :ref:`templates.qa.multiple_choice.context_no_intro.all <templates.qa.multiple_choice.context_no_intro.all>`

|
|



.. _cards.belebele.kir_Cyrl:

----------

kir_Cyrl
""""""""

.. note:: ID: ``cards.belebele.kir_Cyrl``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "default",
              "path": "facebook/belebele",
              "split": "kir_Cyrl",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "mapper": {
                      "kir_Cyrl": "test"
                  },
                  "type": "rename_splits"
              },
              {
                  "fields": {
                      "numbering": [
                          "A",
                          "B",
                          "C",
                          "D",
                          "E",
                          "F",
                          "G",
                          "H",
                          "I",
                          "J",
                          "K",
                          "L",
                          "M",
                          "N",
                          "O",
                          "P",
                          "Q",
                          "R",
                          "S",
                          "T",
                          "U",
                          "V",
                          "W",
                          "X",
                          "Y",
                          "Z"
                      ]
                  },
                  "type": "add_fields"
              },
              {
                  "fields": [
                      "mc_answer1",
                      "mc_answer2",
                      "mc_answer3",
                      "mc_answer4"
                  ],
                  "to_field": "choices",
                  "type": "list_field_values"
              },
              {
                  "mappers": {
                      "correct_answer_num": {
                          "1": "A",
                          "2": "B",
                          "3": "C",
                          "4": "D"
                      }
                  },
                  "type": "map_instance_values"
              },
              {
                  "index_of": "correct_answer_num",
                  "search_in": "numbering",
                  "to_field": "index",
                  "type": "index_of"
              },
              {
                  "field_to_field": {
                      "choices": "_choices",
                      "dialect": "topic",
                      "flores_passage": "context",
                      "index": "_index",
                      "numbering": "_numbering",
                      "question": "sentence1"
                  },
                  "type": "rename_fields"
              },
              {
                  "field": "_numbering",
                  "index": "_index",
                  "to_field": "number",
                  "type": "take_by_field"
              },
              {
                  "field": "_choices",
                  "index": "_index",
                  "to_field": "answer",
                  "type": "take_by_field"
              },
              {
                  "fields": [
                      "_numbering",
                      "_choices"
                  ],
                  "to_field": "choices",
                  "type": "zip_field_values"
              },
              {
                  "field": "choices/*",
                  "process_every_value": true,
                  "separator": ". ",
                  "to_field": "choices_list",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "field": "choices_list",
                  "index": "_index",
                  "to_field": "number_and_answer",
                  "type": "take_by_field"
              },
              {
                  "field": "choices/*/0",
                  "separator": ",",
                  "to_field": "numbers",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "add": [
                      ""
                  ],
                  "field": "choices_list",
                  "to_field": "choices_list",
                  "type": "add_constant"
              },
              {
                  "field": "choices_list",
                  "separator": "\n",
                  "to_field": "choices",
                  "type": "join_str"
              },
              {
                  "field_to_field": {
                      "number": "label"
                  },
                  "type": "rename_fields"
              }
          ],
          "task": {
              "inputs": [
                  "choices",
                  "sentence1",
                  "numbers",
                  "topic",
                  "context"
              ],
              "metrics": [
                  "metrics.accuracy"
              ],
              "outputs": [
                  "label"
              ],
              "type": "form_task"
          },
          "templates": "templates.qa.multiple_choice.context_no_intro.all",
          "type": "task_card"
      }

References: :ref:`metrics.accuracy <metrics.accuracy>`, :ref:`templates.qa.multiple_choice.context_no_intro.all <templates.qa.multiple_choice.context_no_intro.all>`

|
|



.. _cards.belebele.khk_Cyrl:

----------

khk_Cyrl
""""""""

.. note:: ID: ``cards.belebele.khk_Cyrl``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "default",
              "path": "facebook/belebele",
              "split": "khk_Cyrl",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "mapper": {
                      "khk_Cyrl": "test"
                  },
                  "type": "rename_splits"
              },
              {
                  "fields": {
                      "numbering": [
                          "A",
                          "B",
                          "C",
                          "D",
                          "E",
                          "F",
                          "G",
                          "H",
                          "I",
                          "J",
                          "K",
                          "L",
                          "M",
                          "N",
                          "O",
                          "P",
                          "Q",
                          "R",
                          "S",
                          "T",
                          "U",
                          "V",
                          "W",
                          "X",
                          "Y",
                          "Z"
                      ]
                  },
                  "type": "add_fields"
              },
              {
                  "fields": [
                      "mc_answer1",
                      "mc_answer2",
                      "mc_answer3",
                      "mc_answer4"
                  ],
                  "to_field": "choices",
                  "type": "list_field_values"
              },
              {
                  "mappers": {
                      "correct_answer_num": {
                          "1": "A",
                          "2": "B",
                          "3": "C",
                          "4": "D"
                      }
                  },
                  "type": "map_instance_values"
              },
              {
                  "index_of": "correct_answer_num",
                  "search_in": "numbering",
                  "to_field": "index",
                  "type": "index_of"
              },
              {
                  "field_to_field": {
                      "choices": "_choices",
                      "dialect": "topic",
                      "flores_passage": "context",
                      "index": "_index",
                      "numbering": "_numbering",
                      "question": "sentence1"
                  },
                  "type": "rename_fields"
              },
              {
                  "field": "_numbering",
                  "index": "_index",
                  "to_field": "number",
                  "type": "take_by_field"
              },
              {
                  "field": "_choices",
                  "index": "_index",
                  "to_field": "answer",
                  "type": "take_by_field"
              },
              {
                  "fields": [
                      "_numbering",
                      "_choices"
                  ],
                  "to_field": "choices",
                  "type": "zip_field_values"
              },
              {
                  "field": "choices/*",
                  "process_every_value": true,
                  "separator": ". ",
                  "to_field": "choices_list",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "field": "choices_list",
                  "index": "_index",
                  "to_field": "number_and_answer",
                  "type": "take_by_field"
              },
              {
                  "field": "choices/*/0",
                  "separator": ",",
                  "to_field": "numbers",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "add": [
                      ""
                  ],
                  "field": "choices_list",
                  "to_field": "choices_list",
                  "type": "add_constant"
              },
              {
                  "field": "choices_list",
                  "separator": "\n",
                  "to_field": "choices",
                  "type": "join_str"
              },
              {
                  "field_to_field": {
                      "number": "label"
                  },
                  "type": "rename_fields"
              }
          ],
          "task": {
              "inputs": [
                  "choices",
                  "sentence1",
                  "numbers",
                  "topic",
                  "context"
              ],
              "metrics": [
                  "metrics.accuracy"
              ],
              "outputs": [
                  "label"
              ],
              "type": "form_task"
          },
          "templates": "templates.qa.multiple_choice.context_no_intro.all",
          "type": "task_card"
      }

References: :ref:`metrics.accuracy <metrics.accuracy>`, :ref:`templates.qa.multiple_choice.context_no_intro.all <templates.qa.multiple_choice.context_no_intro.all>`

|
|



.. _cards.belebele.zho_Hans:

----------

zho_Hans
""""""""

.. note:: ID: ``cards.belebele.zho_Hans``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "default",
              "path": "facebook/belebele",
              "split": "zho_Hans",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "mapper": {
                      "zho_Hans": "test"
                  },
                  "type": "rename_splits"
              },
              {
                  "fields": {
                      "numbering": [
                          "A",
                          "B",
                          "C",
                          "D",
                          "E",
                          "F",
                          "G",
                          "H",
                          "I",
                          "J",
                          "K",
                          "L",
                          "M",
                          "N",
                          "O",
                          "P",
                          "Q",
                          "R",
                          "S",
                          "T",
                          "U",
                          "V",
                          "W",
                          "X",
                          "Y",
                          "Z"
                      ]
                  },
                  "type": "add_fields"
              },
              {
                  "fields": [
                      "mc_answer1",
                      "mc_answer2",
                      "mc_answer3",
                      "mc_answer4"
                  ],
                  "to_field": "choices",
                  "type": "list_field_values"
              },
              {
                  "mappers": {
                      "correct_answer_num": {
                          "1": "A",
                          "2": "B",
                          "3": "C",
                          "4": "D"
                      }
                  },
                  "type": "map_instance_values"
              },
              {
                  "index_of": "correct_answer_num",
                  "search_in": "numbering",
                  "to_field": "index",
                  "type": "index_of"
              },
              {
                  "field_to_field": {
                      "choices": "_choices",
                      "dialect": "topic",
                      "flores_passage": "context",
                      "index": "_index",
                      "numbering": "_numbering",
                      "question": "sentence1"
                  },
                  "type": "rename_fields"
              },
              {
                  "field": "_numbering",
                  "index": "_index",
                  "to_field": "number",
                  "type": "take_by_field"
              },
              {
                  "field": "_choices",
                  "index": "_index",
                  "to_field": "answer",
                  "type": "take_by_field"
              },
              {
                  "fields": [
                      "_numbering",
                      "_choices"
                  ],
                  "to_field": "choices",
                  "type": "zip_field_values"
              },
              {
                  "field": "choices/*",
                  "process_every_value": true,
                  "separator": ". ",
                  "to_field": "choices_list",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "field": "choices_list",
                  "index": "_index",
                  "to_field": "number_and_answer",
                  "type": "take_by_field"
              },
              {
                  "field": "choices/*/0",
                  "separator": ",",
                  "to_field": "numbers",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "add": [
                      ""
                  ],
                  "field": "choices_list",
                  "to_field": "choices_list",
                  "type": "add_constant"
              },
              {
                  "field": "choices_list",
                  "separator": "\n",
                  "to_field": "choices",
                  "type": "join_str"
              },
              {
                  "field_to_field": {
                      "number": "label"
                  },
                  "type": "rename_fields"
              }
          ],
          "task": {
              "inputs": [
                  "choices",
                  "sentence1",
                  "numbers",
                  "topic",
                  "context"
              ],
              "metrics": [
                  "metrics.accuracy"
              ],
              "outputs": [
                  "label"
              ],
              "type": "form_task"
          },
          "templates": "templates.qa.multiple_choice.context_no_intro.all",
          "type": "task_card"
      }

References: :ref:`metrics.accuracy <metrics.accuracy>`, :ref:`templates.qa.multiple_choice.context_no_intro.all <templates.qa.multiple_choice.context_no_intro.all>`

|
|



.. _cards.belebele.arb_Arab:

----------

arb_Arab
""""""""

.. note:: ID: ``cards.belebele.arb_Arab``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "default",
              "path": "facebook/belebele",
              "split": "arb_Arab",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "mapper": {
                      "arb_Arab": "test"
                  },
                  "type": "rename_splits"
              },
              {
                  "fields": {
                      "numbering": [
                          "A",
                          "B",
                          "C",
                          "D",
                          "E",
                          "F",
                          "G",
                          "H",
                          "I",
                          "J",
                          "K",
                          "L",
                          "M",
                          "N",
                          "O",
                          "P",
                          "Q",
                          "R",
                          "S",
                          "T",
                          "U",
                          "V",
                          "W",
                          "X",
                          "Y",
                          "Z"
                      ]
                  },
                  "type": "add_fields"
              },
              {
                  "fields": [
                      "mc_answer1",
                      "mc_answer2",
                      "mc_answer3",
                      "mc_answer4"
                  ],
                  "to_field": "choices",
                  "type": "list_field_values"
              },
              {
                  "mappers": {
                      "correct_answer_num": {
                          "1": "A",
                          "2": "B",
                          "3": "C",
                          "4": "D"
                      }
                  },
                  "type": "map_instance_values"
              },
              {
                  "index_of": "correct_answer_num",
                  "search_in": "numbering",
                  "to_field": "index",
                  "type": "index_of"
              },
              {
                  "field_to_field": {
                      "choices": "_choices",
                      "dialect": "topic",
                      "flores_passage": "context",
                      "index": "_index",
                      "numbering": "_numbering",
                      "question": "sentence1"
                  },
                  "type": "rename_fields"
              },
              {
                  "field": "_numbering",
                  "index": "_index",
                  "to_field": "number",
                  "type": "take_by_field"
              },
              {
                  "field": "_choices",
                  "index": "_index",
                  "to_field": "answer",
                  "type": "take_by_field"
              },
              {
                  "fields": [
                      "_numbering",
                      "_choices"
                  ],
                  "to_field": "choices",
                  "type": "zip_field_values"
              },
              {
                  "field": "choices/*",
                  "process_every_value": true,
                  "separator": ". ",
                  "to_field": "choices_list",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "field": "choices_list",
                  "index": "_index",
                  "to_field": "number_and_answer",
                  "type": "take_by_field"
              },
              {
                  "field": "choices/*/0",
                  "separator": ",",
                  "to_field": "numbers",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "add": [
                      ""
                  ],
                  "field": "choices_list",
                  "to_field": "choices_list",
                  "type": "add_constant"
              },
              {
                  "field": "choices_list",
                  "separator": "\n",
                  "to_field": "choices",
                  "type": "join_str"
              },
              {
                  "field_to_field": {
                      "number": "label"
                  },
                  "type": "rename_fields"
              }
          ],
          "task": {
              "inputs": [
                  "choices",
                  "sentence1",
                  "numbers",
                  "topic",
                  "context"
              ],
              "metrics": [
                  "metrics.accuracy"
              ],
              "outputs": [
                  "label"
              ],
              "type": "form_task"
          },
          "templates": "templates.qa.multiple_choice.context_no_intro.all",
          "type": "task_card"
      }

References: :ref:`metrics.accuracy <metrics.accuracy>`, :ref:`templates.qa.multiple_choice.context_no_intro.all <templates.qa.multiple_choice.context_no_intro.all>`

|
|



.. _cards.belebele.tsn_Latn:

----------

tsn_Latn
""""""""

.. note:: ID: ``cards.belebele.tsn_Latn``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "default",
              "path": "facebook/belebele",
              "split": "tsn_Latn",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "mapper": {
                      "tsn_Latn": "test"
                  },
                  "type": "rename_splits"
              },
              {
                  "fields": {
                      "numbering": [
                          "A",
                          "B",
                          "C",
                          "D",
                          "E",
                          "F",
                          "G",
                          "H",
                          "I",
                          "J",
                          "K",
                          "L",
                          "M",
                          "N",
                          "O",
                          "P",
                          "Q",
                          "R",
                          "S",
                          "T",
                          "U",
                          "V",
                          "W",
                          "X",
                          "Y",
                          "Z"
                      ]
                  },
                  "type": "add_fields"
              },
              {
                  "fields": [
                      "mc_answer1",
                      "mc_answer2",
                      "mc_answer3",
                      "mc_answer4"
                  ],
                  "to_field": "choices",
                  "type": "list_field_values"
              },
              {
                  "mappers": {
                      "correct_answer_num": {
                          "1": "A",
                          "2": "B",
                          "3": "C",
                          "4": "D"
                      }
                  },
                  "type": "map_instance_values"
              },
              {
                  "index_of": "correct_answer_num",
                  "search_in": "numbering",
                  "to_field": "index",
                  "type": "index_of"
              },
              {
                  "field_to_field": {
                      "choices": "_choices",
                      "dialect": "topic",
                      "flores_passage": "context",
                      "index": "_index",
                      "numbering": "_numbering",
                      "question": "sentence1"
                  },
                  "type": "rename_fields"
              },
              {
                  "field": "_numbering",
                  "index": "_index",
                  "to_field": "number",
                  "type": "take_by_field"
              },
              {
                  "field": "_choices",
                  "index": "_index",
                  "to_field": "answer",
                  "type": "take_by_field"
              },
              {
                  "fields": [
                      "_numbering",
                      "_choices"
                  ],
                  "to_field": "choices",
                  "type": "zip_field_values"
              },
              {
                  "field": "choices/*",
                  "process_every_value": true,
                  "separator": ". ",
                  "to_field": "choices_list",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "field": "choices_list",
                  "index": "_index",
                  "to_field": "number_and_answer",
                  "type": "take_by_field"
              },
              {
                  "field": "choices/*/0",
                  "separator": ",",
                  "to_field": "numbers",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "add": [
                      ""
                  ],
                  "field": "choices_list",
                  "to_field": "choices_list",
                  "type": "add_constant"
              },
              {
                  "field": "choices_list",
                  "separator": "\n",
                  "to_field": "choices",
                  "type": "join_str"
              },
              {
                  "field_to_field": {
                      "number": "label"
                  },
                  "type": "rename_fields"
              }
          ],
          "task": {
              "inputs": [
                  "choices",
                  "sentence1",
                  "numbers",
                  "topic",
                  "context"
              ],
              "metrics": [
                  "metrics.accuracy"
              ],
              "outputs": [
                  "label"
              ],
              "type": "form_task"
          },
          "templates": "templates.qa.multiple_choice.context_no_intro.all",
          "type": "task_card"
      }

References: :ref:`metrics.accuracy <metrics.accuracy>`, :ref:`templates.qa.multiple_choice.context_no_intro.all <templates.qa.multiple_choice.context_no_intro.all>`

|
|



.. _cards.belebele.fin_Latn:

----------

fin_Latn
""""""""

.. note:: ID: ``cards.belebele.fin_Latn``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "default",
              "path": "facebook/belebele",
              "split": "fin_Latn",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "mapper": {
                      "fin_Latn": "test"
                  },
                  "type": "rename_splits"
              },
              {
                  "fields": {
                      "numbering": [
                          "A",
                          "B",
                          "C",
                          "D",
                          "E",
                          "F",
                          "G",
                          "H",
                          "I",
                          "J",
                          "K",
                          "L",
                          "M",
                          "N",
                          "O",
                          "P",
                          "Q",
                          "R",
                          "S",
                          "T",
                          "U",
                          "V",
                          "W",
                          "X",
                          "Y",
                          "Z"
                      ]
                  },
                  "type": "add_fields"
              },
              {
                  "fields": [
                      "mc_answer1",
                      "mc_answer2",
                      "mc_answer3",
                      "mc_answer4"
                  ],
                  "to_field": "choices",
                  "type": "list_field_values"
              },
              {
                  "mappers": {
                      "correct_answer_num": {
                          "1": "A",
                          "2": "B",
                          "3": "C",
                          "4": "D"
                      }
                  },
                  "type": "map_instance_values"
              },
              {
                  "index_of": "correct_answer_num",
                  "search_in": "numbering",
                  "to_field": "index",
                  "type": "index_of"
              },
              {
                  "field_to_field": {
                      "choices": "_choices",
                      "dialect": "topic",
                      "flores_passage": "context",
                      "index": "_index",
                      "numbering": "_numbering",
                      "question": "sentence1"
                  },
                  "type": "rename_fields"
              },
              {
                  "field": "_numbering",
                  "index": "_index",
                  "to_field": "number",
                  "type": "take_by_field"
              },
              {
                  "field": "_choices",
                  "index": "_index",
                  "to_field": "answer",
                  "type": "take_by_field"
              },
              {
                  "fields": [
                      "_numbering",
                      "_choices"
                  ],
                  "to_field": "choices",
                  "type": "zip_field_values"
              },
              {
                  "field": "choices/*",
                  "process_every_value": true,
                  "separator": ". ",
                  "to_field": "choices_list",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "field": "choices_list",
                  "index": "_index",
                  "to_field": "number_and_answer",
                  "type": "take_by_field"
              },
              {
                  "field": "choices/*/0",
                  "separator": ",",
                  "to_field": "numbers",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "add": [
                      ""
                  ],
                  "field": "choices_list",
                  "to_field": "choices_list",
                  "type": "add_constant"
              },
              {
                  "field": "choices_list",
                  "separator": "\n",
                  "to_field": "choices",
                  "type": "join_str"
              },
              {
                  "field_to_field": {
                      "number": "label"
                  },
                  "type": "rename_fields"
              }
          ],
          "task": {
              "inputs": [
                  "choices",
                  "sentence1",
                  "numbers",
                  "topic",
                  "context"
              ],
              "metrics": [
                  "metrics.accuracy"
              ],
              "outputs": [
                  "label"
              ],
              "type": "form_task"
          },
          "templates": "templates.qa.multiple_choice.context_no_intro.all",
          "type": "task_card"
      }

References: :ref:`metrics.accuracy <metrics.accuracy>`, :ref:`templates.qa.multiple_choice.context_no_intro.all <templates.qa.multiple_choice.context_no_intro.all>`

|
|



.. _cards.belebele.ibo_Latn:

----------

ibo_Latn
""""""""

.. note:: ID: ``cards.belebele.ibo_Latn``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "default",
              "path": "facebook/belebele",
              "split": "ibo_Latn",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "mapper": {
                      "ibo_Latn": "test"
                  },
                  "type": "rename_splits"
              },
              {
                  "fields": {
                      "numbering": [
                          "A",
                          "B",
                          "C",
                          "D",
                          "E",
                          "F",
                          "G",
                          "H",
                          "I",
                          "J",
                          "K",
                          "L",
                          "M",
                          "N",
                          "O",
                          "P",
                          "Q",
                          "R",
                          "S",
                          "T",
                          "U",
                          "V",
                          "W",
                          "X",
                          "Y",
                          "Z"
                      ]
                  },
                  "type": "add_fields"
              },
              {
                  "fields": [
                      "mc_answer1",
                      "mc_answer2",
                      "mc_answer3",
                      "mc_answer4"
                  ],
                  "to_field": "choices",
                  "type": "list_field_values"
              },
              {
                  "mappers": {
                      "correct_answer_num": {
                          "1": "A",
                          "2": "B",
                          "3": "C",
                          "4": "D"
                      }
                  },
                  "type": "map_instance_values"
              },
              {
                  "index_of": "correct_answer_num",
                  "search_in": "numbering",
                  "to_field": "index",
                  "type": "index_of"
              },
              {
                  "field_to_field": {
                      "choices": "_choices",
                      "dialect": "topic",
                      "flores_passage": "context",
                      "index": "_index",
                      "numbering": "_numbering",
                      "question": "sentence1"
                  },
                  "type": "rename_fields"
              },
              {
                  "field": "_numbering",
                  "index": "_index",
                  "to_field": "number",
                  "type": "take_by_field"
              },
              {
                  "field": "_choices",
                  "index": "_index",
                  "to_field": "answer",
                  "type": "take_by_field"
              },
              {
                  "fields": [
                      "_numbering",
                      "_choices"
                  ],
                  "to_field": "choices",
                  "type": "zip_field_values"
              },
              {
                  "field": "choices/*",
                  "process_every_value": true,
                  "separator": ". ",
                  "to_field": "choices_list",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "field": "choices_list",
                  "index": "_index",
                  "to_field": "number_and_answer",
                  "type": "take_by_field"
              },
              {
                  "field": "choices/*/0",
                  "separator": ",",
                  "to_field": "numbers",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "add": [
                      ""
                  ],
                  "field": "choices_list",
                  "to_field": "choices_list",
                  "type": "add_constant"
              },
              {
                  "field": "choices_list",
                  "separator": "\n",
                  "to_field": "choices",
                  "type": "join_str"
              },
              {
                  "field_to_field": {
                      "number": "label"
                  },
                  "type": "rename_fields"
              }
          ],
          "task": {
              "inputs": [
                  "choices",
                  "sentence1",
                  "numbers",
                  "topic",
                  "context"
              ],
              "metrics": [
                  "metrics.accuracy"
              ],
              "outputs": [
                  "label"
              ],
              "type": "form_task"
          },
          "templates": "templates.qa.multiple_choice.context_no_intro.all",
          "type": "task_card"
      }

References: :ref:`metrics.accuracy <metrics.accuracy>`, :ref:`templates.qa.multiple_choice.context_no_intro.all <templates.qa.multiple_choice.context_no_intro.all>`

|
|



.. _cards.belebele.spa_Latn:

----------

spa_Latn
""""""""

.. note:: ID: ``cards.belebele.spa_Latn``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "default",
              "path": "facebook/belebele",
              "split": "spa_Latn",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "mapper": {
                      "spa_Latn": "test"
                  },
                  "type": "rename_splits"
              },
              {
                  "fields": {
                      "numbering": [
                          "A",
                          "B",
                          "C",
                          "D",
                          "E",
                          "F",
                          "G",
                          "H",
                          "I",
                          "J",
                          "K",
                          "L",
                          "M",
                          "N",
                          "O",
                          "P",
                          "Q",
                          "R",
                          "S",
                          "T",
                          "U",
                          "V",
                          "W",
                          "X",
                          "Y",
                          "Z"
                      ]
                  },
                  "type": "add_fields"
              },
              {
                  "fields": [
                      "mc_answer1",
                      "mc_answer2",
                      "mc_answer3",
                      "mc_answer4"
                  ],
                  "to_field": "choices",
                  "type": "list_field_values"
              },
              {
                  "mappers": {
                      "correct_answer_num": {
                          "1": "A",
                          "2": "B",
                          "3": "C",
                          "4": "D"
                      }
                  },
                  "type": "map_instance_values"
              },
              {
                  "index_of": "correct_answer_num",
                  "search_in": "numbering",
                  "to_field": "index",
                  "type": "index_of"
              },
              {
                  "field_to_field": {
                      "choices": "_choices",
                      "dialect": "topic",
                      "flores_passage": "context",
                      "index": "_index",
                      "numbering": "_numbering",
                      "question": "sentence1"
                  },
                  "type": "rename_fields"
              },
              {
                  "field": "_numbering",
                  "index": "_index",
                  "to_field": "number",
                  "type": "take_by_field"
              },
              {
                  "field": "_choices",
                  "index": "_index",
                  "to_field": "answer",
                  "type": "take_by_field"
              },
              {
                  "fields": [
                      "_numbering",
                      "_choices"
                  ],
                  "to_field": "choices",
                  "type": "zip_field_values"
              },
              {
                  "field": "choices/*",
                  "process_every_value": true,
                  "separator": ". ",
                  "to_field": "choices_list",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "field": "choices_list",
                  "index": "_index",
                  "to_field": "number_and_answer",
                  "type": "take_by_field"
              },
              {
                  "field": "choices/*/0",
                  "separator": ",",
                  "to_field": "numbers",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "add": [
                      ""
                  ],
                  "field": "choices_list",
                  "to_field": "choices_list",
                  "type": "add_constant"
              },
              {
                  "field": "choices_list",
                  "separator": "\n",
                  "to_field": "choices",
                  "type": "join_str"
              },
              {
                  "field_to_field": {
                      "number": "label"
                  },
                  "type": "rename_fields"
              }
          ],
          "task": {
              "inputs": [
                  "choices",
                  "sentence1",
                  "numbers",
                  "topic",
                  "context"
              ],
              "metrics": [
                  "metrics.accuracy"
              ],
              "outputs": [
                  "label"
              ],
              "type": "form_task"
          },
          "templates": "templates.qa.multiple_choice.context_no_intro.all",
          "type": "task_card"
      }

References: :ref:`metrics.accuracy <metrics.accuracy>`, :ref:`templates.qa.multiple_choice.context_no_intro.all <templates.qa.multiple_choice.context_no_intro.all>`

|
|



.. _cards.belebele.lao_Laoo:

----------

lao_Laoo
""""""""

.. note:: ID: ``cards.belebele.lao_Laoo``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "default",
              "path": "facebook/belebele",
              "split": "lao_Laoo",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "mapper": {
                      "lao_Laoo": "test"
                  },
                  "type": "rename_splits"
              },
              {
                  "fields": {
                      "numbering": [
                          "A",
                          "B",
                          "C",
                          "D",
                          "E",
                          "F",
                          "G",
                          "H",
                          "I",
                          "J",
                          "K",
                          "L",
                          "M",
                          "N",
                          "O",
                          "P",
                          "Q",
                          "R",
                          "S",
                          "T",
                          "U",
                          "V",
                          "W",
                          "X",
                          "Y",
                          "Z"
                      ]
                  },
                  "type": "add_fields"
              },
              {
                  "fields": [
                      "mc_answer1",
                      "mc_answer2",
                      "mc_answer3",
                      "mc_answer4"
                  ],
                  "to_field": "choices",
                  "type": "list_field_values"
              },
              {
                  "mappers": {
                      "correct_answer_num": {
                          "1": "A",
                          "2": "B",
                          "3": "C",
                          "4": "D"
                      }
                  },
                  "type": "map_instance_values"
              },
              {
                  "index_of": "correct_answer_num",
                  "search_in": "numbering",
                  "to_field": "index",
                  "type": "index_of"
              },
              {
                  "field_to_field": {
                      "choices": "_choices",
                      "dialect": "topic",
                      "flores_passage": "context",
                      "index": "_index",
                      "numbering": "_numbering",
                      "question": "sentence1"
                  },
                  "type": "rename_fields"
              },
              {
                  "field": "_numbering",
                  "index": "_index",
                  "to_field": "number",
                  "type": "take_by_field"
              },
              {
                  "field": "_choices",
                  "index": "_index",
                  "to_field": "answer",
                  "type": "take_by_field"
              },
              {
                  "fields": [
                      "_numbering",
                      "_choices"
                  ],
                  "to_field": "choices",
                  "type": "zip_field_values"
              },
              {
                  "field": "choices/*",
                  "process_every_value": true,
                  "separator": ". ",
                  "to_field": "choices_list",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "field": "choices_list",
                  "index": "_index",
                  "to_field": "number_and_answer",
                  "type": "take_by_field"
              },
              {
                  "field": "choices/*/0",
                  "separator": ",",
                  "to_field": "numbers",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "add": [
                      ""
                  ],
                  "field": "choices_list",
                  "to_field": "choices_list",
                  "type": "add_constant"
              },
              {
                  "field": "choices_list",
                  "separator": "\n",
                  "to_field": "choices",
                  "type": "join_str"
              },
              {
                  "field_to_field": {
                      "number": "label"
                  },
                  "type": "rename_fields"
              }
          ],
          "task": {
              "inputs": [
                  "choices",
                  "sentence1",
                  "numbers",
                  "topic",
                  "context"
              ],
              "metrics": [
                  "metrics.accuracy"
              ],
              "outputs": [
                  "label"
              ],
              "type": "form_task"
          },
          "templates": "templates.qa.multiple_choice.context_no_intro.all",
          "type": "task_card"
      }

References: :ref:`metrics.accuracy <metrics.accuracy>`, :ref:`templates.qa.multiple_choice.context_no_intro.all <templates.qa.multiple_choice.context_no_intro.all>`

|
|



.. _cards.belebele.ell_Grek:

----------

ell_Grek
""""""""

.. note:: ID: ``cards.belebele.ell_Grek``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "default",
              "path": "facebook/belebele",
              "split": "ell_Grek",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "mapper": {
                      "ell_Grek": "test"
                  },
                  "type": "rename_splits"
              },
              {
                  "fields": {
                      "numbering": [
                          "A",
                          "B",
                          "C",
                          "D",
                          "E",
                          "F",
                          "G",
                          "H",
                          "I",
                          "J",
                          "K",
                          "L",
                          "M",
                          "N",
                          "O",
                          "P",
                          "Q",
                          "R",
                          "S",
                          "T",
                          "U",
                          "V",
                          "W",
                          "X",
                          "Y",
                          "Z"
                      ]
                  },
                  "type": "add_fields"
              },
              {
                  "fields": [
                      "mc_answer1",
                      "mc_answer2",
                      "mc_answer3",
                      "mc_answer4"
                  ],
                  "to_field": "choices",
                  "type": "list_field_values"
              },
              {
                  "mappers": {
                      "correct_answer_num": {
                          "1": "A",
                          "2": "B",
                          "3": "C",
                          "4": "D"
                      }
                  },
                  "type": "map_instance_values"
              },
              {
                  "index_of": "correct_answer_num",
                  "search_in": "numbering",
                  "to_field": "index",
                  "type": "index_of"
              },
              {
                  "field_to_field": {
                      "choices": "_choices",
                      "dialect": "topic",
                      "flores_passage": "context",
                      "index": "_index",
                      "numbering": "_numbering",
                      "question": "sentence1"
                  },
                  "type": "rename_fields"
              },
              {
                  "field": "_numbering",
                  "index": "_index",
                  "to_field": "number",
                  "type": "take_by_field"
              },
              {
                  "field": "_choices",
                  "index": "_index",
                  "to_field": "answer",
                  "type": "take_by_field"
              },
              {
                  "fields": [
                      "_numbering",
                      "_choices"
                  ],
                  "to_field": "choices",
                  "type": "zip_field_values"
              },
              {
                  "field": "choices/*",
                  "process_every_value": true,
                  "separator": ". ",
                  "to_field": "choices_list",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "field": "choices_list",
                  "index": "_index",
                  "to_field": "number_and_answer",
                  "type": "take_by_field"
              },
              {
                  "field": "choices/*/0",
                  "separator": ",",
                  "to_field": "numbers",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "add": [
                      ""
                  ],
                  "field": "choices_list",
                  "to_field": "choices_list",
                  "type": "add_constant"
              },
              {
                  "field": "choices_list",
                  "separator": "\n",
                  "to_field": "choices",
                  "type": "join_str"
              },
              {
                  "field_to_field": {
                      "number": "label"
                  },
                  "type": "rename_fields"
              }
          ],
          "task": {
              "inputs": [
                  "choices",
                  "sentence1",
                  "numbers",
                  "topic",
                  "context"
              ],
              "metrics": [
                  "metrics.accuracy"
              ],
              "outputs": [
                  "label"
              ],
              "type": "form_task"
          },
          "templates": "templates.qa.multiple_choice.context_no_intro.all",
          "type": "task_card"
      }

References: :ref:`metrics.accuracy <metrics.accuracy>`, :ref:`templates.qa.multiple_choice.context_no_intro.all <templates.qa.multiple_choice.context_no_intro.all>`

|
|



.. _cards.belebele.kat_Geor:

----------

kat_Geor
""""""""

.. note:: ID: ``cards.belebele.kat_Geor``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "default",
              "path": "facebook/belebele",
              "split": "kat_Geor",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "mapper": {
                      "kat_Geor": "test"
                  },
                  "type": "rename_splits"
              },
              {
                  "fields": {
                      "numbering": [
                          "A",
                          "B",
                          "C",
                          "D",
                          "E",
                          "F",
                          "G",
                          "H",
                          "I",
                          "J",
                          "K",
                          "L",
                          "M",
                          "N",
                          "O",
                          "P",
                          "Q",
                          "R",
                          "S",
                          "T",
                          "U",
                          "V",
                          "W",
                          "X",
                          "Y",
                          "Z"
                      ]
                  },
                  "type": "add_fields"
              },
              {
                  "fields": [
                      "mc_answer1",
                      "mc_answer2",
                      "mc_answer3",
                      "mc_answer4"
                  ],
                  "to_field": "choices",
                  "type": "list_field_values"
              },
              {
                  "mappers": {
                      "correct_answer_num": {
                          "1": "A",
                          "2": "B",
                          "3": "C",
                          "4": "D"
                      }
                  },
                  "type": "map_instance_values"
              },
              {
                  "index_of": "correct_answer_num",
                  "search_in": "numbering",
                  "to_field": "index",
                  "type": "index_of"
              },
              {
                  "field_to_field": {
                      "choices": "_choices",
                      "dialect": "topic",
                      "flores_passage": "context",
                      "index": "_index",
                      "numbering": "_numbering",
                      "question": "sentence1"
                  },
                  "type": "rename_fields"
              },
              {
                  "field": "_numbering",
                  "index": "_index",
                  "to_field": "number",
                  "type": "take_by_field"
              },
              {
                  "field": "_choices",
                  "index": "_index",
                  "to_field": "answer",
                  "type": "take_by_field"
              },
              {
                  "fields": [
                      "_numbering",
                      "_choices"
                  ],
                  "to_field": "choices",
                  "type": "zip_field_values"
              },
              {
                  "field": "choices/*",
                  "process_every_value": true,
                  "separator": ". ",
                  "to_field": "choices_list",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "field": "choices_list",
                  "index": "_index",
                  "to_field": "number_and_answer",
                  "type": "take_by_field"
              },
              {
                  "field": "choices/*/0",
                  "separator": ",",
                  "to_field": "numbers",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "add": [
                      ""
                  ],
                  "field": "choices_list",
                  "to_field": "choices_list",
                  "type": "add_constant"
              },
              {
                  "field": "choices_list",
                  "separator": "\n",
                  "to_field": "choices",
                  "type": "join_str"
              },
              {
                  "field_to_field": {
                      "number": "label"
                  },
                  "type": "rename_fields"
              }
          ],
          "task": {
              "inputs": [
                  "choices",
                  "sentence1",
                  "numbers",
                  "topic",
                  "context"
              ],
              "metrics": [
                  "metrics.accuracy"
              ],
              "outputs": [
                  "label"
              ],
              "type": "form_task"
          },
          "templates": "templates.qa.multiple_choice.context_no_intro.all",
          "type": "task_card"
      }

References: :ref:`metrics.accuracy <metrics.accuracy>`, :ref:`templates.qa.multiple_choice.context_no_intro.all <templates.qa.multiple_choice.context_no_intro.all>`

|
|



.. _cards.belebele.slk_Latn:

----------

slk_Latn
""""""""

.. note:: ID: ``cards.belebele.slk_Latn``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "default",
              "path": "facebook/belebele",
              "split": "slk_Latn",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "mapper": {
                      "slk_Latn": "test"
                  },
                  "type": "rename_splits"
              },
              {
                  "fields": {
                      "numbering": [
                          "A",
                          "B",
                          "C",
                          "D",
                          "E",
                          "F",
                          "G",
                          "H",
                          "I",
                          "J",
                          "K",
                          "L",
                          "M",
                          "N",
                          "O",
                          "P",
                          "Q",
                          "R",
                          "S",
                          "T",
                          "U",
                          "V",
                          "W",
                          "X",
                          "Y",
                          "Z"
                      ]
                  },
                  "type": "add_fields"
              },
              {
                  "fields": [
                      "mc_answer1",
                      "mc_answer2",
                      "mc_answer3",
                      "mc_answer4"
                  ],
                  "to_field": "choices",
                  "type": "list_field_values"
              },
              {
                  "mappers": {
                      "correct_answer_num": {
                          "1": "A",
                          "2": "B",
                          "3": "C",
                          "4": "D"
                      }
                  },
                  "type": "map_instance_values"
              },
              {
                  "index_of": "correct_answer_num",
                  "search_in": "numbering",
                  "to_field": "index",
                  "type": "index_of"
              },
              {
                  "field_to_field": {
                      "choices": "_choices",
                      "dialect": "topic",
                      "flores_passage": "context",
                      "index": "_index",
                      "numbering": "_numbering",
                      "question": "sentence1"
                  },
                  "type": "rename_fields"
              },
              {
                  "field": "_numbering",
                  "index": "_index",
                  "to_field": "number",
                  "type": "take_by_field"
              },
              {
                  "field": "_choices",
                  "index": "_index",
                  "to_field": "answer",
                  "type": "take_by_field"
              },
              {
                  "fields": [
                      "_numbering",
                      "_choices"
                  ],
                  "to_field": "choices",
                  "type": "zip_field_values"
              },
              {
                  "field": "choices/*",
                  "process_every_value": true,
                  "separator": ". ",
                  "to_field": "choices_list",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "field": "choices_list",
                  "index": "_index",
                  "to_field": "number_and_answer",
                  "type": "take_by_field"
              },
              {
                  "field": "choices/*/0",
                  "separator": ",",
                  "to_field": "numbers",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "add": [
                      ""
                  ],
                  "field": "choices_list",
                  "to_field": "choices_list",
                  "type": "add_constant"
              },
              {
                  "field": "choices_list",
                  "separator": "\n",
                  "to_field": "choices",
                  "type": "join_str"
              },
              {
                  "field_to_field": {
                      "number": "label"
                  },
                  "type": "rename_fields"
              }
          ],
          "task": {
              "inputs": [
                  "choices",
                  "sentence1",
                  "numbers",
                  "topic",
                  "context"
              ],
              "metrics": [
                  "metrics.accuracy"
              ],
              "outputs": [
                  "label"
              ],
              "type": "form_task"
          },
          "templates": "templates.qa.multiple_choice.context_no_intro.all",
          "type": "task_card"
      }

References: :ref:`metrics.accuracy <metrics.accuracy>`, :ref:`templates.qa.multiple_choice.context_no_intro.all <templates.qa.multiple_choice.context_no_intro.all>`

|
|



.. _cards.belebele.nya_Latn:

----------

nya_Latn
""""""""

.. note:: ID: ``cards.belebele.nya_Latn``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "default",
              "path": "facebook/belebele",
              "split": "nya_Latn",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "mapper": {
                      "nya_Latn": "test"
                  },
                  "type": "rename_splits"
              },
              {
                  "fields": {
                      "numbering": [
                          "A",
                          "B",
                          "C",
                          "D",
                          "E",
                          "F",
                          "G",
                          "H",
                          "I",
                          "J",
                          "K",
                          "L",
                          "M",
                          "N",
                          "O",
                          "P",
                          "Q",
                          "R",
                          "S",
                          "T",
                          "U",
                          "V",
                          "W",
                          "X",
                          "Y",
                          "Z"
                      ]
                  },
                  "type": "add_fields"
              },
              {
                  "fields": [
                      "mc_answer1",
                      "mc_answer2",
                      "mc_answer3",
                      "mc_answer4"
                  ],
                  "to_field": "choices",
                  "type": "list_field_values"
              },
              {
                  "mappers": {
                      "correct_answer_num": {
                          "1": "A",
                          "2": "B",
                          "3": "C",
                          "4": "D"
                      }
                  },
                  "type": "map_instance_values"
              },
              {
                  "index_of": "correct_answer_num",
                  "search_in": "numbering",
                  "to_field": "index",
                  "type": "index_of"
              },
              {
                  "field_to_field": {
                      "choices": "_choices",
                      "dialect": "topic",
                      "flores_passage": "context",
                      "index": "_index",
                      "numbering": "_numbering",
                      "question": "sentence1"
                  },
                  "type": "rename_fields"
              },
              {
                  "field": "_numbering",
                  "index": "_index",
                  "to_field": "number",
                  "type": "take_by_field"
              },
              {
                  "field": "_choices",
                  "index": "_index",
                  "to_field": "answer",
                  "type": "take_by_field"
              },
              {
                  "fields": [
                      "_numbering",
                      "_choices"
                  ],
                  "to_field": "choices",
                  "type": "zip_field_values"
              },
              {
                  "field": "choices/*",
                  "process_every_value": true,
                  "separator": ". ",
                  "to_field": "choices_list",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "field": "choices_list",
                  "index": "_index",
                  "to_field": "number_and_answer",
                  "type": "take_by_field"
              },
              {
                  "field": "choices/*/0",
                  "separator": ",",
                  "to_field": "numbers",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "add": [
                      ""
                  ],
                  "field": "choices_list",
                  "to_field": "choices_list",
                  "type": "add_constant"
              },
              {
                  "field": "choices_list",
                  "separator": "\n",
                  "to_field": "choices",
                  "type": "join_str"
              },
              {
                  "field_to_field": {
                      "number": "label"
                  },
                  "type": "rename_fields"
              }
          ],
          "task": {
              "inputs": [
                  "choices",
                  "sentence1",
                  "numbers",
                  "topic",
                  "context"
              ],
              "metrics": [
                  "metrics.accuracy"
              ],
              "outputs": [
                  "label"
              ],
              "type": "form_task"
          },
          "templates": "templates.qa.multiple_choice.context_no_intro.all",
          "type": "task_card"
      }

References: :ref:`metrics.accuracy <metrics.accuracy>`, :ref:`templates.qa.multiple_choice.context_no_intro.all <templates.qa.multiple_choice.context_no_intro.all>`

|
|



.. _cards.belebele.kaz_Cyrl:

----------

kaz_Cyrl
""""""""

.. note:: ID: ``cards.belebele.kaz_Cyrl``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "default",
              "path": "facebook/belebele",
              "split": "kaz_Cyrl",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "mapper": {
                      "kaz_Cyrl": "test"
                  },
                  "type": "rename_splits"
              },
              {
                  "fields": {
                      "numbering": [
                          "A",
                          "B",
                          "C",
                          "D",
                          "E",
                          "F",
                          "G",
                          "H",
                          "I",
                          "J",
                          "K",
                          "L",
                          "M",
                          "N",
                          "O",
                          "P",
                          "Q",
                          "R",
                          "S",
                          "T",
                          "U",
                          "V",
                          "W",
                          "X",
                          "Y",
                          "Z"
                      ]
                  },
                  "type": "add_fields"
              },
              {
                  "fields": [
                      "mc_answer1",
                      "mc_answer2",
                      "mc_answer3",
                      "mc_answer4"
                  ],
                  "to_field": "choices",
                  "type": "list_field_values"
              },
              {
                  "mappers": {
                      "correct_answer_num": {
                          "1": "A",
                          "2": "B",
                          "3": "C",
                          "4": "D"
                      }
                  },
                  "type": "map_instance_values"
              },
              {
                  "index_of": "correct_answer_num",
                  "search_in": "numbering",
                  "to_field": "index",
                  "type": "index_of"
              },
              {
                  "field_to_field": {
                      "choices": "_choices",
                      "dialect": "topic",
                      "flores_passage": "context",
                      "index": "_index",
                      "numbering": "_numbering",
                      "question": "sentence1"
                  },
                  "type": "rename_fields"
              },
              {
                  "field": "_numbering",
                  "index": "_index",
                  "to_field": "number",
                  "type": "take_by_field"
              },
              {
                  "field": "_choices",
                  "index": "_index",
                  "to_field": "answer",
                  "type": "take_by_field"
              },
              {
                  "fields": [
                      "_numbering",
                      "_choices"
                  ],
                  "to_field": "choices",
                  "type": "zip_field_values"
              },
              {
                  "field": "choices/*",
                  "process_every_value": true,
                  "separator": ". ",
                  "to_field": "choices_list",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "field": "choices_list",
                  "index": "_index",
                  "to_field": "number_and_answer",
                  "type": "take_by_field"
              },
              {
                  "field": "choices/*/0",
                  "separator": ",",
                  "to_field": "numbers",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "add": [
                      ""
                  ],
                  "field": "choices_list",
                  "to_field": "choices_list",
                  "type": "add_constant"
              },
              {
                  "field": "choices_list",
                  "separator": "\n",
                  "to_field": "choices",
                  "type": "join_str"
              },
              {
                  "field_to_field": {
                      "number": "label"
                  },
                  "type": "rename_fields"
              }
          ],
          "task": {
              "inputs": [
                  "choices",
                  "sentence1",
                  "numbers",
                  "topic",
                  "context"
              ],
              "metrics": [
                  "metrics.accuracy"
              ],
              "outputs": [
                  "label"
              ],
              "type": "form_task"
          },
          "templates": "templates.qa.multiple_choice.context_no_intro.all",
          "type": "task_card"
      }

References: :ref:`metrics.accuracy <metrics.accuracy>`, :ref:`templates.qa.multiple_choice.context_no_intro.all <templates.qa.multiple_choice.context_no_intro.all>`

|
|



.. _cards.belebele.ben_Beng:

----------

ben_Beng
""""""""

.. note:: ID: ``cards.belebele.ben_Beng``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "default",
              "path": "facebook/belebele",
              "split": "ben_Beng",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "mapper": {
                      "ben_Beng": "test"
                  },
                  "type": "rename_splits"
              },
              {
                  "fields": {
                      "numbering": [
                          "A",
                          "B",
                          "C",
                          "D",
                          "E",
                          "F",
                          "G",
                          "H",
                          "I",
                          "J",
                          "K",
                          "L",
                          "M",
                          "N",
                          "O",
                          "P",
                          "Q",
                          "R",
                          "S",
                          "T",
                          "U",
                          "V",
                          "W",
                          "X",
                          "Y",
                          "Z"
                      ]
                  },
                  "type": "add_fields"
              },
              {
                  "fields": [
                      "mc_answer1",
                      "mc_answer2",
                      "mc_answer3",
                      "mc_answer4"
                  ],
                  "to_field": "choices",
                  "type": "list_field_values"
              },
              {
                  "mappers": {
                      "correct_answer_num": {
                          "1": "A",
                          "2": "B",
                          "3": "C",
                          "4": "D"
                      }
                  },
                  "type": "map_instance_values"
              },
              {
                  "index_of": "correct_answer_num",
                  "search_in": "numbering",
                  "to_field": "index",
                  "type": "index_of"
              },
              {
                  "field_to_field": {
                      "choices": "_choices",
                      "dialect": "topic",
                      "flores_passage": "context",
                      "index": "_index",
                      "numbering": "_numbering",
                      "question": "sentence1"
                  },
                  "type": "rename_fields"
              },
              {
                  "field": "_numbering",
                  "index": "_index",
                  "to_field": "number",
                  "type": "take_by_field"
              },
              {
                  "field": "_choices",
                  "index": "_index",
                  "to_field": "answer",
                  "type": "take_by_field"
              },
              {
                  "fields": [
                      "_numbering",
                      "_choices"
                  ],
                  "to_field": "choices",
                  "type": "zip_field_values"
              },
              {
                  "field": "choices/*",
                  "process_every_value": true,
                  "separator": ". ",
                  "to_field": "choices_list",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "field": "choices_list",
                  "index": "_index",
                  "to_field": "number_and_answer",
                  "type": "take_by_field"
              },
              {
                  "field": "choices/*/0",
                  "separator": ",",
                  "to_field": "numbers",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "add": [
                      ""
                  ],
                  "field": "choices_list",
                  "to_field": "choices_list",
                  "type": "add_constant"
              },
              {
                  "field": "choices_list",
                  "separator": "\n",
                  "to_field": "choices",
                  "type": "join_str"
              },
              {
                  "field_to_field": {
                      "number": "label"
                  },
                  "type": "rename_fields"
              }
          ],
          "task": {
              "inputs": [
                  "choices",
                  "sentence1",
                  "numbers",
                  "topic",
                  "context"
              ],
              "metrics": [
                  "metrics.accuracy"
              ],
              "outputs": [
                  "label"
              ],
              "type": "form_task"
          },
          "templates": "templates.qa.multiple_choice.context_no_intro.all",
          "type": "task_card"
      }

References: :ref:`metrics.accuracy <metrics.accuracy>`, :ref:`templates.qa.multiple_choice.context_no_intro.all <templates.qa.multiple_choice.context_no_intro.all>`

|
|



.. _cards.belebele.hat_Latn:

----------

hat_Latn
""""""""

.. note:: ID: ``cards.belebele.hat_Latn``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "default",
              "path": "facebook/belebele",
              "split": "hat_Latn",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "mapper": {
                      "hat_Latn": "test"
                  },
                  "type": "rename_splits"
              },
              {
                  "fields": {
                      "numbering": [
                          "A",
                          "B",
                          "C",
                          "D",
                          "E",
                          "F",
                          "G",
                          "H",
                          "I",
                          "J",
                          "K",
                          "L",
                          "M",
                          "N",
                          "O",
                          "P",
                          "Q",
                          "R",
                          "S",
                          "T",
                          "U",
                          "V",
                          "W",
                          "X",
                          "Y",
                          "Z"
                      ]
                  },
                  "type": "add_fields"
              },
              {
                  "fields": [
                      "mc_answer1",
                      "mc_answer2",
                      "mc_answer3",
                      "mc_answer4"
                  ],
                  "to_field": "choices",
                  "type": "list_field_values"
              },
              {
                  "mappers": {
                      "correct_answer_num": {
                          "1": "A",
                          "2": "B",
                          "3": "C",
                          "4": "D"
                      }
                  },
                  "type": "map_instance_values"
              },
              {
                  "index_of": "correct_answer_num",
                  "search_in": "numbering",
                  "to_field": "index",
                  "type": "index_of"
              },
              {
                  "field_to_field": {
                      "choices": "_choices",
                      "dialect": "topic",
                      "flores_passage": "context",
                      "index": "_index",
                      "numbering": "_numbering",
                      "question": "sentence1"
                  },
                  "type": "rename_fields"
              },
              {
                  "field": "_numbering",
                  "index": "_index",
                  "to_field": "number",
                  "type": "take_by_field"
              },
              {
                  "field": "_choices",
                  "index": "_index",
                  "to_field": "answer",
                  "type": "take_by_field"
              },
              {
                  "fields": [
                      "_numbering",
                      "_choices"
                  ],
                  "to_field": "choices",
                  "type": "zip_field_values"
              },
              {
                  "field": "choices/*",
                  "process_every_value": true,
                  "separator": ". ",
                  "to_field": "choices_list",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "field": "choices_list",
                  "index": "_index",
                  "to_field": "number_and_answer",
                  "type": "take_by_field"
              },
              {
                  "field": "choices/*/0",
                  "separator": ",",
                  "to_field": "numbers",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "add": [
                      ""
                  ],
                  "field": "choices_list",
                  "to_field": "choices_list",
                  "type": "add_constant"
              },
              {
                  "field": "choices_list",
                  "separator": "\n",
                  "to_field": "choices",
                  "type": "join_str"
              },
              {
                  "field_to_field": {
                      "number": "label"
                  },
                  "type": "rename_fields"
              }
          ],
          "task": {
              "inputs": [
                  "choices",
                  "sentence1",
                  "numbers",
                  "topic",
                  "context"
              ],
              "metrics": [
                  "metrics.accuracy"
              ],
              "outputs": [
                  "label"
              ],
              "type": "form_task"
          },
          "templates": "templates.qa.multiple_choice.context_no_intro.all",
          "type": "task_card"
      }

References: :ref:`metrics.accuracy <metrics.accuracy>`, :ref:`templates.qa.multiple_choice.context_no_intro.all <templates.qa.multiple_choice.context_no_intro.all>`

|
|



.. _cards.belebele.ory_Orya:

----------

ory_Orya
""""""""

.. note:: ID: ``cards.belebele.ory_Orya``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "default",
              "path": "facebook/belebele",
              "split": "ory_Orya",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "mapper": {
                      "ory_Orya": "test"
                  },
                  "type": "rename_splits"
              },
              {
                  "fields": {
                      "numbering": [
                          "A",
                          "B",
                          "C",
                          "D",
                          "E",
                          "F",
                          "G",
                          "H",
                          "I",
                          "J",
                          "K",
                          "L",
                          "M",
                          "N",
                          "O",
                          "P",
                          "Q",
                          "R",
                          "S",
                          "T",
                          "U",
                          "V",
                          "W",
                          "X",
                          "Y",
                          "Z"
                      ]
                  },
                  "type": "add_fields"
              },
              {
                  "fields": [
                      "mc_answer1",
                      "mc_answer2",
                      "mc_answer3",
                      "mc_answer4"
                  ],
                  "to_field": "choices",
                  "type": "list_field_values"
              },
              {
                  "mappers": {
                      "correct_answer_num": {
                          "1": "A",
                          "2": "B",
                          "3": "C",
                          "4": "D"
                      }
                  },
                  "type": "map_instance_values"
              },
              {
                  "index_of": "correct_answer_num",
                  "search_in": "numbering",
                  "to_field": "index",
                  "type": "index_of"
              },
              {
                  "field_to_field": {
                      "choices": "_choices",
                      "dialect": "topic",
                      "flores_passage": "context",
                      "index": "_index",
                      "numbering": "_numbering",
                      "question": "sentence1"
                  },
                  "type": "rename_fields"
              },
              {
                  "field": "_numbering",
                  "index": "_index",
                  "to_field": "number",
                  "type": "take_by_field"
              },
              {
                  "field": "_choices",
                  "index": "_index",
                  "to_field": "answer",
                  "type": "take_by_field"
              },
              {
                  "fields": [
                      "_numbering",
                      "_choices"
                  ],
                  "to_field": "choices",
                  "type": "zip_field_values"
              },
              {
                  "field": "choices/*",
                  "process_every_value": true,
                  "separator": ". ",
                  "to_field": "choices_list",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "field": "choices_list",
                  "index": "_index",
                  "to_field": "number_and_answer",
                  "type": "take_by_field"
              },
              {
                  "field": "choices/*/0",
                  "separator": ",",
                  "to_field": "numbers",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "add": [
                      ""
                  ],
                  "field": "choices_list",
                  "to_field": "choices_list",
                  "type": "add_constant"
              },
              {
                  "field": "choices_list",
                  "separator": "\n",
                  "to_field": "choices",
                  "type": "join_str"
              },
              {
                  "field_to_field": {
                      "number": "label"
                  },
                  "type": "rename_fields"
              }
          ],
          "task": {
              "inputs": [
                  "choices",
                  "sentence1",
                  "numbers",
                  "topic",
                  "context"
              ],
              "metrics": [
                  "metrics.accuracy"
              ],
              "outputs": [
                  "label"
              ],
              "type": "form_task"
          },
          "templates": "templates.qa.multiple_choice.context_no_intro.all",
          "type": "task_card"
      }

References: :ref:`metrics.accuracy <metrics.accuracy>`, :ref:`templates.qa.multiple_choice.context_no_intro.all <templates.qa.multiple_choice.context_no_intro.all>`

|
|



.. _cards.belebele.tir_Ethi:

----------

tir_Ethi
""""""""

.. note:: ID: ``cards.belebele.tir_Ethi``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "default",
              "path": "facebook/belebele",
              "split": "tir_Ethi",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "mapper": {
                      "tir_Ethi": "test"
                  },
                  "type": "rename_splits"
              },
              {
                  "fields": {
                      "numbering": [
                          "A",
                          "B",
                          "C",
                          "D",
                          "E",
                          "F",
                          "G",
                          "H",
                          "I",
                          "J",
                          "K",
                          "L",
                          "M",
                          "N",
                          "O",
                          "P",
                          "Q",
                          "R",
                          "S",
                          "T",
                          "U",
                          "V",
                          "W",
                          "X",
                          "Y",
                          "Z"
                      ]
                  },
                  "type": "add_fields"
              },
              {
                  "fields": [
                      "mc_answer1",
                      "mc_answer2",
                      "mc_answer3",
                      "mc_answer4"
                  ],
                  "to_field": "choices",
                  "type": "list_field_values"
              },
              {
                  "mappers": {
                      "correct_answer_num": {
                          "1": "A",
                          "2": "B",
                          "3": "C",
                          "4": "D"
                      }
                  },
                  "type": "map_instance_values"
              },
              {
                  "index_of": "correct_answer_num",
                  "search_in": "numbering",
                  "to_field": "index",
                  "type": "index_of"
              },
              {
                  "field_to_field": {
                      "choices": "_choices",
                      "dialect": "topic",
                      "flores_passage": "context",
                      "index": "_index",
                      "numbering": "_numbering",
                      "question": "sentence1"
                  },
                  "type": "rename_fields"
              },
              {
                  "field": "_numbering",
                  "index": "_index",
                  "to_field": "number",
                  "type": "take_by_field"
              },
              {
                  "field": "_choices",
                  "index": "_index",
                  "to_field": "answer",
                  "type": "take_by_field"
              },
              {
                  "fields": [
                      "_numbering",
                      "_choices"
                  ],
                  "to_field": "choices",
                  "type": "zip_field_values"
              },
              {
                  "field": "choices/*",
                  "process_every_value": true,
                  "separator": ". ",
                  "to_field": "choices_list",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "field": "choices_list",
                  "index": "_index",
                  "to_field": "number_and_answer",
                  "type": "take_by_field"
              },
              {
                  "field": "choices/*/0",
                  "separator": ",",
                  "to_field": "numbers",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "add": [
                      ""
                  ],
                  "field": "choices_list",
                  "to_field": "choices_list",
                  "type": "add_constant"
              },
              {
                  "field": "choices_list",
                  "separator": "\n",
                  "to_field": "choices",
                  "type": "join_str"
              },
              {
                  "field_to_field": {
                      "number": "label"
                  },
                  "type": "rename_fields"
              }
          ],
          "task": {
              "inputs": [
                  "choices",
                  "sentence1",
                  "numbers",
                  "topic",
                  "context"
              ],
              "metrics": [
                  "metrics.accuracy"
              ],
              "outputs": [
                  "label"
              ],
              "type": "form_task"
          },
          "templates": "templates.qa.multiple_choice.context_no_intro.all",
          "type": "task_card"
      }

References: :ref:`metrics.accuracy <metrics.accuracy>`, :ref:`templates.qa.multiple_choice.context_no_intro.all <templates.qa.multiple_choice.context_no_intro.all>`

|
|



.. _cards.belebele.sin_Latn:

----------

sin_Latn
""""""""

.. note:: ID: ``cards.belebele.sin_Latn``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "default",
              "path": "facebook/belebele",
              "split": "sin_Latn",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "mapper": {
                      "sin_Latn": "test"
                  },
                  "type": "rename_splits"
              },
              {
                  "fields": {
                      "numbering": [
                          "A",
                          "B",
                          "C",
                          "D",
                          "E",
                          "F",
                          "G",
                          "H",
                          "I",
                          "J",
                          "K",
                          "L",
                          "M",
                          "N",
                          "O",
                          "P",
                          "Q",
                          "R",
                          "S",
                          "T",
                          "U",
                          "V",
                          "W",
                          "X",
                          "Y",
                          "Z"
                      ]
                  },
                  "type": "add_fields"
              },
              {
                  "fields": [
                      "mc_answer1",
                      "mc_answer2",
                      "mc_answer3",
                      "mc_answer4"
                  ],
                  "to_field": "choices",
                  "type": "list_field_values"
              },
              {
                  "mappers": {
                      "correct_answer_num": {
                          "1": "A",
                          "2": "B",
                          "3": "C",
                          "4": "D"
                      }
                  },
                  "type": "map_instance_values"
              },
              {
                  "index_of": "correct_answer_num",
                  "search_in": "numbering",
                  "to_field": "index",
                  "type": "index_of"
              },
              {
                  "field_to_field": {
                      "choices": "_choices",
                      "dialect": "topic",
                      "flores_passage": "context",
                      "index": "_index",
                      "numbering": "_numbering",
                      "question": "sentence1"
                  },
                  "type": "rename_fields"
              },
              {
                  "field": "_numbering",
                  "index": "_index",
                  "to_field": "number",
                  "type": "take_by_field"
              },
              {
                  "field": "_choices",
                  "index": "_index",
                  "to_field": "answer",
                  "type": "take_by_field"
              },
              {
                  "fields": [
                      "_numbering",
                      "_choices"
                  ],
                  "to_field": "choices",
                  "type": "zip_field_values"
              },
              {
                  "field": "choices/*",
                  "process_every_value": true,
                  "separator": ". ",
                  "to_field": "choices_list",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "field": "choices_list",
                  "index": "_index",
                  "to_field": "number_and_answer",
                  "type": "take_by_field"
              },
              {
                  "field": "choices/*/0",
                  "separator": ",",
                  "to_field": "numbers",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "add": [
                      ""
                  ],
                  "field": "choices_list",
                  "to_field": "choices_list",
                  "type": "add_constant"
              },
              {
                  "field": "choices_list",
                  "separator": "\n",
                  "to_field": "choices",
                  "type": "join_str"
              },
              {
                  "field_to_field": {
                      "number": "label"
                  },
                  "type": "rename_fields"
              }
          ],
          "task": {
              "inputs": [
                  "choices",
                  "sentence1",
                  "numbers",
                  "topic",
                  "context"
              ],
              "metrics": [
                  "metrics.accuracy"
              ],
              "outputs": [
                  "label"
              ],
              "type": "form_task"
          },
          "templates": "templates.qa.multiple_choice.context_no_intro.all",
          "type": "task_card"
      }

References: :ref:`metrics.accuracy <metrics.accuracy>`, :ref:`templates.qa.multiple_choice.context_no_intro.all <templates.qa.multiple_choice.context_no_intro.all>`

|
|



.. _cards.belebele.hun_Latn:

----------

hun_Latn
""""""""

.. note:: ID: ``cards.belebele.hun_Latn``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "default",
              "path": "facebook/belebele",
              "split": "hun_Latn",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "mapper": {
                      "hun_Latn": "test"
                  },
                  "type": "rename_splits"
              },
              {
                  "fields": {
                      "numbering": [
                          "A",
                          "B",
                          "C",
                          "D",
                          "E",
                          "F",
                          "G",
                          "H",
                          "I",
                          "J",
                          "K",
                          "L",
                          "M",
                          "N",
                          "O",
                          "P",
                          "Q",
                          "R",
                          "S",
                          "T",
                          "U",
                          "V",
                          "W",
                          "X",
                          "Y",
                          "Z"
                      ]
                  },
                  "type": "add_fields"
              },
              {
                  "fields": [
                      "mc_answer1",
                      "mc_answer2",
                      "mc_answer3",
                      "mc_answer4"
                  ],
                  "to_field": "choices",
                  "type": "list_field_values"
              },
              {
                  "mappers": {
                      "correct_answer_num": {
                          "1": "A",
                          "2": "B",
                          "3": "C",
                          "4": "D"
                      }
                  },
                  "type": "map_instance_values"
              },
              {
                  "index_of": "correct_answer_num",
                  "search_in": "numbering",
                  "to_field": "index",
                  "type": "index_of"
              },
              {
                  "field_to_field": {
                      "choices": "_choices",
                      "dialect": "topic",
                      "flores_passage": "context",
                      "index": "_index",
                      "numbering": "_numbering",
                      "question": "sentence1"
                  },
                  "type": "rename_fields"
              },
              {
                  "field": "_numbering",
                  "index": "_index",
                  "to_field": "number",
                  "type": "take_by_field"
              },
              {
                  "field": "_choices",
                  "index": "_index",
                  "to_field": "answer",
                  "type": "take_by_field"
              },
              {
                  "fields": [
                      "_numbering",
                      "_choices"
                  ],
                  "to_field": "choices",
                  "type": "zip_field_values"
              },
              {
                  "field": "choices/*",
                  "process_every_value": true,
                  "separator": ". ",
                  "to_field": "choices_list",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "field": "choices_list",
                  "index": "_index",
                  "to_field": "number_and_answer",
                  "type": "take_by_field"
              },
              {
                  "field": "choices/*/0",
                  "separator": ",",
                  "to_field": "numbers",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "add": [
                      ""
                  ],
                  "field": "choices_list",
                  "to_field": "choices_list",
                  "type": "add_constant"
              },
              {
                  "field": "choices_list",
                  "separator": "\n",
                  "to_field": "choices",
                  "type": "join_str"
              },
              {
                  "field_to_field": {
                      "number": "label"
                  },
                  "type": "rename_fields"
              }
          ],
          "task": {
              "inputs": [
                  "choices",
                  "sentence1",
                  "numbers",
                  "topic",
                  "context"
              ],
              "metrics": [
                  "metrics.accuracy"
              ],
              "outputs": [
                  "label"
              ],
              "type": "form_task"
          },
          "templates": "templates.qa.multiple_choice.context_no_intro.all",
          "type": "task_card"
      }

References: :ref:`metrics.accuracy <metrics.accuracy>`, :ref:`templates.qa.multiple_choice.context_no_intro.all <templates.qa.multiple_choice.context_no_intro.all>`

|
|



.. _cards.belebele.eus_Latn:

----------

eus_Latn
""""""""

.. note:: ID: ``cards.belebele.eus_Latn``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "default",
              "path": "facebook/belebele",
              "split": "eus_Latn",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "mapper": {
                      "eus_Latn": "test"
                  },
                  "type": "rename_splits"
              },
              {
                  "fields": {
                      "numbering": [
                          "A",
                          "B",
                          "C",
                          "D",
                          "E",
                          "F",
                          "G",
                          "H",
                          "I",
                          "J",
                          "K",
                          "L",
                          "M",
                          "N",
                          "O",
                          "P",
                          "Q",
                          "R",
                          "S",
                          "T",
                          "U",
                          "V",
                          "W",
                          "X",
                          "Y",
                          "Z"
                      ]
                  },
                  "type": "add_fields"
              },
              {
                  "fields": [
                      "mc_answer1",
                      "mc_answer2",
                      "mc_answer3",
                      "mc_answer4"
                  ],
                  "to_field": "choices",
                  "type": "list_field_values"
              },
              {
                  "mappers": {
                      "correct_answer_num": {
                          "1": "A",
                          "2": "B",
                          "3": "C",
                          "4": "D"
                      }
                  },
                  "type": "map_instance_values"
              },
              {
                  "index_of": "correct_answer_num",
                  "search_in": "numbering",
                  "to_field": "index",
                  "type": "index_of"
              },
              {
                  "field_to_field": {
                      "choices": "_choices",
                      "dialect": "topic",
                      "flores_passage": "context",
                      "index": "_index",
                      "numbering": "_numbering",
                      "question": "sentence1"
                  },
                  "type": "rename_fields"
              },
              {
                  "field": "_numbering",
                  "index": "_index",
                  "to_field": "number",
                  "type": "take_by_field"
              },
              {
                  "field": "_choices",
                  "index": "_index",
                  "to_field": "answer",
                  "type": "take_by_field"
              },
              {
                  "fields": [
                      "_numbering",
                      "_choices"
                  ],
                  "to_field": "choices",
                  "type": "zip_field_values"
              },
              {
                  "field": "choices/*",
                  "process_every_value": true,
                  "separator": ". ",
                  "to_field": "choices_list",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "field": "choices_list",
                  "index": "_index",
                  "to_field": "number_and_answer",
                  "type": "take_by_field"
              },
              {
                  "field": "choices/*/0",
                  "separator": ",",
                  "to_field": "numbers",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "add": [
                      ""
                  ],
                  "field": "choices_list",
                  "to_field": "choices_list",
                  "type": "add_constant"
              },
              {
                  "field": "choices_list",
                  "separator": "\n",
                  "to_field": "choices",
                  "type": "join_str"
              },
              {
                  "field_to_field": {
                      "number": "label"
                  },
                  "type": "rename_fields"
              }
          ],
          "task": {
              "inputs": [
                  "choices",
                  "sentence1",
                  "numbers",
                  "topic",
                  "context"
              ],
              "metrics": [
                  "metrics.accuracy"
              ],
              "outputs": [
                  "label"
              ],
              "type": "form_task"
          },
          "templates": "templates.qa.multiple_choice.context_no_intro.all",
          "type": "task_card"
      }

References: :ref:`metrics.accuracy <metrics.accuracy>`, :ref:`templates.qa.multiple_choice.context_no_intro.all <templates.qa.multiple_choice.context_no_intro.all>`

|
|



.. _cards.belebele.sot_Latn:

----------

sot_Latn
""""""""

.. note:: ID: ``cards.belebele.sot_Latn``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "default",
              "path": "facebook/belebele",
              "split": "sot_Latn",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "mapper": {
                      "sot_Latn": "test"
                  },
                  "type": "rename_splits"
              },
              {
                  "fields": {
                      "numbering": [
                          "A",
                          "B",
                          "C",
                          "D",
                          "E",
                          "F",
                          "G",
                          "H",
                          "I",
                          "J",
                          "K",
                          "L",
                          "M",
                          "N",
                          "O",
                          "P",
                          "Q",
                          "R",
                          "S",
                          "T",
                          "U",
                          "V",
                          "W",
                          "X",
                          "Y",
                          "Z"
                      ]
                  },
                  "type": "add_fields"
              },
              {
                  "fields": [
                      "mc_answer1",
                      "mc_answer2",
                      "mc_answer3",
                      "mc_answer4"
                  ],
                  "to_field": "choices",
                  "type": "list_field_values"
              },
              {
                  "mappers": {
                      "correct_answer_num": {
                          "1": "A",
                          "2": "B",
                          "3": "C",
                          "4": "D"
                      }
                  },
                  "type": "map_instance_values"
              },
              {
                  "index_of": "correct_answer_num",
                  "search_in": "numbering",
                  "to_field": "index",
                  "type": "index_of"
              },
              {
                  "field_to_field": {
                      "choices": "_choices",
                      "dialect": "topic",
                      "flores_passage": "context",
                      "index": "_index",
                      "numbering": "_numbering",
                      "question": "sentence1"
                  },
                  "type": "rename_fields"
              },
              {
                  "field": "_numbering",
                  "index": "_index",
                  "to_field": "number",
                  "type": "take_by_field"
              },
              {
                  "field": "_choices",
                  "index": "_index",
                  "to_field": "answer",
                  "type": "take_by_field"
              },
              {
                  "fields": [
                      "_numbering",
                      "_choices"
                  ],
                  "to_field": "choices",
                  "type": "zip_field_values"
              },
              {
                  "field": "choices/*",
                  "process_every_value": true,
                  "separator": ". ",
                  "to_field": "choices_list",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "field": "choices_list",
                  "index": "_index",
                  "to_field": "number_and_answer",
                  "type": "take_by_field"
              },
              {
                  "field": "choices/*/0",
                  "separator": ",",
                  "to_field": "numbers",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "add": [
                      ""
                  ],
                  "field": "choices_list",
                  "to_field": "choices_list",
                  "type": "add_constant"
              },
              {
                  "field": "choices_list",
                  "separator": "\n",
                  "to_field": "choices",
                  "type": "join_str"
              },
              {
                  "field_to_field": {
                      "number": "label"
                  },
                  "type": "rename_fields"
              }
          ],
          "task": {
              "inputs": [
                  "choices",
                  "sentence1",
                  "numbers",
                  "topic",
                  "context"
              ],
              "metrics": [
                  "metrics.accuracy"
              ],
              "outputs": [
                  "label"
              ],
              "type": "form_task"
          },
          "templates": "templates.qa.multiple_choice.context_no_intro.all",
          "type": "task_card"
      }

References: :ref:`metrics.accuracy <metrics.accuracy>`, :ref:`templates.qa.multiple_choice.context_no_intro.all <templates.qa.multiple_choice.context_no_intro.all>`

|
|



.. _cards.belebele.urd_Arab:

----------

urd_Arab
""""""""

.. note:: ID: ``cards.belebele.urd_Arab``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "default",
              "path": "facebook/belebele",
              "split": "urd_Arab",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "mapper": {
                      "urd_Arab": "test"
                  },
                  "type": "rename_splits"
              },
              {
                  "fields": {
                      "numbering": [
                          "A",
                          "B",
                          "C",
                          "D",
                          "E",
                          "F",
                          "G",
                          "H",
                          "I",
                          "J",
                          "K",
                          "L",
                          "M",
                          "N",
                          "O",
                          "P",
                          "Q",
                          "R",
                          "S",
                          "T",
                          "U",
                          "V",
                          "W",
                          "X",
                          "Y",
                          "Z"
                      ]
                  },
                  "type": "add_fields"
              },
              {
                  "fields": [
                      "mc_answer1",
                      "mc_answer2",
                      "mc_answer3",
                      "mc_answer4"
                  ],
                  "to_field": "choices",
                  "type": "list_field_values"
              },
              {
                  "mappers": {
                      "correct_answer_num": {
                          "1": "A",
                          "2": "B",
                          "3": "C",
                          "4": "D"
                      }
                  },
                  "type": "map_instance_values"
              },
              {
                  "index_of": "correct_answer_num",
                  "search_in": "numbering",
                  "to_field": "index",
                  "type": "index_of"
              },
              {
                  "field_to_field": {
                      "choices": "_choices",
                      "dialect": "topic",
                      "flores_passage": "context",
                      "index": "_index",
                      "numbering": "_numbering",
                      "question": "sentence1"
                  },
                  "type": "rename_fields"
              },
              {
                  "field": "_numbering",
                  "index": "_index",
                  "to_field": "number",
                  "type": "take_by_field"
              },
              {
                  "field": "_choices",
                  "index": "_index",
                  "to_field": "answer",
                  "type": "take_by_field"
              },
              {
                  "fields": [
                      "_numbering",
                      "_choices"
                  ],
                  "to_field": "choices",
                  "type": "zip_field_values"
              },
              {
                  "field": "choices/*",
                  "process_every_value": true,
                  "separator": ". ",
                  "to_field": "choices_list",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "field": "choices_list",
                  "index": "_index",
                  "to_field": "number_and_answer",
                  "type": "take_by_field"
              },
              {
                  "field": "choices/*/0",
                  "separator": ",",
                  "to_field": "numbers",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "add": [
                      ""
                  ],
                  "field": "choices_list",
                  "to_field": "choices_list",
                  "type": "add_constant"
              },
              {
                  "field": "choices_list",
                  "separator": "\n",
                  "to_field": "choices",
                  "type": "join_str"
              },
              {
                  "field_to_field": {
                      "number": "label"
                  },
                  "type": "rename_fields"
              }
          ],
          "task": {
              "inputs": [
                  "choices",
                  "sentence1",
                  "numbers",
                  "topic",
                  "context"
              ],
              "metrics": [
                  "metrics.accuracy"
              ],
              "outputs": [
                  "label"
              ],
              "type": "form_task"
          },
          "templates": "templates.qa.multiple_choice.context_no_intro.all",
          "type": "task_card"
      }

References: :ref:`metrics.accuracy <metrics.accuracy>`, :ref:`templates.qa.multiple_choice.context_no_intro.all <templates.qa.multiple_choice.context_no_intro.all>`

|
|



.. _cards.belebele.kan_Knda:

----------

kan_Knda
""""""""

.. note:: ID: ``cards.belebele.kan_Knda``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "default",
              "path": "facebook/belebele",
              "split": "kan_Knda",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "mapper": {
                      "kan_Knda": "test"
                  },
                  "type": "rename_splits"
              },
              {
                  "fields": {
                      "numbering": [
                          "A",
                          "B",
                          "C",
                          "D",
                          "E",
                          "F",
                          "G",
                          "H",
                          "I",
                          "J",
                          "K",
                          "L",
                          "M",
                          "N",
                          "O",
                          "P",
                          "Q",
                          "R",
                          "S",
                          "T",
                          "U",
                          "V",
                          "W",
                          "X",
                          "Y",
                          "Z"
                      ]
                  },
                  "type": "add_fields"
              },
              {
                  "fields": [
                      "mc_answer1",
                      "mc_answer2",
                      "mc_answer3",
                      "mc_answer4"
                  ],
                  "to_field": "choices",
                  "type": "list_field_values"
              },
              {
                  "mappers": {
                      "correct_answer_num": {
                          "1": "A",
                          "2": "B",
                          "3": "C",
                          "4": "D"
                      }
                  },
                  "type": "map_instance_values"
              },
              {
                  "index_of": "correct_answer_num",
                  "search_in": "numbering",
                  "to_field": "index",
                  "type": "index_of"
              },
              {
                  "field_to_field": {
                      "choices": "_choices",
                      "dialect": "topic",
                      "flores_passage": "context",
                      "index": "_index",
                      "numbering": "_numbering",
                      "question": "sentence1"
                  },
                  "type": "rename_fields"
              },
              {
                  "field": "_numbering",
                  "index": "_index",
                  "to_field": "number",
                  "type": "take_by_field"
              },
              {
                  "field": "_choices",
                  "index": "_index",
                  "to_field": "answer",
                  "type": "take_by_field"
              },
              {
                  "fields": [
                      "_numbering",
                      "_choices"
                  ],
                  "to_field": "choices",
                  "type": "zip_field_values"
              },
              {
                  "field": "choices/*",
                  "process_every_value": true,
                  "separator": ". ",
                  "to_field": "choices_list",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "field": "choices_list",
                  "index": "_index",
                  "to_field": "number_and_answer",
                  "type": "take_by_field"
              },
              {
                  "field": "choices/*/0",
                  "separator": ",",
                  "to_field": "numbers",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "add": [
                      ""
                  ],
                  "field": "choices_list",
                  "to_field": "choices_list",
                  "type": "add_constant"
              },
              {
                  "field": "choices_list",
                  "separator": "\n",
                  "to_field": "choices",
                  "type": "join_str"
              },
              {
                  "field_to_field": {
                      "number": "label"
                  },
                  "type": "rename_fields"
              }
          ],
          "task": {
              "inputs": [
                  "choices",
                  "sentence1",
                  "numbers",
                  "topic",
                  "context"
              ],
              "metrics": [
                  "metrics.accuracy"
              ],
              "outputs": [
                  "label"
              ],
              "type": "form_task"
          },
          "templates": "templates.qa.multiple_choice.context_no_intro.all",
          "type": "task_card"
      }

References: :ref:`metrics.accuracy <metrics.accuracy>`, :ref:`templates.qa.multiple_choice.context_no_intro.all <templates.qa.multiple_choice.context_no_intro.all>`

|
|



.. _cards.belebele.nob_Latn:

----------

nob_Latn
""""""""

.. note:: ID: ``cards.belebele.nob_Latn``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "default",
              "path": "facebook/belebele",
              "split": "nob_Latn",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "mapper": {
                      "nob_Latn": "test"
                  },
                  "type": "rename_splits"
              },
              {
                  "fields": {
                      "numbering": [
                          "A",
                          "B",
                          "C",
                          "D",
                          "E",
                          "F",
                          "G",
                          "H",
                          "I",
                          "J",
                          "K",
                          "L",
                          "M",
                          "N",
                          "O",
                          "P",
                          "Q",
                          "R",
                          "S",
                          "T",
                          "U",
                          "V",
                          "W",
                          "X",
                          "Y",
                          "Z"
                      ]
                  },
                  "type": "add_fields"
              },
              {
                  "fields": [
                      "mc_answer1",
                      "mc_answer2",
                      "mc_answer3",
                      "mc_answer4"
                  ],
                  "to_field": "choices",
                  "type": "list_field_values"
              },
              {
                  "mappers": {
                      "correct_answer_num": {
                          "1": "A",
                          "2": "B",
                          "3": "C",
                          "4": "D"
                      }
                  },
                  "type": "map_instance_values"
              },
              {
                  "index_of": "correct_answer_num",
                  "search_in": "numbering",
                  "to_field": "index",
                  "type": "index_of"
              },
              {
                  "field_to_field": {
                      "choices": "_choices",
                      "dialect": "topic",
                      "flores_passage": "context",
                      "index": "_index",
                      "numbering": "_numbering",
                      "question": "sentence1"
                  },
                  "type": "rename_fields"
              },
              {
                  "field": "_numbering",
                  "index": "_index",
                  "to_field": "number",
                  "type": "take_by_field"
              },
              {
                  "field": "_choices",
                  "index": "_index",
                  "to_field": "answer",
                  "type": "take_by_field"
              },
              {
                  "fields": [
                      "_numbering",
                      "_choices"
                  ],
                  "to_field": "choices",
                  "type": "zip_field_values"
              },
              {
                  "field": "choices/*",
                  "process_every_value": true,
                  "separator": ". ",
                  "to_field": "choices_list",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "field": "choices_list",
                  "index": "_index",
                  "to_field": "number_and_answer",
                  "type": "take_by_field"
              },
              {
                  "field": "choices/*/0",
                  "separator": ",",
                  "to_field": "numbers",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "add": [
                      ""
                  ],
                  "field": "choices_list",
                  "to_field": "choices_list",
                  "type": "add_constant"
              },
              {
                  "field": "choices_list",
                  "separator": "\n",
                  "to_field": "choices",
                  "type": "join_str"
              },
              {
                  "field_to_field": {
                      "number": "label"
                  },
                  "type": "rename_fields"
              }
          ],
          "task": {
              "inputs": [
                  "choices",
                  "sentence1",
                  "numbers",
                  "topic",
                  "context"
              ],
              "metrics": [
                  "metrics.accuracy"
              ],
              "outputs": [
                  "label"
              ],
              "type": "form_task"
          },
          "templates": "templates.qa.multiple_choice.context_no_intro.all",
          "type": "task_card"
      }

References: :ref:`metrics.accuracy <metrics.accuracy>`, :ref:`templates.qa.multiple_choice.context_no_intro.all <templates.qa.multiple_choice.context_no_intro.all>`

|
|



.. _cards.belebele.lug_Latn:

----------

lug_Latn
""""""""

.. note:: ID: ``cards.belebele.lug_Latn``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "default",
              "path": "facebook/belebele",
              "split": "lug_Latn",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "mapper": {
                      "lug_Latn": "test"
                  },
                  "type": "rename_splits"
              },
              {
                  "fields": {
                      "numbering": [
                          "A",
                          "B",
                          "C",
                          "D",
                          "E",
                          "F",
                          "G",
                          "H",
                          "I",
                          "J",
                          "K",
                          "L",
                          "M",
                          "N",
                          "O",
                          "P",
                          "Q",
                          "R",
                          "S",
                          "T",
                          "U",
                          "V",
                          "W",
                          "X",
                          "Y",
                          "Z"
                      ]
                  },
                  "type": "add_fields"
              },
              {
                  "fields": [
                      "mc_answer1",
                      "mc_answer2",
                      "mc_answer3",
                      "mc_answer4"
                  ],
                  "to_field": "choices",
                  "type": "list_field_values"
              },
              {
                  "mappers": {
                      "correct_answer_num": {
                          "1": "A",
                          "2": "B",
                          "3": "C",
                          "4": "D"
                      }
                  },
                  "type": "map_instance_values"
              },
              {
                  "index_of": "correct_answer_num",
                  "search_in": "numbering",
                  "to_field": "index",
                  "type": "index_of"
              },
              {
                  "field_to_field": {
                      "choices": "_choices",
                      "dialect": "topic",
                      "flores_passage": "context",
                      "index": "_index",
                      "numbering": "_numbering",
                      "question": "sentence1"
                  },
                  "type": "rename_fields"
              },
              {
                  "field": "_numbering",
                  "index": "_index",
                  "to_field": "number",
                  "type": "take_by_field"
              },
              {
                  "field": "_choices",
                  "index": "_index",
                  "to_field": "answer",
                  "type": "take_by_field"
              },
              {
                  "fields": [
                      "_numbering",
                      "_choices"
                  ],
                  "to_field": "choices",
                  "type": "zip_field_values"
              },
              {
                  "field": "choices/*",
                  "process_every_value": true,
                  "separator": ". ",
                  "to_field": "choices_list",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "field": "choices_list",
                  "index": "_index",
                  "to_field": "number_and_answer",
                  "type": "take_by_field"
              },
              {
                  "field": "choices/*/0",
                  "separator": ",",
                  "to_field": "numbers",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "add": [
                      ""
                  ],
                  "field": "choices_list",
                  "to_field": "choices_list",
                  "type": "add_constant"
              },
              {
                  "field": "choices_list",
                  "separator": "\n",
                  "to_field": "choices",
                  "type": "join_str"
              },
              {
                  "field_to_field": {
                      "number": "label"
                  },
                  "type": "rename_fields"
              }
          ],
          "task": {
              "inputs": [
                  "choices",
                  "sentence1",
                  "numbers",
                  "topic",
                  "context"
              ],
              "metrics": [
                  "metrics.accuracy"
              ],
              "outputs": [
                  "label"
              ],
              "type": "form_task"
          },
          "templates": "templates.qa.multiple_choice.context_no_intro.all",
          "type": "task_card"
      }

References: :ref:`metrics.accuracy <metrics.accuracy>`, :ref:`templates.qa.multiple_choice.context_no_intro.all <templates.qa.multiple_choice.context_no_intro.all>`

|
|



.. _cards.belebele.zsm_Latn:

----------

zsm_Latn
""""""""

.. note:: ID: ``cards.belebele.zsm_Latn``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "default",
              "path": "facebook/belebele",
              "split": "zsm_Latn",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "mapper": {
                      "zsm_Latn": "test"
                  },
                  "type": "rename_splits"
              },
              {
                  "fields": {
                      "numbering": [
                          "A",
                          "B",
                          "C",
                          "D",
                          "E",
                          "F",
                          "G",
                          "H",
                          "I",
                          "J",
                          "K",
                          "L",
                          "M",
                          "N",
                          "O",
                          "P",
                          "Q",
                          "R",
                          "S",
                          "T",
                          "U",
                          "V",
                          "W",
                          "X",
                          "Y",
                          "Z"
                      ]
                  },
                  "type": "add_fields"
              },
              {
                  "fields": [
                      "mc_answer1",
                      "mc_answer2",
                      "mc_answer3",
                      "mc_answer4"
                  ],
                  "to_field": "choices",
                  "type": "list_field_values"
              },
              {
                  "mappers": {
                      "correct_answer_num": {
                          "1": "A",
                          "2": "B",
                          "3": "C",
                          "4": "D"
                      }
                  },
                  "type": "map_instance_values"
              },
              {
                  "index_of": "correct_answer_num",
                  "search_in": "numbering",
                  "to_field": "index",
                  "type": "index_of"
              },
              {
                  "field_to_field": {
                      "choices": "_choices",
                      "dialect": "topic",
                      "flores_passage": "context",
                      "index": "_index",
                      "numbering": "_numbering",
                      "question": "sentence1"
                  },
                  "type": "rename_fields"
              },
              {
                  "field": "_numbering",
                  "index": "_index",
                  "to_field": "number",
                  "type": "take_by_field"
              },
              {
                  "field": "_choices",
                  "index": "_index",
                  "to_field": "answer",
                  "type": "take_by_field"
              },
              {
                  "fields": [
                      "_numbering",
                      "_choices"
                  ],
                  "to_field": "choices",
                  "type": "zip_field_values"
              },
              {
                  "field": "choices/*",
                  "process_every_value": true,
                  "separator": ". ",
                  "to_field": "choices_list",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "field": "choices_list",
                  "index": "_index",
                  "to_field": "number_and_answer",
                  "type": "take_by_field"
              },
              {
                  "field": "choices/*/0",
                  "separator": ",",
                  "to_field": "numbers",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "add": [
                      ""
                  ],
                  "field": "choices_list",
                  "to_field": "choices_list",
                  "type": "add_constant"
              },
              {
                  "field": "choices_list",
                  "separator": "\n",
                  "to_field": "choices",
                  "type": "join_str"
              },
              {
                  "field_to_field": {
                      "number": "label"
                  },
                  "type": "rename_fields"
              }
          ],
          "task": {
              "inputs": [
                  "choices",
                  "sentence1",
                  "numbers",
                  "topic",
                  "context"
              ],
              "metrics": [
                  "metrics.accuracy"
              ],
              "outputs": [
                  "label"
              ],
              "type": "form_task"
          },
          "templates": "templates.qa.multiple_choice.context_no_intro.all",
          "type": "task_card"
      }

References: :ref:`metrics.accuracy <metrics.accuracy>`, :ref:`templates.qa.multiple_choice.context_no_intro.all <templates.qa.multiple_choice.context_no_intro.all>`

|
|



.. _cards.belebele.fra_Latn:

----------

fra_Latn
""""""""

.. note:: ID: ``cards.belebele.fra_Latn``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "default",
              "path": "facebook/belebele",
              "split": "fra_Latn",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "mapper": {
                      "fra_Latn": "test"
                  },
                  "type": "rename_splits"
              },
              {
                  "fields": {
                      "numbering": [
                          "A",
                          "B",
                          "C",
                          "D",
                          "E",
                          "F",
                          "G",
                          "H",
                          "I",
                          "J",
                          "K",
                          "L",
                          "M",
                          "N",
                          "O",
                          "P",
                          "Q",
                          "R",
                          "S",
                          "T",
                          "U",
                          "V",
                          "W",
                          "X",
                          "Y",
                          "Z"
                      ]
                  },
                  "type": "add_fields"
              },
              {
                  "fields": [
                      "mc_answer1",
                      "mc_answer2",
                      "mc_answer3",
                      "mc_answer4"
                  ],
                  "to_field": "choices",
                  "type": "list_field_values"
              },
              {
                  "mappers": {
                      "correct_answer_num": {
                          "1": "A",
                          "2": "B",
                          "3": "C",
                          "4": "D"
                      }
                  },
                  "type": "map_instance_values"
              },
              {
                  "index_of": "correct_answer_num",
                  "search_in": "numbering",
                  "to_field": "index",
                  "type": "index_of"
              },
              {
                  "field_to_field": {
                      "choices": "_choices",
                      "dialect": "topic",
                      "flores_passage": "context",
                      "index": "_index",
                      "numbering": "_numbering",
                      "question": "sentence1"
                  },
                  "type": "rename_fields"
              },
              {
                  "field": "_numbering",
                  "index": "_index",
                  "to_field": "number",
                  "type": "take_by_field"
              },
              {
                  "field": "_choices",
                  "index": "_index",
                  "to_field": "answer",
                  "type": "take_by_field"
              },
              {
                  "fields": [
                      "_numbering",
                      "_choices"
                  ],
                  "to_field": "choices",
                  "type": "zip_field_values"
              },
              {
                  "field": "choices/*",
                  "process_every_value": true,
                  "separator": ". ",
                  "to_field": "choices_list",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "field": "choices_list",
                  "index": "_index",
                  "to_field": "number_and_answer",
                  "type": "take_by_field"
              },
              {
                  "field": "choices/*/0",
                  "separator": ",",
                  "to_field": "numbers",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "add": [
                      ""
                  ],
                  "field": "choices_list",
                  "to_field": "choices_list",
                  "type": "add_constant"
              },
              {
                  "field": "choices_list",
                  "separator": "\n",
                  "to_field": "choices",
                  "type": "join_str"
              },
              {
                  "field_to_field": {
                      "number": "label"
                  },
                  "type": "rename_fields"
              }
          ],
          "task": {
              "inputs": [
                  "choices",
                  "sentence1",
                  "numbers",
                  "topic",
                  "context"
              ],
              "metrics": [
                  "metrics.accuracy"
              ],
              "outputs": [
                  "label"
              ],
              "type": "form_task"
          },
          "templates": "templates.qa.multiple_choice.context_no_intro.all",
          "type": "task_card"
      }

References: :ref:`metrics.accuracy <metrics.accuracy>`, :ref:`templates.qa.multiple_choice.context_no_intro.all <templates.qa.multiple_choice.context_no_intro.all>`

|
|



.. _cards.belebele.tgk_Cyrl:

----------

tgk_Cyrl
""""""""

.. note:: ID: ``cards.belebele.tgk_Cyrl``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "default",
              "path": "facebook/belebele",
              "split": "tgk_Cyrl",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "mapper": {
                      "tgk_Cyrl": "test"
                  },
                  "type": "rename_splits"
              },
              {
                  "fields": {
                      "numbering": [
                          "A",
                          "B",
                          "C",
                          "D",
                          "E",
                          "F",
                          "G",
                          "H",
                          "I",
                          "J",
                          "K",
                          "L",
                          "M",
                          "N",
                          "O",
                          "P",
                          "Q",
                          "R",
                          "S",
                          "T",
                          "U",
                          "V",
                          "W",
                          "X",
                          "Y",
                          "Z"
                      ]
                  },
                  "type": "add_fields"
              },
              {
                  "fields": [
                      "mc_answer1",
                      "mc_answer2",
                      "mc_answer3",
                      "mc_answer4"
                  ],
                  "to_field": "choices",
                  "type": "list_field_values"
              },
              {
                  "mappers": {
                      "correct_answer_num": {
                          "1": "A",
                          "2": "B",
                          "3": "C",
                          "4": "D"
                      }
                  },
                  "type": "map_instance_values"
              },
              {
                  "index_of": "correct_answer_num",
                  "search_in": "numbering",
                  "to_field": "index",
                  "type": "index_of"
              },
              {
                  "field_to_field": {
                      "choices": "_choices",
                      "dialect": "topic",
                      "flores_passage": "context",
                      "index": "_index",
                      "numbering": "_numbering",
                      "question": "sentence1"
                  },
                  "type": "rename_fields"
              },
              {
                  "field": "_numbering",
                  "index": "_index",
                  "to_field": "number",
                  "type": "take_by_field"
              },
              {
                  "field": "_choices",
                  "index": "_index",
                  "to_field": "answer",
                  "type": "take_by_field"
              },
              {
                  "fields": [
                      "_numbering",
                      "_choices"
                  ],
                  "to_field": "choices",
                  "type": "zip_field_values"
              },
              {
                  "field": "choices/*",
                  "process_every_value": true,
                  "separator": ". ",
                  "to_field": "choices_list",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "field": "choices_list",
                  "index": "_index",
                  "to_field": "number_and_answer",
                  "type": "take_by_field"
              },
              {
                  "field": "choices/*/0",
                  "separator": ",",
                  "to_field": "numbers",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "add": [
                      ""
                  ],
                  "field": "choices_list",
                  "to_field": "choices_list",
                  "type": "add_constant"
              },
              {
                  "field": "choices_list",
                  "separator": "\n",
                  "to_field": "choices",
                  "type": "join_str"
              },
              {
                  "field_to_field": {
                      "number": "label"
                  },
                  "type": "rename_fields"
              }
          ],
          "task": {
              "inputs": [
                  "choices",
                  "sentence1",
                  "numbers",
                  "topic",
                  "context"
              ],
              "metrics": [
                  "metrics.accuracy"
              ],
              "outputs": [
                  "label"
              ],
              "type": "form_task"
          },
          "templates": "templates.qa.multiple_choice.context_no_intro.all",
          "type": "task_card"
      }

References: :ref:`metrics.accuracy <metrics.accuracy>`, :ref:`templates.qa.multiple_choice.context_no_intro.all <templates.qa.multiple_choice.context_no_intro.all>`

|
|



.. _cards.belebele.dan_Latn:

----------

dan_Latn
""""""""

.. note:: ID: ``cards.belebele.dan_Latn``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "default",
              "path": "facebook/belebele",
              "split": "dan_Latn",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "mapper": {
                      "dan_Latn": "test"
                  },
                  "type": "rename_splits"
              },
              {
                  "fields": {
                      "numbering": [
                          "A",
                          "B",
                          "C",
                          "D",
                          "E",
                          "F",
                          "G",
                          "H",
                          "I",
                          "J",
                          "K",
                          "L",
                          "M",
                          "N",
                          "O",
                          "P",
                          "Q",
                          "R",
                          "S",
                          "T",
                          "U",
                          "V",
                          "W",
                          "X",
                          "Y",
                          "Z"
                      ]
                  },
                  "type": "add_fields"
              },
              {
                  "fields": [
                      "mc_answer1",
                      "mc_answer2",
                      "mc_answer3",
                      "mc_answer4"
                  ],
                  "to_field": "choices",
                  "type": "list_field_values"
              },
              {
                  "mappers": {
                      "correct_answer_num": {
                          "1": "A",
                          "2": "B",
                          "3": "C",
                          "4": "D"
                      }
                  },
                  "type": "map_instance_values"
              },
              {
                  "index_of": "correct_answer_num",
                  "search_in": "numbering",
                  "to_field": "index",
                  "type": "index_of"
              },
              {
                  "field_to_field": {
                      "choices": "_choices",
                      "dialect": "topic",
                      "flores_passage": "context",
                      "index": "_index",
                      "numbering": "_numbering",
                      "question": "sentence1"
                  },
                  "type": "rename_fields"
              },
              {
                  "field": "_numbering",
                  "index": "_index",
                  "to_field": "number",
                  "type": "take_by_field"
              },
              {
                  "field": "_choices",
                  "index": "_index",
                  "to_field": "answer",
                  "type": "take_by_field"
              },
              {
                  "fields": [
                      "_numbering",
                      "_choices"
                  ],
                  "to_field": "choices",
                  "type": "zip_field_values"
              },
              {
                  "field": "choices/*",
                  "process_every_value": true,
                  "separator": ". ",
                  "to_field": "choices_list",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "field": "choices_list",
                  "index": "_index",
                  "to_field": "number_and_answer",
                  "type": "take_by_field"
              },
              {
                  "field": "choices/*/0",
                  "separator": ",",
                  "to_field": "numbers",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "add": [
                      ""
                  ],
                  "field": "choices_list",
                  "to_field": "choices_list",
                  "type": "add_constant"
              },
              {
                  "field": "choices_list",
                  "separator": "\n",
                  "to_field": "choices",
                  "type": "join_str"
              },
              {
                  "field_to_field": {
                      "number": "label"
                  },
                  "type": "rename_fields"
              }
          ],
          "task": {
              "inputs": [
                  "choices",
                  "sentence1",
                  "numbers",
                  "topic",
                  "context"
              ],
              "metrics": [
                  "metrics.accuracy"
              ],
              "outputs": [
                  "label"
              ],
              "type": "form_task"
          },
          "templates": "templates.qa.multiple_choice.context_no_intro.all",
          "type": "task_card"
      }

References: :ref:`metrics.accuracy <metrics.accuracy>`, :ref:`templates.qa.multiple_choice.context_no_intro.all <templates.qa.multiple_choice.context_no_intro.all>`

|
|



.. _cards.belebele.ben_Latn:

----------

ben_Latn
""""""""

.. note:: ID: ``cards.belebele.ben_Latn``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "default",
              "path": "facebook/belebele",
              "split": "ben_Latn",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "mapper": {
                      "ben_Latn": "test"
                  },
                  "type": "rename_splits"
              },
              {
                  "fields": {
                      "numbering": [
                          "A",
                          "B",
                          "C",
                          "D",
                          "E",
                          "F",
                          "G",
                          "H",
                          "I",
                          "J",
                          "K",
                          "L",
                          "M",
                          "N",
                          "O",
                          "P",
                          "Q",
                          "R",
                          "S",
                          "T",
                          "U",
                          "V",
                          "W",
                          "X",
                          "Y",
                          "Z"
                      ]
                  },
                  "type": "add_fields"
              },
              {
                  "fields": [
                      "mc_answer1",
                      "mc_answer2",
                      "mc_answer3",
                      "mc_answer4"
                  ],
                  "to_field": "choices",
                  "type": "list_field_values"
              },
              {
                  "mappers": {
                      "correct_answer_num": {
                          "1": "A",
                          "2": "B",
                          "3": "C",
                          "4": "D"
                      }
                  },
                  "type": "map_instance_values"
              },
              {
                  "index_of": "correct_answer_num",
                  "search_in": "numbering",
                  "to_field": "index",
                  "type": "index_of"
              },
              {
                  "field_to_field": {
                      "choices": "_choices",
                      "dialect": "topic",
                      "flores_passage": "context",
                      "index": "_index",
                      "numbering": "_numbering",
                      "question": "sentence1"
                  },
                  "type": "rename_fields"
              },
              {
                  "field": "_numbering",
                  "index": "_index",
                  "to_field": "number",
                  "type": "take_by_field"
              },
              {
                  "field": "_choices",
                  "index": "_index",
                  "to_field": "answer",
                  "type": "take_by_field"
              },
              {
                  "fields": [
                      "_numbering",
                      "_choices"
                  ],
                  "to_field": "choices",
                  "type": "zip_field_values"
              },
              {
                  "field": "choices/*",
                  "process_every_value": true,
                  "separator": ". ",
                  "to_field": "choices_list",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "field": "choices_list",
                  "index": "_index",
                  "to_field": "number_and_answer",
                  "type": "take_by_field"
              },
              {
                  "field": "choices/*/0",
                  "separator": ",",
                  "to_field": "numbers",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "add": [
                      ""
                  ],
                  "field": "choices_list",
                  "to_field": "choices_list",
                  "type": "add_constant"
              },
              {
                  "field": "choices_list",
                  "separator": "\n",
                  "to_field": "choices",
                  "type": "join_str"
              },
              {
                  "field_to_field": {
                      "number": "label"
                  },
                  "type": "rename_fields"
              }
          ],
          "task": {
              "inputs": [
                  "choices",
                  "sentence1",
                  "numbers",
                  "topic",
                  "context"
              ],
              "metrics": [
                  "metrics.accuracy"
              ],
              "outputs": [
                  "label"
              ],
              "type": "form_task"
          },
          "templates": "templates.qa.multiple_choice.context_no_intro.all",
          "type": "task_card"
      }

References: :ref:`metrics.accuracy <metrics.accuracy>`, :ref:`templates.qa.multiple_choice.context_no_intro.all <templates.qa.multiple_choice.context_no_intro.all>`

|
|



.. _cards.belebele.shn_Mymr:

----------

shn_Mymr
""""""""

.. note:: ID: ``cards.belebele.shn_Mymr``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "default",
              "path": "facebook/belebele",
              "split": "shn_Mymr",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "mapper": {
                      "shn_Mymr": "test"
                  },
                  "type": "rename_splits"
              },
              {
                  "fields": {
                      "numbering": [
                          "A",
                          "B",
                          "C",
                          "D",
                          "E",
                          "F",
                          "G",
                          "H",
                          "I",
                          "J",
                          "K",
                          "L",
                          "M",
                          "N",
                          "O",
                          "P",
                          "Q",
                          "R",
                          "S",
                          "T",
                          "U",
                          "V",
                          "W",
                          "X",
                          "Y",
                          "Z"
                      ]
                  },
                  "type": "add_fields"
              },
              {
                  "fields": [
                      "mc_answer1",
                      "mc_answer2",
                      "mc_answer3",
                      "mc_answer4"
                  ],
                  "to_field": "choices",
                  "type": "list_field_values"
              },
              {
                  "mappers": {
                      "correct_answer_num": {
                          "1": "A",
                          "2": "B",
                          "3": "C",
                          "4": "D"
                      }
                  },
                  "type": "map_instance_values"
              },
              {
                  "index_of": "correct_answer_num",
                  "search_in": "numbering",
                  "to_field": "index",
                  "type": "index_of"
              },
              {
                  "field_to_field": {
                      "choices": "_choices",
                      "dialect": "topic",
                      "flores_passage": "context",
                      "index": "_index",
                      "numbering": "_numbering",
                      "question": "sentence1"
                  },
                  "type": "rename_fields"
              },
              {
                  "field": "_numbering",
                  "index": "_index",
                  "to_field": "number",
                  "type": "take_by_field"
              },
              {
                  "field": "_choices",
                  "index": "_index",
                  "to_field": "answer",
                  "type": "take_by_field"
              },
              {
                  "fields": [
                      "_numbering",
                      "_choices"
                  ],
                  "to_field": "choices",
                  "type": "zip_field_values"
              },
              {
                  "field": "choices/*",
                  "process_every_value": true,
                  "separator": ". ",
                  "to_field": "choices_list",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "field": "choices_list",
                  "index": "_index",
                  "to_field": "number_and_answer",
                  "type": "take_by_field"
              },
              {
                  "field": "choices/*/0",
                  "separator": ",",
                  "to_field": "numbers",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "add": [
                      ""
                  ],
                  "field": "choices_list",
                  "to_field": "choices_list",
                  "type": "add_constant"
              },
              {
                  "field": "choices_list",
                  "separator": "\n",
                  "to_field": "choices",
                  "type": "join_str"
              },
              {
                  "field_to_field": {
                      "number": "label"
                  },
                  "type": "rename_fields"
              }
          ],
          "task": {
              "inputs": [
                  "choices",
                  "sentence1",
                  "numbers",
                  "topic",
                  "context"
              ],
              "metrics": [
                  "metrics.accuracy"
              ],
              "outputs": [
                  "label"
              ],
              "type": "form_task"
          },
          "templates": "templates.qa.multiple_choice.context_no_intro.all",
          "type": "task_card"
      }

References: :ref:`metrics.accuracy <metrics.accuracy>`, :ref:`templates.qa.multiple_choice.context_no_intro.all <templates.qa.multiple_choice.context_no_intro.all>`

|
|



.. _cards.belebele.arb_Latn:

----------

arb_Latn
""""""""

.. note:: ID: ``cards.belebele.arb_Latn``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "default",
              "path": "facebook/belebele",
              "split": "arb_Latn",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "mapper": {
                      "arb_Latn": "test"
                  },
                  "type": "rename_splits"
              },
              {
                  "fields": {
                      "numbering": [
                          "A",
                          "B",
                          "C",
                          "D",
                          "E",
                          "F",
                          "G",
                          "H",
                          "I",
                          "J",
                          "K",
                          "L",
                          "M",
                          "N",
                          "O",
                          "P",
                          "Q",
                          "R",
                          "S",
                          "T",
                          "U",
                          "V",
                          "W",
                          "X",
                          "Y",
                          "Z"
                      ]
                  },
                  "type": "add_fields"
              },
              {
                  "fields": [
                      "mc_answer1",
                      "mc_answer2",
                      "mc_answer3",
                      "mc_answer4"
                  ],
                  "to_field": "choices",
                  "type": "list_field_values"
              },
              {
                  "mappers": {
                      "correct_answer_num": {
                          "1": "A",
                          "2": "B",
                          "3": "C",
                          "4": "D"
                      }
                  },
                  "type": "map_instance_values"
              },
              {
                  "index_of": "correct_answer_num",
                  "search_in": "numbering",
                  "to_field": "index",
                  "type": "index_of"
              },
              {
                  "field_to_field": {
                      "choices": "_choices",
                      "dialect": "topic",
                      "flores_passage": "context",
                      "index": "_index",
                      "numbering": "_numbering",
                      "question": "sentence1"
                  },
                  "type": "rename_fields"
              },
              {
                  "field": "_numbering",
                  "index": "_index",
                  "to_field": "number",
                  "type": "take_by_field"
              },
              {
                  "field": "_choices",
                  "index": "_index",
                  "to_field": "answer",
                  "type": "take_by_field"
              },
              {
                  "fields": [
                      "_numbering",
                      "_choices"
                  ],
                  "to_field": "choices",
                  "type": "zip_field_values"
              },
              {
                  "field": "choices/*",
                  "process_every_value": true,
                  "separator": ". ",
                  "to_field": "choices_list",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "field": "choices_list",
                  "index": "_index",
                  "to_field": "number_and_answer",
                  "type": "take_by_field"
              },
              {
                  "field": "choices/*/0",
                  "separator": ",",
                  "to_field": "numbers",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "add": [
                      ""
                  ],
                  "field": "choices_list",
                  "to_field": "choices_list",
                  "type": "add_constant"
              },
              {
                  "field": "choices_list",
                  "separator": "\n",
                  "to_field": "choices",
                  "type": "join_str"
              },
              {
                  "field_to_field": {
                      "number": "label"
                  },
                  "type": "rename_fields"
              }
          ],
          "task": {
              "inputs": [
                  "choices",
                  "sentence1",
                  "numbers",
                  "topic",
                  "context"
              ],
              "metrics": [
                  "metrics.accuracy"
              ],
              "outputs": [
                  "label"
              ],
              "type": "form_task"
          },
          "templates": "templates.qa.multiple_choice.context_no_intro.all",
          "type": "task_card"
      }

References: :ref:`metrics.accuracy <metrics.accuracy>`, :ref:`templates.qa.multiple_choice.context_no_intro.all <templates.qa.multiple_choice.context_no_intro.all>`

|
|



.. _cards.belebele.urd_Latn:

----------

urd_Latn
""""""""

.. note:: ID: ``cards.belebele.urd_Latn``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "default",
              "path": "facebook/belebele",
              "split": "urd_Latn",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "mapper": {
                      "urd_Latn": "test"
                  },
                  "type": "rename_splits"
              },
              {
                  "fields": {
                      "numbering": [
                          "A",
                          "B",
                          "C",
                          "D",
                          "E",
                          "F",
                          "G",
                          "H",
                          "I",
                          "J",
                          "K",
                          "L",
                          "M",
                          "N",
                          "O",
                          "P",
                          "Q",
                          "R",
                          "S",
                          "T",
                          "U",
                          "V",
                          "W",
                          "X",
                          "Y",
                          "Z"
                      ]
                  },
                  "type": "add_fields"
              },
              {
                  "fields": [
                      "mc_answer1",
                      "mc_answer2",
                      "mc_answer3",
                      "mc_answer4"
                  ],
                  "to_field": "choices",
                  "type": "list_field_values"
              },
              {
                  "mappers": {
                      "correct_answer_num": {
                          "1": "A",
                          "2": "B",
                          "3": "C",
                          "4": "D"
                      }
                  },
                  "type": "map_instance_values"
              },
              {
                  "index_of": "correct_answer_num",
                  "search_in": "numbering",
                  "to_field": "index",
                  "type": "index_of"
              },
              {
                  "field_to_field": {
                      "choices": "_choices",
                      "dialect": "topic",
                      "flores_passage": "context",
                      "index": "_index",
                      "numbering": "_numbering",
                      "question": "sentence1"
                  },
                  "type": "rename_fields"
              },
              {
                  "field": "_numbering",
                  "index": "_index",
                  "to_field": "number",
                  "type": "take_by_field"
              },
              {
                  "field": "_choices",
                  "index": "_index",
                  "to_field": "answer",
                  "type": "take_by_field"
              },
              {
                  "fields": [
                      "_numbering",
                      "_choices"
                  ],
                  "to_field": "choices",
                  "type": "zip_field_values"
              },
              {
                  "field": "choices/*",
                  "process_every_value": true,
                  "separator": ". ",
                  "to_field": "choices_list",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "field": "choices_list",
                  "index": "_index",
                  "to_field": "number_and_answer",
                  "type": "take_by_field"
              },
              {
                  "field": "choices/*/0",
                  "separator": ",",
                  "to_field": "numbers",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "add": [
                      ""
                  ],
                  "field": "choices_list",
                  "to_field": "choices_list",
                  "type": "add_constant"
              },
              {
                  "field": "choices_list",
                  "separator": "\n",
                  "to_field": "choices",
                  "type": "join_str"
              },
              {
                  "field_to_field": {
                      "number": "label"
                  },
                  "type": "rename_fields"
              }
          ],
          "task": {
              "inputs": [
                  "choices",
                  "sentence1",
                  "numbers",
                  "topic",
                  "context"
              ],
              "metrics": [
                  "metrics.accuracy"
              ],
              "outputs": [
                  "label"
              ],
              "type": "form_task"
          },
          "templates": "templates.qa.multiple_choice.context_no_intro.all",
          "type": "task_card"
      }

References: :ref:`metrics.accuracy <metrics.accuracy>`, :ref:`templates.qa.multiple_choice.context_no_intro.all <templates.qa.multiple_choice.context_no_intro.all>`

|
|



.. _cards.belebele.pan_Guru:

----------

pan_Guru
""""""""

.. note:: ID: ``cards.belebele.pan_Guru``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "default",
              "path": "facebook/belebele",
              "split": "pan_Guru",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "mapper": {
                      "pan_Guru": "test"
                  },
                  "type": "rename_splits"
              },
              {
                  "fields": {
                      "numbering": [
                          "A",
                          "B",
                          "C",
                          "D",
                          "E",
                          "F",
                          "G",
                          "H",
                          "I",
                          "J",
                          "K",
                          "L",
                          "M",
                          "N",
                          "O",
                          "P",
                          "Q",
                          "R",
                          "S",
                          "T",
                          "U",
                          "V",
                          "W",
                          "X",
                          "Y",
                          "Z"
                      ]
                  },
                  "type": "add_fields"
              },
              {
                  "fields": [
                      "mc_answer1",
                      "mc_answer2",
                      "mc_answer3",
                      "mc_answer4"
                  ],
                  "to_field": "choices",
                  "type": "list_field_values"
              },
              {
                  "mappers": {
                      "correct_answer_num": {
                          "1": "A",
                          "2": "B",
                          "3": "C",
                          "4": "D"
                      }
                  },
                  "type": "map_instance_values"
              },
              {
                  "index_of": "correct_answer_num",
                  "search_in": "numbering",
                  "to_field": "index",
                  "type": "index_of"
              },
              {
                  "field_to_field": {
                      "choices": "_choices",
                      "dialect": "topic",
                      "flores_passage": "context",
                      "index": "_index",
                      "numbering": "_numbering",
                      "question": "sentence1"
                  },
                  "type": "rename_fields"
              },
              {
                  "field": "_numbering",
                  "index": "_index",
                  "to_field": "number",
                  "type": "take_by_field"
              },
              {
                  "field": "_choices",
                  "index": "_index",
                  "to_field": "answer",
                  "type": "take_by_field"
              },
              {
                  "fields": [
                      "_numbering",
                      "_choices"
                  ],
                  "to_field": "choices",
                  "type": "zip_field_values"
              },
              {
                  "field": "choices/*",
                  "process_every_value": true,
                  "separator": ". ",
                  "to_field": "choices_list",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "field": "choices_list",
                  "index": "_index",
                  "to_field": "number_and_answer",
                  "type": "take_by_field"
              },
              {
                  "field": "choices/*/0",
                  "separator": ",",
                  "to_field": "numbers",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "add": [
                      ""
                  ],
                  "field": "choices_list",
                  "to_field": "choices_list",
                  "type": "add_constant"
              },
              {
                  "field": "choices_list",
                  "separator": "\n",
                  "to_field": "choices",
                  "type": "join_str"
              },
              {
                  "field_to_field": {
                      "number": "label"
                  },
                  "type": "rename_fields"
              }
          ],
          "task": {
              "inputs": [
                  "choices",
                  "sentence1",
                  "numbers",
                  "topic",
                  "context"
              ],
              "metrics": [
                  "metrics.accuracy"
              ],
              "outputs": [
                  "label"
              ],
              "type": "form_task"
          },
          "templates": "templates.qa.multiple_choice.context_no_intro.all",
          "type": "task_card"
      }

References: :ref:`metrics.accuracy <metrics.accuracy>`, :ref:`templates.qa.multiple_choice.context_no_intro.all <templates.qa.multiple_choice.context_no_intro.all>`

|
|



.. _cards.belebele.xho_Latn:

----------

xho_Latn
""""""""

.. note:: ID: ``cards.belebele.xho_Latn``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "default",
              "path": "facebook/belebele",
              "split": "xho_Latn",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "mapper": {
                      "xho_Latn": "test"
                  },
                  "type": "rename_splits"
              },
              {
                  "fields": {
                      "numbering": [
                          "A",
                          "B",
                          "C",
                          "D",
                          "E",
                          "F",
                          "G",
                          "H",
                          "I",
                          "J",
                          "K",
                          "L",
                          "M",
                          "N",
                          "O",
                          "P",
                          "Q",
                          "R",
                          "S",
                          "T",
                          "U",
                          "V",
                          "W",
                          "X",
                          "Y",
                          "Z"
                      ]
                  },
                  "type": "add_fields"
              },
              {
                  "fields": [
                      "mc_answer1",
                      "mc_answer2",
                      "mc_answer3",
                      "mc_answer4"
                  ],
                  "to_field": "choices",
                  "type": "list_field_values"
              },
              {
                  "mappers": {
                      "correct_answer_num": {
                          "1": "A",
                          "2": "B",
                          "3": "C",
                          "4": "D"
                      }
                  },
                  "type": "map_instance_values"
              },
              {
                  "index_of": "correct_answer_num",
                  "search_in": "numbering",
                  "to_field": "index",
                  "type": "index_of"
              },
              {
                  "field_to_field": {
                      "choices": "_choices",
                      "dialect": "topic",
                      "flores_passage": "context",
                      "index": "_index",
                      "numbering": "_numbering",
                      "question": "sentence1"
                  },
                  "type": "rename_fields"
              },
              {
                  "field": "_numbering",
                  "index": "_index",
                  "to_field": "number",
                  "type": "take_by_field"
              },
              {
                  "field": "_choices",
                  "index": "_index",
                  "to_field": "answer",
                  "type": "take_by_field"
              },
              {
                  "fields": [
                      "_numbering",
                      "_choices"
                  ],
                  "to_field": "choices",
                  "type": "zip_field_values"
              },
              {
                  "field": "choices/*",
                  "process_every_value": true,
                  "separator": ". ",
                  "to_field": "choices_list",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "field": "choices_list",
                  "index": "_index",
                  "to_field": "number_and_answer",
                  "type": "take_by_field"
              },
              {
                  "field": "choices/*/0",
                  "separator": ",",
                  "to_field": "numbers",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "add": [
                      ""
                  ],
                  "field": "choices_list",
                  "to_field": "choices_list",
                  "type": "add_constant"
              },
              {
                  "field": "choices_list",
                  "separator": "\n",
                  "to_field": "choices",
                  "type": "join_str"
              },
              {
                  "field_to_field": {
                      "number": "label"
                  },
                  "type": "rename_fields"
              }
          ],
          "task": {
              "inputs": [
                  "choices",
                  "sentence1",
                  "numbers",
                  "topic",
                  "context"
              ],
              "metrics": [
                  "metrics.accuracy"
              ],
              "outputs": [
                  "label"
              ],
              "type": "form_task"
          },
          "templates": "templates.qa.multiple_choice.context_no_intro.all",
          "type": "task_card"
      }

References: :ref:`metrics.accuracy <metrics.accuracy>`, :ref:`templates.qa.multiple_choice.context_no_intro.all <templates.qa.multiple_choice.context_no_intro.all>`

|
|



.. _cards.belebele.pol_Latn:

----------

pol_Latn
""""""""

.. note:: ID: ``cards.belebele.pol_Latn``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "default",
              "path": "facebook/belebele",
              "split": "pol_Latn",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "mapper": {
                      "pol_Latn": "test"
                  },
                  "type": "rename_splits"
              },
              {
                  "fields": {
                      "numbering": [
                          "A",
                          "B",
                          "C",
                          "D",
                          "E",
                          "F",
                          "G",
                          "H",
                          "I",
                          "J",
                          "K",
                          "L",
                          "M",
                          "N",
                          "O",
                          "P",
                          "Q",
                          "R",
                          "S",
                          "T",
                          "U",
                          "V",
                          "W",
                          "X",
                          "Y",
                          "Z"
                      ]
                  },
                  "type": "add_fields"
              },
              {
                  "fields": [
                      "mc_answer1",
                      "mc_answer2",
                      "mc_answer3",
                      "mc_answer4"
                  ],
                  "to_field": "choices",
                  "type": "list_field_values"
              },
              {
                  "mappers": {
                      "correct_answer_num": {
                          "1": "A",
                          "2": "B",
                          "3": "C",
                          "4": "D"
                      }
                  },
                  "type": "map_instance_values"
              },
              {
                  "index_of": "correct_answer_num",
                  "search_in": "numbering",
                  "to_field": "index",
                  "type": "index_of"
              },
              {
                  "field_to_field": {
                      "choices": "_choices",
                      "dialect": "topic",
                      "flores_passage": "context",
                      "index": "_index",
                      "numbering": "_numbering",
                      "question": "sentence1"
                  },
                  "type": "rename_fields"
              },
              {
                  "field": "_numbering",
                  "index": "_index",
                  "to_field": "number",
                  "type": "take_by_field"
              },
              {
                  "field": "_choices",
                  "index": "_index",
                  "to_field": "answer",
                  "type": "take_by_field"
              },
              {
                  "fields": [
                      "_numbering",
                      "_choices"
                  ],
                  "to_field": "choices",
                  "type": "zip_field_values"
              },
              {
                  "field": "choices/*",
                  "process_every_value": true,
                  "separator": ". ",
                  "to_field": "choices_list",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "field": "choices_list",
                  "index": "_index",
                  "to_field": "number_and_answer",
                  "type": "take_by_field"
              },
              {
                  "field": "choices/*/0",
                  "separator": ",",
                  "to_field": "numbers",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "add": [
                      ""
                  ],
                  "field": "choices_list",
                  "to_field": "choices_list",
                  "type": "add_constant"
              },
              {
                  "field": "choices_list",
                  "separator": "\n",
                  "to_field": "choices",
                  "type": "join_str"
              },
              {
                  "field_to_field": {
                      "number": "label"
                  },
                  "type": "rename_fields"
              }
          ],
          "task": {
              "inputs": [
                  "choices",
                  "sentence1",
                  "numbers",
                  "topic",
                  "context"
              ],
              "metrics": [
                  "metrics.accuracy"
              ],
              "outputs": [
                  "label"
              ],
              "type": "form_task"
          },
          "templates": "templates.qa.multiple_choice.context_no_intro.all",
          "type": "task_card"
      }

References: :ref:`metrics.accuracy <metrics.accuracy>`, :ref:`templates.qa.multiple_choice.context_no_intro.all <templates.qa.multiple_choice.context_no_intro.all>`

|
|



.. _cards.belebele.tha_Thai:

----------

tha_Thai
""""""""

.. note:: ID: ``cards.belebele.tha_Thai``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "default",
              "path": "facebook/belebele",
              "split": "tha_Thai",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "mapper": {
                      "tha_Thai": "test"
                  },
                  "type": "rename_splits"
              },
              {
                  "fields": {
                      "numbering": [
                          "A",
                          "B",
                          "C",
                          "D",
                          "E",
                          "F",
                          "G",
                          "H",
                          "I",
                          "J",
                          "K",
                          "L",
                          "M",
                          "N",
                          "O",
                          "P",
                          "Q",
                          "R",
                          "S",
                          "T",
                          "U",
                          "V",
                          "W",
                          "X",
                          "Y",
                          "Z"
                      ]
                  },
                  "type": "add_fields"
              },
              {
                  "fields": [
                      "mc_answer1",
                      "mc_answer2",
                      "mc_answer3",
                      "mc_answer4"
                  ],
                  "to_field": "choices",
                  "type": "list_field_values"
              },
              {
                  "mappers": {
                      "correct_answer_num": {
                          "1": "A",
                          "2": "B",
                          "3": "C",
                          "4": "D"
                      }
                  },
                  "type": "map_instance_values"
              },
              {
                  "index_of": "correct_answer_num",
                  "search_in": "numbering",
                  "to_field": "index",
                  "type": "index_of"
              },
              {
                  "field_to_field": {
                      "choices": "_choices",
                      "dialect": "topic",
                      "flores_passage": "context",
                      "index": "_index",
                      "numbering": "_numbering",
                      "question": "sentence1"
                  },
                  "type": "rename_fields"
              },
              {
                  "field": "_numbering",
                  "index": "_index",
                  "to_field": "number",
                  "type": "take_by_field"
              },
              {
                  "field": "_choices",
                  "index": "_index",
                  "to_field": "answer",
                  "type": "take_by_field"
              },
              {
                  "fields": [
                      "_numbering",
                      "_choices"
                  ],
                  "to_field": "choices",
                  "type": "zip_field_values"
              },
              {
                  "field": "choices/*",
                  "process_every_value": true,
                  "separator": ". ",
                  "to_field": "choices_list",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "field": "choices_list",
                  "index": "_index",
                  "to_field": "number_and_answer",
                  "type": "take_by_field"
              },
              {
                  "field": "choices/*/0",
                  "separator": ",",
                  "to_field": "numbers",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "add": [
                      ""
                  ],
                  "field": "choices_list",
                  "to_field": "choices_list",
                  "type": "add_constant"
              },
              {
                  "field": "choices_list",
                  "separator": "\n",
                  "to_field": "choices",
                  "type": "join_str"
              },
              {
                  "field_to_field": {
                      "number": "label"
                  },
                  "type": "rename_fields"
              }
          ],
          "task": {
              "inputs": [
                  "choices",
                  "sentence1",
                  "numbers",
                  "topic",
                  "context"
              ],
              "metrics": [
                  "metrics.accuracy"
              ],
              "outputs": [
                  "label"
              ],
              "type": "form_task"
          },
          "templates": "templates.qa.multiple_choice.context_no_intro.all",
          "type": "task_card"
      }

References: :ref:`metrics.accuracy <metrics.accuracy>`, :ref:`templates.qa.multiple_choice.context_no_intro.all <templates.qa.multiple_choice.context_no_intro.all>`

|
|



.. _cards.belebele.bod_Tibt:

----------

bod_Tibt
""""""""

.. note:: ID: ``cards.belebele.bod_Tibt``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "default",
              "path": "facebook/belebele",
              "split": "bod_Tibt",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "mapper": {
                      "bod_Tibt": "test"
                  },
                  "type": "rename_splits"
              },
              {
                  "fields": {
                      "numbering": [
                          "A",
                          "B",
                          "C",
                          "D",
                          "E",
                          "F",
                          "G",
                          "H",
                          "I",
                          "J",
                          "K",
                          "L",
                          "M",
                          "N",
                          "O",
                          "P",
                          "Q",
                          "R",
                          "S",
                          "T",
                          "U",
                          "V",
                          "W",
                          "X",
                          "Y",
                          "Z"
                      ]
                  },
                  "type": "add_fields"
              },
              {
                  "fields": [
                      "mc_answer1",
                      "mc_answer2",
                      "mc_answer3",
                      "mc_answer4"
                  ],
                  "to_field": "choices",
                  "type": "list_field_values"
              },
              {
                  "mappers": {
                      "correct_answer_num": {
                          "1": "A",
                          "2": "B",
                          "3": "C",
                          "4": "D"
                      }
                  },
                  "type": "map_instance_values"
              },
              {
                  "index_of": "correct_answer_num",
                  "search_in": "numbering",
                  "to_field": "index",
                  "type": "index_of"
              },
              {
                  "field_to_field": {
                      "choices": "_choices",
                      "dialect": "topic",
                      "flores_passage": "context",
                      "index": "_index",
                      "numbering": "_numbering",
                      "question": "sentence1"
                  },
                  "type": "rename_fields"
              },
              {
                  "field": "_numbering",
                  "index": "_index",
                  "to_field": "number",
                  "type": "take_by_field"
              },
              {
                  "field": "_choices",
                  "index": "_index",
                  "to_field": "answer",
                  "type": "take_by_field"
              },
              {
                  "fields": [
                      "_numbering",
                      "_choices"
                  ],
                  "to_field": "choices",
                  "type": "zip_field_values"
              },
              {
                  "field": "choices/*",
                  "process_every_value": true,
                  "separator": ". ",
                  "to_field": "choices_list",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "field": "choices_list",
                  "index": "_index",
                  "to_field": "number_and_answer",
                  "type": "take_by_field"
              },
              {
                  "field": "choices/*/0",
                  "separator": ",",
                  "to_field": "numbers",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "add": [
                      ""
                  ],
                  "field": "choices_list",
                  "to_field": "choices_list",
                  "type": "add_constant"
              },
              {
                  "field": "choices_list",
                  "separator": "\n",
                  "to_field": "choices",
                  "type": "join_str"
              },
              {
                  "field_to_field": {
                      "number": "label"
                  },
                  "type": "rename_fields"
              }
          ],
          "task": {
              "inputs": [
                  "choices",
                  "sentence1",
                  "numbers",
                  "topic",
                  "context"
              ],
              "metrics": [
                  "metrics.accuracy"
              ],
              "outputs": [
                  "label"
              ],
              "type": "form_task"
          },
          "templates": "templates.qa.multiple_choice.context_no_intro.all",
          "type": "task_card"
      }

References: :ref:`metrics.accuracy <metrics.accuracy>`, :ref:`templates.qa.multiple_choice.context_no_intro.all <templates.qa.multiple_choice.context_no_intro.all>`

|
|



.. _cards.belebele.por_Latn:

----------

por_Latn
""""""""

.. note:: ID: ``cards.belebele.por_Latn``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "default",
              "path": "facebook/belebele",
              "split": "por_Latn",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "mapper": {
                      "por_Latn": "test"
                  },
                  "type": "rename_splits"
              },
              {
                  "fields": {
                      "numbering": [
                          "A",
                          "B",
                          "C",
                          "D",
                          "E",
                          "F",
                          "G",
                          "H",
                          "I",
                          "J",
                          "K",
                          "L",
                          "M",
                          "N",
                          "O",
                          "P",
                          "Q",
                          "R",
                          "S",
                          "T",
                          "U",
                          "V",
                          "W",
                          "X",
                          "Y",
                          "Z"
                      ]
                  },
                  "type": "add_fields"
              },
              {
                  "fields": [
                      "mc_answer1",
                      "mc_answer2",
                      "mc_answer3",
                      "mc_answer4"
                  ],
                  "to_field": "choices",
                  "type": "list_field_values"
              },
              {
                  "mappers": {
                      "correct_answer_num": {
                          "1": "A",
                          "2": "B",
                          "3": "C",
                          "4": "D"
                      }
                  },
                  "type": "map_instance_values"
              },
              {
                  "index_of": "correct_answer_num",
                  "search_in": "numbering",
                  "to_field": "index",
                  "type": "index_of"
              },
              {
                  "field_to_field": {
                      "choices": "_choices",
                      "dialect": "topic",
                      "flores_passage": "context",
                      "index": "_index",
                      "numbering": "_numbering",
                      "question": "sentence1"
                  },
                  "type": "rename_fields"
              },
              {
                  "field": "_numbering",
                  "index": "_index",
                  "to_field": "number",
                  "type": "take_by_field"
              },
              {
                  "field": "_choices",
                  "index": "_index",
                  "to_field": "answer",
                  "type": "take_by_field"
              },
              {
                  "fields": [
                      "_numbering",
                      "_choices"
                  ],
                  "to_field": "choices",
                  "type": "zip_field_values"
              },
              {
                  "field": "choices/*",
                  "process_every_value": true,
                  "separator": ". ",
                  "to_field": "choices_list",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "field": "choices_list",
                  "index": "_index",
                  "to_field": "number_and_answer",
                  "type": "take_by_field"
              },
              {
                  "field": "choices/*/0",
                  "separator": ",",
                  "to_field": "numbers",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "add": [
                      ""
                  ],
                  "field": "choices_list",
                  "to_field": "choices_list",
                  "type": "add_constant"
              },
              {
                  "field": "choices_list",
                  "separator": "\n",
                  "to_field": "choices",
                  "type": "join_str"
              },
              {
                  "field_to_field": {
                      "number": "label"
                  },
                  "type": "rename_fields"
              }
          ],
          "task": {
              "inputs": [
                  "choices",
                  "sentence1",
                  "numbers",
                  "topic",
                  "context"
              ],
              "metrics": [
                  "metrics.accuracy"
              ],
              "outputs": [
                  "label"
              ],
              "type": "form_task"
          },
          "templates": "templates.qa.multiple_choice.context_no_intro.all",
          "type": "task_card"
      }

References: :ref:`metrics.accuracy <metrics.accuracy>`, :ref:`templates.qa.multiple_choice.context_no_intro.all <templates.qa.multiple_choice.context_no_intro.all>`

|
|



.. _cards.belebele.guj_Gujr:

----------

guj_Gujr
""""""""

.. note:: ID: ``cards.belebele.guj_Gujr``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "default",
              "path": "facebook/belebele",
              "split": "guj_Gujr",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "mapper": {
                      "guj_Gujr": "test"
                  },
                  "type": "rename_splits"
              },
              {
                  "fields": {
                      "numbering": [
                          "A",
                          "B",
                          "C",
                          "D",
                          "E",
                          "F",
                          "G",
                          "H",
                          "I",
                          "J",
                          "K",
                          "L",
                          "M",
                          "N",
                          "O",
                          "P",
                          "Q",
                          "R",
                          "S",
                          "T",
                          "U",
                          "V",
                          "W",
                          "X",
                          "Y",
                          "Z"
                      ]
                  },
                  "type": "add_fields"
              },
              {
                  "fields": [
                      "mc_answer1",
                      "mc_answer2",
                      "mc_answer3",
                      "mc_answer4"
                  ],
                  "to_field": "choices",
                  "type": "list_field_values"
              },
              {
                  "mappers": {
                      "correct_answer_num": {
                          "1": "A",
                          "2": "B",
                          "3": "C",
                          "4": "D"
                      }
                  },
                  "type": "map_instance_values"
              },
              {
                  "index_of": "correct_answer_num",
                  "search_in": "numbering",
                  "to_field": "index",
                  "type": "index_of"
              },
              {
                  "field_to_field": {
                      "choices": "_choices",
                      "dialect": "topic",
                      "flores_passage": "context",
                      "index": "_index",
                      "numbering": "_numbering",
                      "question": "sentence1"
                  },
                  "type": "rename_fields"
              },
              {
                  "field": "_numbering",
                  "index": "_index",
                  "to_field": "number",
                  "type": "take_by_field"
              },
              {
                  "field": "_choices",
                  "index": "_index",
                  "to_field": "answer",
                  "type": "take_by_field"
              },
              {
                  "fields": [
                      "_numbering",
                      "_choices"
                  ],
                  "to_field": "choices",
                  "type": "zip_field_values"
              },
              {
                  "field": "choices/*",
                  "process_every_value": true,
                  "separator": ". ",
                  "to_field": "choices_list",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "field": "choices_list",
                  "index": "_index",
                  "to_field": "number_and_answer",
                  "type": "take_by_field"
              },
              {
                  "field": "choices/*/0",
                  "separator": ",",
                  "to_field": "numbers",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "add": [
                      ""
                  ],
                  "field": "choices_list",
                  "to_field": "choices_list",
                  "type": "add_constant"
              },
              {
                  "field": "choices_list",
                  "separator": "\n",
                  "to_field": "choices",
                  "type": "join_str"
              },
              {
                  "field_to_field": {
                      "number": "label"
                  },
                  "type": "rename_fields"
              }
          ],
          "task": {
              "inputs": [
                  "choices",
                  "sentence1",
                  "numbers",
                  "topic",
                  "context"
              ],
              "metrics": [
                  "metrics.accuracy"
              ],
              "outputs": [
                  "label"
              ],
              "type": "form_task"
          },
          "templates": "templates.qa.multiple_choice.context_no_intro.all",
          "type": "task_card"
      }

References: :ref:`metrics.accuracy <metrics.accuracy>`, :ref:`templates.qa.multiple_choice.context_no_intro.all <templates.qa.multiple_choice.context_no_intro.all>`

|
|



.. _cards.belebele.tam_Taml:

----------

tam_Taml
""""""""

.. note:: ID: ``cards.belebele.tam_Taml``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "default",
              "path": "facebook/belebele",
              "split": "tam_Taml",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "mapper": {
                      "tam_Taml": "test"
                  },
                  "type": "rename_splits"
              },
              {
                  "fields": {
                      "numbering": [
                          "A",
                          "B",
                          "C",
                          "D",
                          "E",
                          "F",
                          "G",
                          "H",
                          "I",
                          "J",
                          "K",
                          "L",
                          "M",
                          "N",
                          "O",
                          "P",
                          "Q",
                          "R",
                          "S",
                          "T",
                          "U",
                          "V",
                          "W",
                          "X",
                          "Y",
                          "Z"
                      ]
                  },
                  "type": "add_fields"
              },
              {
                  "fields": [
                      "mc_answer1",
                      "mc_answer2",
                      "mc_answer3",
                      "mc_answer4"
                  ],
                  "to_field": "choices",
                  "type": "list_field_values"
              },
              {
                  "mappers": {
                      "correct_answer_num": {
                          "1": "A",
                          "2": "B",
                          "3": "C",
                          "4": "D"
                      }
                  },
                  "type": "map_instance_values"
              },
              {
                  "index_of": "correct_answer_num",
                  "search_in": "numbering",
                  "to_field": "index",
                  "type": "index_of"
              },
              {
                  "field_to_field": {
                      "choices": "_choices",
                      "dialect": "topic",
                      "flores_passage": "context",
                      "index": "_index",
                      "numbering": "_numbering",
                      "question": "sentence1"
                  },
                  "type": "rename_fields"
              },
              {
                  "field": "_numbering",
                  "index": "_index",
                  "to_field": "number",
                  "type": "take_by_field"
              },
              {
                  "field": "_choices",
                  "index": "_index",
                  "to_field": "answer",
                  "type": "take_by_field"
              },
              {
                  "fields": [
                      "_numbering",
                      "_choices"
                  ],
                  "to_field": "choices",
                  "type": "zip_field_values"
              },
              {
                  "field": "choices/*",
                  "process_every_value": true,
                  "separator": ". ",
                  "to_field": "choices_list",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "field": "choices_list",
                  "index": "_index",
                  "to_field": "number_and_answer",
                  "type": "take_by_field"
              },
              {
                  "field": "choices/*/0",
                  "separator": ",",
                  "to_field": "numbers",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "add": [
                      ""
                  ],
                  "field": "choices_list",
                  "to_field": "choices_list",
                  "type": "add_constant"
              },
              {
                  "field": "choices_list",
                  "separator": "\n",
                  "to_field": "choices",
                  "type": "join_str"
              },
              {
                  "field_to_field": {
                      "number": "label"
                  },
                  "type": "rename_fields"
              }
          ],
          "task": {
              "inputs": [
                  "choices",
                  "sentence1",
                  "numbers",
                  "topic",
                  "context"
              ],
              "metrics": [
                  "metrics.accuracy"
              ],
              "outputs": [
                  "label"
              ],
              "type": "form_task"
          },
          "templates": "templates.qa.multiple_choice.context_no_intro.all",
          "type": "task_card"
      }

References: :ref:`metrics.accuracy <metrics.accuracy>`, :ref:`templates.qa.multiple_choice.context_no_intro.all <templates.qa.multiple_choice.context_no_intro.all>`

|
|



.. _cards.belebele.fuv_Latn:

----------

fuv_Latn
""""""""

.. note:: ID: ``cards.belebele.fuv_Latn``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "default",
              "path": "facebook/belebele",
              "split": "fuv_Latn",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "mapper": {
                      "fuv_Latn": "test"
                  },
                  "type": "rename_splits"
              },
              {
                  "fields": {
                      "numbering": [
                          "A",
                          "B",
                          "C",
                          "D",
                          "E",
                          "F",
                          "G",
                          "H",
                          "I",
                          "J",
                          "K",
                          "L",
                          "M",
                          "N",
                          "O",
                          "P",
                          "Q",
                          "R",
                          "S",
                          "T",
                          "U",
                          "V",
                          "W",
                          "X",
                          "Y",
                          "Z"
                      ]
                  },
                  "type": "add_fields"
              },
              {
                  "fields": [
                      "mc_answer1",
                      "mc_answer2",
                      "mc_answer3",
                      "mc_answer4"
                  ],
                  "to_field": "choices",
                  "type": "list_field_values"
              },
              {
                  "mappers": {
                      "correct_answer_num": {
                          "1": "A",
                          "2": "B",
                          "3": "C",
                          "4": "D"
                      }
                  },
                  "type": "map_instance_values"
              },
              {
                  "index_of": "correct_answer_num",
                  "search_in": "numbering",
                  "to_field": "index",
                  "type": "index_of"
              },
              {
                  "field_to_field": {
                      "choices": "_choices",
                      "dialect": "topic",
                      "flores_passage": "context",
                      "index": "_index",
                      "numbering": "_numbering",
                      "question": "sentence1"
                  },
                  "type": "rename_fields"
              },
              {
                  "field": "_numbering",
                  "index": "_index",
                  "to_field": "number",
                  "type": "take_by_field"
              },
              {
                  "field": "_choices",
                  "index": "_index",
                  "to_field": "answer",
                  "type": "take_by_field"
              },
              {
                  "fields": [
                      "_numbering",
                      "_choices"
                  ],
                  "to_field": "choices",
                  "type": "zip_field_values"
              },
              {
                  "field": "choices/*",
                  "process_every_value": true,
                  "separator": ". ",
                  "to_field": "choices_list",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "field": "choices_list",
                  "index": "_index",
                  "to_field": "number_and_answer",
                  "type": "take_by_field"
              },
              {
                  "field": "choices/*/0",
                  "separator": ",",
                  "to_field": "numbers",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "add": [
                      ""
                  ],
                  "field": "choices_list",
                  "to_field": "choices_list",
                  "type": "add_constant"
              },
              {
                  "field": "choices_list",
                  "separator": "\n",
                  "to_field": "choices",
                  "type": "join_str"
              },
              {
                  "field_to_field": {
                      "number": "label"
                  },
                  "type": "rename_fields"
              }
          ],
          "task": {
              "inputs": [
                  "choices",
                  "sentence1",
                  "numbers",
                  "topic",
                  "context"
              ],
              "metrics": [
                  "metrics.accuracy"
              ],
              "outputs": [
                  "label"
              ],
              "type": "form_task"
          },
          "templates": "templates.qa.multiple_choice.context_no_intro.all",
          "type": "task_card"
      }

References: :ref:`metrics.accuracy <metrics.accuracy>`, :ref:`templates.qa.multiple_choice.context_no_intro.all <templates.qa.multiple_choice.context_no_intro.all>`

|
|



.. _cards.belebele.tso_Latn:

----------

tso_Latn
""""""""

.. note:: ID: ``cards.belebele.tso_Latn``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "default",
              "path": "facebook/belebele",
              "split": "tso_Latn",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "mapper": {
                      "tso_Latn": "test"
                  },
                  "type": "rename_splits"
              },
              {
                  "fields": {
                      "numbering": [
                          "A",
                          "B",
                          "C",
                          "D",
                          "E",
                          "F",
                          "G",
                          "H",
                          "I",
                          "J",
                          "K",
                          "L",
                          "M",
                          "N",
                          "O",
                          "P",
                          "Q",
                          "R",
                          "S",
                          "T",
                          "U",
                          "V",
                          "W",
                          "X",
                          "Y",
                          "Z"
                      ]
                  },
                  "type": "add_fields"
              },
              {
                  "fields": [
                      "mc_answer1",
                      "mc_answer2",
                      "mc_answer3",
                      "mc_answer4"
                  ],
                  "to_field": "choices",
                  "type": "list_field_values"
              },
              {
                  "mappers": {
                      "correct_answer_num": {
                          "1": "A",
                          "2": "B",
                          "3": "C",
                          "4": "D"
                      }
                  },
                  "type": "map_instance_values"
              },
              {
                  "index_of": "correct_answer_num",
                  "search_in": "numbering",
                  "to_field": "index",
                  "type": "index_of"
              },
              {
                  "field_to_field": {
                      "choices": "_choices",
                      "dialect": "topic",
                      "flores_passage": "context",
                      "index": "_index",
                      "numbering": "_numbering",
                      "question": "sentence1"
                  },
                  "type": "rename_fields"
              },
              {
                  "field": "_numbering",
                  "index": "_index",
                  "to_field": "number",
                  "type": "take_by_field"
              },
              {
                  "field": "_choices",
                  "index": "_index",
                  "to_field": "answer",
                  "type": "take_by_field"
              },
              {
                  "fields": [
                      "_numbering",
                      "_choices"
                  ],
                  "to_field": "choices",
                  "type": "zip_field_values"
              },
              {
                  "field": "choices/*",
                  "process_every_value": true,
                  "separator": ". ",
                  "to_field": "choices_list",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "field": "choices_list",
                  "index": "_index",
                  "to_field": "number_and_answer",
                  "type": "take_by_field"
              },
              {
                  "field": "choices/*/0",
                  "separator": ",",
                  "to_field": "numbers",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "add": [
                      ""
                  ],
                  "field": "choices_list",
                  "to_field": "choices_list",
                  "type": "add_constant"
              },
              {
                  "field": "choices_list",
                  "separator": "\n",
                  "to_field": "choices",
                  "type": "join_str"
              },
              {
                  "field_to_field": {
                      "number": "label"
                  },
                  "type": "rename_fields"
              }
          ],
          "task": {
              "inputs": [
                  "choices",
                  "sentence1",
                  "numbers",
                  "topic",
                  "context"
              ],
              "metrics": [
                  "metrics.accuracy"
              ],
              "outputs": [
                  "label"
              ],
              "type": "form_task"
          },
          "templates": "templates.qa.multiple_choice.context_no_intro.all",
          "type": "task_card"
      }

References: :ref:`metrics.accuracy <metrics.accuracy>`, :ref:`templates.qa.multiple_choice.context_no_intro.all <templates.qa.multiple_choice.context_no_intro.all>`

|
|



.. _cards.belebele.luo_Latn:

----------

luo_Latn
""""""""

.. note:: ID: ``cards.belebele.luo_Latn``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "default",
              "path": "facebook/belebele",
              "split": "luo_Latn",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "mapper": {
                      "luo_Latn": "test"
                  },
                  "type": "rename_splits"
              },
              {
                  "fields": {
                      "numbering": [
                          "A",
                          "B",
                          "C",
                          "D",
                          "E",
                          "F",
                          "G",
                          "H",
                          "I",
                          "J",
                          "K",
                          "L",
                          "M",
                          "N",
                          "O",
                          "P",
                          "Q",
                          "R",
                          "S",
                          "T",
                          "U",
                          "V",
                          "W",
                          "X",
                          "Y",
                          "Z"
                      ]
                  },
                  "type": "add_fields"
              },
              {
                  "fields": [
                      "mc_answer1",
                      "mc_answer2",
                      "mc_answer3",
                      "mc_answer4"
                  ],
                  "to_field": "choices",
                  "type": "list_field_values"
              },
              {
                  "mappers": {
                      "correct_answer_num": {
                          "1": "A",
                          "2": "B",
                          "3": "C",
                          "4": "D"
                      }
                  },
                  "type": "map_instance_values"
              },
              {
                  "index_of": "correct_answer_num",
                  "search_in": "numbering",
                  "to_field": "index",
                  "type": "index_of"
              },
              {
                  "field_to_field": {
                      "choices": "_choices",
                      "dialect": "topic",
                      "flores_passage": "context",
                      "index": "_index",
                      "numbering": "_numbering",
                      "question": "sentence1"
                  },
                  "type": "rename_fields"
              },
              {
                  "field": "_numbering",
                  "index": "_index",
                  "to_field": "number",
                  "type": "take_by_field"
              },
              {
                  "field": "_choices",
                  "index": "_index",
                  "to_field": "answer",
                  "type": "take_by_field"
              },
              {
                  "fields": [
                      "_numbering",
                      "_choices"
                  ],
                  "to_field": "choices",
                  "type": "zip_field_values"
              },
              {
                  "field": "choices/*",
                  "process_every_value": true,
                  "separator": ". ",
                  "to_field": "choices_list",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "field": "choices_list",
                  "index": "_index",
                  "to_field": "number_and_answer",
                  "type": "take_by_field"
              },
              {
                  "field": "choices/*/0",
                  "separator": ",",
                  "to_field": "numbers",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "add": [
                      ""
                  ],
                  "field": "choices_list",
                  "to_field": "choices_list",
                  "type": "add_constant"
              },
              {
                  "field": "choices_list",
                  "separator": "\n",
                  "to_field": "choices",
                  "type": "join_str"
              },
              {
                  "field_to_field": {
                      "number": "label"
                  },
                  "type": "rename_fields"
              }
          ],
          "task": {
              "inputs": [
                  "choices",
                  "sentence1",
                  "numbers",
                  "topic",
                  "context"
              ],
              "metrics": [
                  "metrics.accuracy"
              ],
              "outputs": [
                  "label"
              ],
              "type": "form_task"
          },
          "templates": "templates.qa.multiple_choice.context_no_intro.all",
          "type": "task_card"
      }

References: :ref:`metrics.accuracy <metrics.accuracy>`, :ref:`templates.qa.multiple_choice.context_no_intro.all <templates.qa.multiple_choice.context_no_intro.all>`

|
|



.. _cards.belebele.eng_Latn:

----------

eng_Latn
""""""""

.. note:: ID: ``cards.belebele.eng_Latn``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "default",
              "path": "facebook/belebele",
              "split": "eng_Latn",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "mapper": {
                      "eng_Latn": "test"
                  },
                  "type": "rename_splits"
              },
              {
                  "fields": {
                      "numbering": [
                          "A",
                          "B",
                          "C",
                          "D",
                          "E",
                          "F",
                          "G",
                          "H",
                          "I",
                          "J",
                          "K",
                          "L",
                          "M",
                          "N",
                          "O",
                          "P",
                          "Q",
                          "R",
                          "S",
                          "T",
                          "U",
                          "V",
                          "W",
                          "X",
                          "Y",
                          "Z"
                      ]
                  },
                  "type": "add_fields"
              },
              {
                  "fields": [
                      "mc_answer1",
                      "mc_answer2",
                      "mc_answer3",
                      "mc_answer4"
                  ],
                  "to_field": "choices",
                  "type": "list_field_values"
              },
              {
                  "mappers": {
                      "correct_answer_num": {
                          "1": "A",
                          "2": "B",
                          "3": "C",
                          "4": "D"
                      }
                  },
                  "type": "map_instance_values"
              },
              {
                  "index_of": "correct_answer_num",
                  "search_in": "numbering",
                  "to_field": "index",
                  "type": "index_of"
              },
              {
                  "field_to_field": {
                      "choices": "_choices",
                      "dialect": "topic",
                      "flores_passage": "context",
                      "index": "_index",
                      "numbering": "_numbering",
                      "question": "sentence1"
                  },
                  "type": "rename_fields"
              },
              {
                  "field": "_numbering",
                  "index": "_index",
                  "to_field": "number",
                  "type": "take_by_field"
              },
              {
                  "field": "_choices",
                  "index": "_index",
                  "to_field": "answer",
                  "type": "take_by_field"
              },
              {
                  "fields": [
                      "_numbering",
                      "_choices"
                  ],
                  "to_field": "choices",
                  "type": "zip_field_values"
              },
              {
                  "field": "choices/*",
                  "process_every_value": true,
                  "separator": ". ",
                  "to_field": "choices_list",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "field": "choices_list",
                  "index": "_index",
                  "to_field": "number_and_answer",
                  "type": "take_by_field"
              },
              {
                  "field": "choices/*/0",
                  "separator": ",",
                  "to_field": "numbers",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "add": [
                      ""
                  ],
                  "field": "choices_list",
                  "to_field": "choices_list",
                  "type": "add_constant"
              },
              {
                  "field": "choices_list",
                  "separator": "\n",
                  "to_field": "choices",
                  "type": "join_str"
              },
              {
                  "field_to_field": {
                      "number": "label"
                  },
                  "type": "rename_fields"
              }
          ],
          "task": {
              "inputs": [
                  "choices",
                  "sentence1",
                  "numbers",
                  "topic",
                  "context"
              ],
              "metrics": [
                  "metrics.accuracy"
              ],
              "outputs": [
                  "label"
              ],
              "type": "form_task"
          },
          "templates": "templates.qa.multiple_choice.context_no_intro.all",
          "type": "task_card"
      }

References: :ref:`metrics.accuracy <metrics.accuracy>`, :ref:`templates.qa.multiple_choice.context_no_intro.all <templates.qa.multiple_choice.context_no_intro.all>`

|
|



.. _cards.belebele.hrv_Latn:

----------

hrv_Latn
""""""""

.. note:: ID: ``cards.belebele.hrv_Latn``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "default",
              "path": "facebook/belebele",
              "split": "hrv_Latn",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "mapper": {
                      "hrv_Latn": "test"
                  },
                  "type": "rename_splits"
              },
              {
                  "fields": {
                      "numbering": [
                          "A",
                          "B",
                          "C",
                          "D",
                          "E",
                          "F",
                          "G",
                          "H",
                          "I",
                          "J",
                          "K",
                          "L",
                          "M",
                          "N",
                          "O",
                          "P",
                          "Q",
                          "R",
                          "S",
                          "T",
                          "U",
                          "V",
                          "W",
                          "X",
                          "Y",
                          "Z"
                      ]
                  },
                  "type": "add_fields"
              },
              {
                  "fields": [
                      "mc_answer1",
                      "mc_answer2",
                      "mc_answer3",
                      "mc_answer4"
                  ],
                  "to_field": "choices",
                  "type": "list_field_values"
              },
              {
                  "mappers": {
                      "correct_answer_num": {
                          "1": "A",
                          "2": "B",
                          "3": "C",
                          "4": "D"
                      }
                  },
                  "type": "map_instance_values"
              },
              {
                  "index_of": "correct_answer_num",
                  "search_in": "numbering",
                  "to_field": "index",
                  "type": "index_of"
              },
              {
                  "field_to_field": {
                      "choices": "_choices",
                      "dialect": "topic",
                      "flores_passage": "context",
                      "index": "_index",
                      "numbering": "_numbering",
                      "question": "sentence1"
                  },
                  "type": "rename_fields"
              },
              {
                  "field": "_numbering",
                  "index": "_index",
                  "to_field": "number",
                  "type": "take_by_field"
              },
              {
                  "field": "_choices",
                  "index": "_index",
                  "to_field": "answer",
                  "type": "take_by_field"
              },
              {
                  "fields": [
                      "_numbering",
                      "_choices"
                  ],
                  "to_field": "choices",
                  "type": "zip_field_values"
              },
              {
                  "field": "choices/*",
                  "process_every_value": true,
                  "separator": ". ",
                  "to_field": "choices_list",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "field": "choices_list",
                  "index": "_index",
                  "to_field": "number_and_answer",
                  "type": "take_by_field"
              },
              {
                  "field": "choices/*/0",
                  "separator": ",",
                  "to_field": "numbers",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "add": [
                      ""
                  ],
                  "field": "choices_list",
                  "to_field": "choices_list",
                  "type": "add_constant"
              },
              {
                  "field": "choices_list",
                  "separator": "\n",
                  "to_field": "choices",
                  "type": "join_str"
              },
              {
                  "field_to_field": {
                      "number": "label"
                  },
                  "type": "rename_fields"
              }
          ],
          "task": {
              "inputs": [
                  "choices",
                  "sentence1",
                  "numbers",
                  "topic",
                  "context"
              ],
              "metrics": [
                  "metrics.accuracy"
              ],
              "outputs": [
                  "label"
              ],
              "type": "form_task"
          },
          "templates": "templates.qa.multiple_choice.context_no_intro.all",
          "type": "task_card"
      }

References: :ref:`metrics.accuracy <metrics.accuracy>`, :ref:`templates.qa.multiple_choice.context_no_intro.all <templates.qa.multiple_choice.context_no_intro.all>`

|
|



.. _cards.belebele.amh_Ethi:

----------

amh_Ethi
""""""""

.. note:: ID: ``cards.belebele.amh_Ethi``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "default",
              "path": "facebook/belebele",
              "split": "amh_Ethi",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "mapper": {
                      "amh_Ethi": "test"
                  },
                  "type": "rename_splits"
              },
              {
                  "fields": {
                      "numbering": [
                          "A",
                          "B",
                          "C",
                          "D",
                          "E",
                          "F",
                          "G",
                          "H",
                          "I",
                          "J",
                          "K",
                          "L",
                          "M",
                          "N",
                          "O",
                          "P",
                          "Q",
                          "R",
                          "S",
                          "T",
                          "U",
                          "V",
                          "W",
                          "X",
                          "Y",
                          "Z"
                      ]
                  },
                  "type": "add_fields"
              },
              {
                  "fields": [
                      "mc_answer1",
                      "mc_answer2",
                      "mc_answer3",
                      "mc_answer4"
                  ],
                  "to_field": "choices",
                  "type": "list_field_values"
              },
              {
                  "mappers": {
                      "correct_answer_num": {
                          "1": "A",
                          "2": "B",
                          "3": "C",
                          "4": "D"
                      }
                  },
                  "type": "map_instance_values"
              },
              {
                  "index_of": "correct_answer_num",
                  "search_in": "numbering",
                  "to_field": "index",
                  "type": "index_of"
              },
              {
                  "field_to_field": {
                      "choices": "_choices",
                      "dialect": "topic",
                      "flores_passage": "context",
                      "index": "_index",
                      "numbering": "_numbering",
                      "question": "sentence1"
                  },
                  "type": "rename_fields"
              },
              {
                  "field": "_numbering",
                  "index": "_index",
                  "to_field": "number",
                  "type": "take_by_field"
              },
              {
                  "field": "_choices",
                  "index": "_index",
                  "to_field": "answer",
                  "type": "take_by_field"
              },
              {
                  "fields": [
                      "_numbering",
                      "_choices"
                  ],
                  "to_field": "choices",
                  "type": "zip_field_values"
              },
              {
                  "field": "choices/*",
                  "process_every_value": true,
                  "separator": ". ",
                  "to_field": "choices_list",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "field": "choices_list",
                  "index": "_index",
                  "to_field": "number_and_answer",
                  "type": "take_by_field"
              },
              {
                  "field": "choices/*/0",
                  "separator": ",",
                  "to_field": "numbers",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "add": [
                      ""
                  ],
                  "field": "choices_list",
                  "to_field": "choices_list",
                  "type": "add_constant"
              },
              {
                  "field": "choices_list",
                  "separator": "\n",
                  "to_field": "choices",
                  "type": "join_str"
              },
              {
                  "field_to_field": {
                      "number": "label"
                  },
                  "type": "rename_fields"
              }
          ],
          "task": {
              "inputs": [
                  "choices",
                  "sentence1",
                  "numbers",
                  "topic",
                  "context"
              ],
              "metrics": [
                  "metrics.accuracy"
              ],
              "outputs": [
                  "label"
              ],
              "type": "form_task"
          },
          "templates": "templates.qa.multiple_choice.context_no_intro.all",
          "type": "task_card"
      }

References: :ref:`metrics.accuracy <metrics.accuracy>`, :ref:`templates.qa.multiple_choice.context_no_intro.all <templates.qa.multiple_choice.context_no_intro.all>`

|
|



.. _cards.belebele.slv_Latn:

----------

slv_Latn
""""""""

.. note:: ID: ``cards.belebele.slv_Latn``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "default",
              "path": "facebook/belebele",
              "split": "slv_Latn",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "mapper": {
                      "slv_Latn": "test"
                  },
                  "type": "rename_splits"
              },
              {
                  "fields": {
                      "numbering": [
                          "A",
                          "B",
                          "C",
                          "D",
                          "E",
                          "F",
                          "G",
                          "H",
                          "I",
                          "J",
                          "K",
                          "L",
                          "M",
                          "N",
                          "O",
                          "P",
                          "Q",
                          "R",
                          "S",
                          "T",
                          "U",
                          "V",
                          "W",
                          "X",
                          "Y",
                          "Z"
                      ]
                  },
                  "type": "add_fields"
              },
              {
                  "fields": [
                      "mc_answer1",
                      "mc_answer2",
                      "mc_answer3",
                      "mc_answer4"
                  ],
                  "to_field": "choices",
                  "type": "list_field_values"
              },
              {
                  "mappers": {
                      "correct_answer_num": {
                          "1": "A",
                          "2": "B",
                          "3": "C",
                          "4": "D"
                      }
                  },
                  "type": "map_instance_values"
              },
              {
                  "index_of": "correct_answer_num",
                  "search_in": "numbering",
                  "to_field": "index",
                  "type": "index_of"
              },
              {
                  "field_to_field": {
                      "choices": "_choices",
                      "dialect": "topic",
                      "flores_passage": "context",
                      "index": "_index",
                      "numbering": "_numbering",
                      "question": "sentence1"
                  },
                  "type": "rename_fields"
              },
              {
                  "field": "_numbering",
                  "index": "_index",
                  "to_field": "number",
                  "type": "take_by_field"
              },
              {
                  "field": "_choices",
                  "index": "_index",
                  "to_field": "answer",
                  "type": "take_by_field"
              },
              {
                  "fields": [
                      "_numbering",
                      "_choices"
                  ],
                  "to_field": "choices",
                  "type": "zip_field_values"
              },
              {
                  "field": "choices/*",
                  "process_every_value": true,
                  "separator": ". ",
                  "to_field": "choices_list",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "field": "choices_list",
                  "index": "_index",
                  "to_field": "number_and_answer",
                  "type": "take_by_field"
              },
              {
                  "field": "choices/*/0",
                  "separator": ",",
                  "to_field": "numbers",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "add": [
                      ""
                  ],
                  "field": "choices_list",
                  "to_field": "choices_list",
                  "type": "add_constant"
              },
              {
                  "field": "choices_list",
                  "separator": "\n",
                  "to_field": "choices",
                  "type": "join_str"
              },
              {
                  "field_to_field": {
                      "number": "label"
                  },
                  "type": "rename_fields"
              }
          ],
          "task": {
              "inputs": [
                  "choices",
                  "sentence1",
                  "numbers",
                  "topic",
                  "context"
              ],
              "metrics": [
                  "metrics.accuracy"
              ],
              "outputs": [
                  "label"
              ],
              "type": "form_task"
          },
          "templates": "templates.qa.multiple_choice.context_no_intro.all",
          "type": "task_card"
      }

References: :ref:`metrics.accuracy <metrics.accuracy>`, :ref:`templates.qa.multiple_choice.context_no_intro.all <templates.qa.multiple_choice.context_no_intro.all>`

|
|



.. _cards.belebele.mal_Mlym:

----------

mal_Mlym
""""""""

.. note:: ID: ``cards.belebele.mal_Mlym``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "default",
              "path": "facebook/belebele",
              "split": "mal_Mlym",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "mapper": {
                      "mal_Mlym": "test"
                  },
                  "type": "rename_splits"
              },
              {
                  "fields": {
                      "numbering": [
                          "A",
                          "B",
                          "C",
                          "D",
                          "E",
                          "F",
                          "G",
                          "H",
                          "I",
                          "J",
                          "K",
                          "L",
                          "M",
                          "N",
                          "O",
                          "P",
                          "Q",
                          "R",
                          "S",
                          "T",
                          "U",
                          "V",
                          "W",
                          "X",
                          "Y",
                          "Z"
                      ]
                  },
                  "type": "add_fields"
              },
              {
                  "fields": [
                      "mc_answer1",
                      "mc_answer2",
                      "mc_answer3",
                      "mc_answer4"
                  ],
                  "to_field": "choices",
                  "type": "list_field_values"
              },
              {
                  "mappers": {
                      "correct_answer_num": {
                          "1": "A",
                          "2": "B",
                          "3": "C",
                          "4": "D"
                      }
                  },
                  "type": "map_instance_values"
              },
              {
                  "index_of": "correct_answer_num",
                  "search_in": "numbering",
                  "to_field": "index",
                  "type": "index_of"
              },
              {
                  "field_to_field": {
                      "choices": "_choices",
                      "dialect": "topic",
                      "flores_passage": "context",
                      "index": "_index",
                      "numbering": "_numbering",
                      "question": "sentence1"
                  },
                  "type": "rename_fields"
              },
              {
                  "field": "_numbering",
                  "index": "_index",
                  "to_field": "number",
                  "type": "take_by_field"
              },
              {
                  "field": "_choices",
                  "index": "_index",
                  "to_field": "answer",
                  "type": "take_by_field"
              },
              {
                  "fields": [
                      "_numbering",
                      "_choices"
                  ],
                  "to_field": "choices",
                  "type": "zip_field_values"
              },
              {
                  "field": "choices/*",
                  "process_every_value": true,
                  "separator": ". ",
                  "to_field": "choices_list",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "field": "choices_list",
                  "index": "_index",
                  "to_field": "number_and_answer",
                  "type": "take_by_field"
              },
              {
                  "field": "choices/*/0",
                  "separator": ",",
                  "to_field": "numbers",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "add": [
                      ""
                  ],
                  "field": "choices_list",
                  "to_field": "choices_list",
                  "type": "add_constant"
              },
              {
                  "field": "choices_list",
                  "separator": "\n",
                  "to_field": "choices",
                  "type": "join_str"
              },
              {
                  "field_to_field": {
                      "number": "label"
                  },
                  "type": "rename_fields"
              }
          ],
          "task": {
              "inputs": [
                  "choices",
                  "sentence1",
                  "numbers",
                  "topic",
                  "context"
              ],
              "metrics": [
                  "metrics.accuracy"
              ],
              "outputs": [
                  "label"
              ],
              "type": "form_task"
          },
          "templates": "templates.qa.multiple_choice.context_no_intro.all",
          "type": "task_card"
      }

References: :ref:`metrics.accuracy <metrics.accuracy>`, :ref:`templates.qa.multiple_choice.context_no_intro.all <templates.qa.multiple_choice.context_no_intro.all>`

|
|



.. _cards.belebele.wol_Latn:

----------

wol_Latn
""""""""

.. note:: ID: ``cards.belebele.wol_Latn``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "default",
              "path": "facebook/belebele",
              "split": "wol_Latn",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "mapper": {
                      "wol_Latn": "test"
                  },
                  "type": "rename_splits"
              },
              {
                  "fields": {
                      "numbering": [
                          "A",
                          "B",
                          "C",
                          "D",
                          "E",
                          "F",
                          "G",
                          "H",
                          "I",
                          "J",
                          "K",
                          "L",
                          "M",
                          "N",
                          "O",
                          "P",
                          "Q",
                          "R",
                          "S",
                          "T",
                          "U",
                          "V",
                          "W",
                          "X",
                          "Y",
                          "Z"
                      ]
                  },
                  "type": "add_fields"
              },
              {
                  "fields": [
                      "mc_answer1",
                      "mc_answer2",
                      "mc_answer3",
                      "mc_answer4"
                  ],
                  "to_field": "choices",
                  "type": "list_field_values"
              },
              {
                  "mappers": {
                      "correct_answer_num": {
                          "1": "A",
                          "2": "B",
                          "3": "C",
                          "4": "D"
                      }
                  },
                  "type": "map_instance_values"
              },
              {
                  "index_of": "correct_answer_num",
                  "search_in": "numbering",
                  "to_field": "index",
                  "type": "index_of"
              },
              {
                  "field_to_field": {
                      "choices": "_choices",
                      "dialect": "topic",
                      "flores_passage": "context",
                      "index": "_index",
                      "numbering": "_numbering",
                      "question": "sentence1"
                  },
                  "type": "rename_fields"
              },
              {
                  "field": "_numbering",
                  "index": "_index",
                  "to_field": "number",
                  "type": "take_by_field"
              },
              {
                  "field": "_choices",
                  "index": "_index",
                  "to_field": "answer",
                  "type": "take_by_field"
              },
              {
                  "fields": [
                      "_numbering",
                      "_choices"
                  ],
                  "to_field": "choices",
                  "type": "zip_field_values"
              },
              {
                  "field": "choices/*",
                  "process_every_value": true,
                  "separator": ". ",
                  "to_field": "choices_list",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "field": "choices_list",
                  "index": "_index",
                  "to_field": "number_and_answer",
                  "type": "take_by_field"
              },
              {
                  "field": "choices/*/0",
                  "separator": ",",
                  "to_field": "numbers",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "add": [
                      ""
                  ],
                  "field": "choices_list",
                  "to_field": "choices_list",
                  "type": "add_constant"
              },
              {
                  "field": "choices_list",
                  "separator": "\n",
                  "to_field": "choices",
                  "type": "join_str"
              },
              {
                  "field_to_field": {
                      "number": "label"
                  },
                  "type": "rename_fields"
              }
          ],
          "task": {
              "inputs": [
                  "choices",
                  "sentence1",
                  "numbers",
                  "topic",
                  "context"
              ],
              "metrics": [
                  "metrics.accuracy"
              ],
              "outputs": [
                  "label"
              ],
              "type": "form_task"
          },
          "templates": "templates.qa.multiple_choice.context_no_intro.all",
          "type": "task_card"
      }

References: :ref:`metrics.accuracy <metrics.accuracy>`, :ref:`templates.qa.multiple_choice.context_no_intro.all <templates.qa.multiple_choice.context_no_intro.all>`

|
|



.. _cards.belebele.tur_Latn:

----------

tur_Latn
""""""""

.. note:: ID: ``cards.belebele.tur_Latn``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "default",
              "path": "facebook/belebele",
              "split": "tur_Latn",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "mapper": {
                      "tur_Latn": "test"
                  },
                  "type": "rename_splits"
              },
              {
                  "fields": {
                      "numbering": [
                          "A",
                          "B",
                          "C",
                          "D",
                          "E",
                          "F",
                          "G",
                          "H",
                          "I",
                          "J",
                          "K",
                          "L",
                          "M",
                          "N",
                          "O",
                          "P",
                          "Q",
                          "R",
                          "S",
                          "T",
                          "U",
                          "V",
                          "W",
                          "X",
                          "Y",
                          "Z"
                      ]
                  },
                  "type": "add_fields"
              },
              {
                  "fields": [
                      "mc_answer1",
                      "mc_answer2",
                      "mc_answer3",
                      "mc_answer4"
                  ],
                  "to_field": "choices",
                  "type": "list_field_values"
              },
              {
                  "mappers": {
                      "correct_answer_num": {
                          "1": "A",
                          "2": "B",
                          "3": "C",
                          "4": "D"
                      }
                  },
                  "type": "map_instance_values"
              },
              {
                  "index_of": "correct_answer_num",
                  "search_in": "numbering",
                  "to_field": "index",
                  "type": "index_of"
              },
              {
                  "field_to_field": {
                      "choices": "_choices",
                      "dialect": "topic",
                      "flores_passage": "context",
                      "index": "_index",
                      "numbering": "_numbering",
                      "question": "sentence1"
                  },
                  "type": "rename_fields"
              },
              {
                  "field": "_numbering",
                  "index": "_index",
                  "to_field": "number",
                  "type": "take_by_field"
              },
              {
                  "field": "_choices",
                  "index": "_index",
                  "to_field": "answer",
                  "type": "take_by_field"
              },
              {
                  "fields": [
                      "_numbering",
                      "_choices"
                  ],
                  "to_field": "choices",
                  "type": "zip_field_values"
              },
              {
                  "field": "choices/*",
                  "process_every_value": true,
                  "separator": ". ",
                  "to_field": "choices_list",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "field": "choices_list",
                  "index": "_index",
                  "to_field": "number_and_answer",
                  "type": "take_by_field"
              },
              {
                  "field": "choices/*/0",
                  "separator": ",",
                  "to_field": "numbers",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "add": [
                      ""
                  ],
                  "field": "choices_list",
                  "to_field": "choices_list",
                  "type": "add_constant"
              },
              {
                  "field": "choices_list",
                  "separator": "\n",
                  "to_field": "choices",
                  "type": "join_str"
              },
              {
                  "field_to_field": {
                      "number": "label"
                  },
                  "type": "rename_fields"
              }
          ],
          "task": {
              "inputs": [
                  "choices",
                  "sentence1",
                  "numbers",
                  "topic",
                  "context"
              ],
              "metrics": [
                  "metrics.accuracy"
              ],
              "outputs": [
                  "label"
              ],
              "type": "form_task"
          },
          "templates": "templates.qa.multiple_choice.context_no_intro.all",
          "type": "task_card"
      }

References: :ref:`metrics.accuracy <metrics.accuracy>`, :ref:`templates.qa.multiple_choice.context_no_intro.all <templates.qa.multiple_choice.context_no_intro.all>`

|
|



.. _cards.belebele.cat_Latn:

----------

cat_Latn
""""""""

.. note:: ID: ``cards.belebele.cat_Latn``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "default",
              "path": "facebook/belebele",
              "split": "cat_Latn",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "mapper": {
                      "cat_Latn": "test"
                  },
                  "type": "rename_splits"
              },
              {
                  "fields": {
                      "numbering": [
                          "A",
                          "B",
                          "C",
                          "D",
                          "E",
                          "F",
                          "G",
                          "H",
                          "I",
                          "J",
                          "K",
                          "L",
                          "M",
                          "N",
                          "O",
                          "P",
                          "Q",
                          "R",
                          "S",
                          "T",
                          "U",
                          "V",
                          "W",
                          "X",
                          "Y",
                          "Z"
                      ]
                  },
                  "type": "add_fields"
              },
              {
                  "fields": [
                      "mc_answer1",
                      "mc_answer2",
                      "mc_answer3",
                      "mc_answer4"
                  ],
                  "to_field": "choices",
                  "type": "list_field_values"
              },
              {
                  "mappers": {
                      "correct_answer_num": {
                          "1": "A",
                          "2": "B",
                          "3": "C",
                          "4": "D"
                      }
                  },
                  "type": "map_instance_values"
              },
              {
                  "index_of": "correct_answer_num",
                  "search_in": "numbering",
                  "to_field": "index",
                  "type": "index_of"
              },
              {
                  "field_to_field": {
                      "choices": "_choices",
                      "dialect": "topic",
                      "flores_passage": "context",
                      "index": "_index",
                      "numbering": "_numbering",
                      "question": "sentence1"
                  },
                  "type": "rename_fields"
              },
              {
                  "field": "_numbering",
                  "index": "_index",
                  "to_field": "number",
                  "type": "take_by_field"
              },
              {
                  "field": "_choices",
                  "index": "_index",
                  "to_field": "answer",
                  "type": "take_by_field"
              },
              {
                  "fields": [
                      "_numbering",
                      "_choices"
                  ],
                  "to_field": "choices",
                  "type": "zip_field_values"
              },
              {
                  "field": "choices/*",
                  "process_every_value": true,
                  "separator": ". ",
                  "to_field": "choices_list",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "field": "choices_list",
                  "index": "_index",
                  "to_field": "number_and_answer",
                  "type": "take_by_field"
              },
              {
                  "field": "choices/*/0",
                  "separator": ",",
                  "to_field": "numbers",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "add": [
                      ""
                  ],
                  "field": "choices_list",
                  "to_field": "choices_list",
                  "type": "add_constant"
              },
              {
                  "field": "choices_list",
                  "separator": "\n",
                  "to_field": "choices",
                  "type": "join_str"
              },
              {
                  "field_to_field": {
                      "number": "label"
                  },
                  "type": "rename_fields"
              }
          ],
          "task": {
              "inputs": [
                  "choices",
                  "sentence1",
                  "numbers",
                  "topic",
                  "context"
              ],
              "metrics": [
                  "metrics.accuracy"
              ],
              "outputs": [
                  "label"
              ],
              "type": "form_task"
          },
          "templates": "templates.qa.multiple_choice.context_no_intro.all",
          "type": "task_card"
      }

References: :ref:`metrics.accuracy <metrics.accuracy>`, :ref:`templates.qa.multiple_choice.context_no_intro.all <templates.qa.multiple_choice.context_no_intro.all>`

|
|



.. _cards.belebele.jpn_Jpan:

----------

jpn_Jpan
""""""""

.. note:: ID: ``cards.belebele.jpn_Jpan``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "default",
              "path": "facebook/belebele",
              "split": "jpn_Jpan",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "mapper": {
                      "jpn_Jpan": "test"
                  },
                  "type": "rename_splits"
              },
              {
                  "fields": {
                      "numbering": [
                          "A",
                          "B",
                          "C",
                          "D",
                          "E",
                          "F",
                          "G",
                          "H",
                          "I",
                          "J",
                          "K",
                          "L",
                          "M",
                          "N",
                          "O",
                          "P",
                          "Q",
                          "R",
                          "S",
                          "T",
                          "U",
                          "V",
                          "W",
                          "X",
                          "Y",
                          "Z"
                      ]
                  },
                  "type": "add_fields"
              },
              {
                  "fields": [
                      "mc_answer1",
                      "mc_answer2",
                      "mc_answer3",
                      "mc_answer4"
                  ],
                  "to_field": "choices",
                  "type": "list_field_values"
              },
              {
                  "mappers": {
                      "correct_answer_num": {
                          "1": "A",
                          "2": "B",
                          "3": "C",
                          "4": "D"
                      }
                  },
                  "type": "map_instance_values"
              },
              {
                  "index_of": "correct_answer_num",
                  "search_in": "numbering",
                  "to_field": "index",
                  "type": "index_of"
              },
              {
                  "field_to_field": {
                      "choices": "_choices",
                      "dialect": "topic",
                      "flores_passage": "context",
                      "index": "_index",
                      "numbering": "_numbering",
                      "question": "sentence1"
                  },
                  "type": "rename_fields"
              },
              {
                  "field": "_numbering",
                  "index": "_index",
                  "to_field": "number",
                  "type": "take_by_field"
              },
              {
                  "field": "_choices",
                  "index": "_index",
                  "to_field": "answer",
                  "type": "take_by_field"
              },
              {
                  "fields": [
                      "_numbering",
                      "_choices"
                  ],
                  "to_field": "choices",
                  "type": "zip_field_values"
              },
              {
                  "field": "choices/*",
                  "process_every_value": true,
                  "separator": ". ",
                  "to_field": "choices_list",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "field": "choices_list",
                  "index": "_index",
                  "to_field": "number_and_answer",
                  "type": "take_by_field"
              },
              {
                  "field": "choices/*/0",
                  "separator": ",",
                  "to_field": "numbers",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "add": [
                      ""
                  ],
                  "field": "choices_list",
                  "to_field": "choices_list",
                  "type": "add_constant"
              },
              {
                  "field": "choices_list",
                  "separator": "\n",
                  "to_field": "choices",
                  "type": "join_str"
              },
              {
                  "field_to_field": {
                      "number": "label"
                  },
                  "type": "rename_fields"
              }
          ],
          "task": {
              "inputs": [
                  "choices",
                  "sentence1",
                  "numbers",
                  "topic",
                  "context"
              ],
              "metrics": [
                  "metrics.accuracy"
              ],
              "outputs": [
                  "label"
              ],
              "type": "form_task"
          },
          "templates": "templates.qa.multiple_choice.context_no_intro.all",
          "type": "task_card"
      }

References: :ref:`metrics.accuracy <metrics.accuracy>`, :ref:`templates.qa.multiple_choice.context_no_intro.all <templates.qa.multiple_choice.context_no_intro.all>`

|
|



.. _cards.belebele.hin_Deva:

----------

hin_Deva
""""""""

.. note:: ID: ``cards.belebele.hin_Deva``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "default",
              "path": "facebook/belebele",
              "split": "hin_Deva",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "mapper": {
                      "hin_Deva": "test"
                  },
                  "type": "rename_splits"
              },
              {
                  "fields": {
                      "numbering": [
                          "A",
                          "B",
                          "C",
                          "D",
                          "E",
                          "F",
                          "G",
                          "H",
                          "I",
                          "J",
                          "K",
                          "L",
                          "M",
                          "N",
                          "O",
                          "P",
                          "Q",
                          "R",
                          "S",
                          "T",
                          "U",
                          "V",
                          "W",
                          "X",
                          "Y",
                          "Z"
                      ]
                  },
                  "type": "add_fields"
              },
              {
                  "fields": [
                      "mc_answer1",
                      "mc_answer2",
                      "mc_answer3",
                      "mc_answer4"
                  ],
                  "to_field": "choices",
                  "type": "list_field_values"
              },
              {
                  "mappers": {
                      "correct_answer_num": {
                          "1": "A",
                          "2": "B",
                          "3": "C",
                          "4": "D"
                      }
                  },
                  "type": "map_instance_values"
              },
              {
                  "index_of": "correct_answer_num",
                  "search_in": "numbering",
                  "to_field": "index",
                  "type": "index_of"
              },
              {
                  "field_to_field": {
                      "choices": "_choices",
                      "dialect": "topic",
                      "flores_passage": "context",
                      "index": "_index",
                      "numbering": "_numbering",
                      "question": "sentence1"
                  },
                  "type": "rename_fields"
              },
              {
                  "field": "_numbering",
                  "index": "_index",
                  "to_field": "number",
                  "type": "take_by_field"
              },
              {
                  "field": "_choices",
                  "index": "_index",
                  "to_field": "answer",
                  "type": "take_by_field"
              },
              {
                  "fields": [
                      "_numbering",
                      "_choices"
                  ],
                  "to_field": "choices",
                  "type": "zip_field_values"
              },
              {
                  "field": "choices/*",
                  "process_every_value": true,
                  "separator": ". ",
                  "to_field": "choices_list",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "field": "choices_list",
                  "index": "_index",
                  "to_field": "number_and_answer",
                  "type": "take_by_field"
              },
              {
                  "field": "choices/*/0",
                  "separator": ",",
                  "to_field": "numbers",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "add": [
                      ""
                  ],
                  "field": "choices_list",
                  "to_field": "choices_list",
                  "type": "add_constant"
              },
              {
                  "field": "choices_list",
                  "separator": "\n",
                  "to_field": "choices",
                  "type": "join_str"
              },
              {
                  "field_to_field": {
                      "number": "label"
                  },
                  "type": "rename_fields"
              }
          ],
          "task": {
              "inputs": [
                  "choices",
                  "sentence1",
                  "numbers",
                  "topic",
                  "context"
              ],
              "metrics": [
                  "metrics.accuracy"
              ],
              "outputs": [
                  "label"
              ],
              "type": "form_task"
          },
          "templates": "templates.qa.multiple_choice.context_no_intro.all",
          "type": "task_card"
      }

References: :ref:`metrics.accuracy <metrics.accuracy>`, :ref:`templates.qa.multiple_choice.context_no_intro.all <templates.qa.multiple_choice.context_no_intro.all>`

|
|



.. _cards.belebele.acm_Arab:

----------

acm_Arab
""""""""

.. note:: ID: ``cards.belebele.acm_Arab``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "default",
              "path": "facebook/belebele",
              "split": "acm_Arab",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "mapper": {
                      "acm_Arab": "test"
                  },
                  "type": "rename_splits"
              },
              {
                  "fields": {
                      "numbering": [
                          "A",
                          "B",
                          "C",
                          "D",
                          "E",
                          "F",
                          "G",
                          "H",
                          "I",
                          "J",
                          "K",
                          "L",
                          "M",
                          "N",
                          "O",
                          "P",
                          "Q",
                          "R",
                          "S",
                          "T",
                          "U",
                          "V",
                          "W",
                          "X",
                          "Y",
                          "Z"
                      ]
                  },
                  "type": "add_fields"
              },
              {
                  "fields": [
                      "mc_answer1",
                      "mc_answer2",
                      "mc_answer3",
                      "mc_answer4"
                  ],
                  "to_field": "choices",
                  "type": "list_field_values"
              },
              {
                  "mappers": {
                      "correct_answer_num": {
                          "1": "A",
                          "2": "B",
                          "3": "C",
                          "4": "D"
                      }
                  },
                  "type": "map_instance_values"
              },
              {
                  "index_of": "correct_answer_num",
                  "search_in": "numbering",
                  "to_field": "index",
                  "type": "index_of"
              },
              {
                  "field_to_field": {
                      "choices": "_choices",
                      "dialect": "topic",
                      "flores_passage": "context",
                      "index": "_index",
                      "numbering": "_numbering",
                      "question": "sentence1"
                  },
                  "type": "rename_fields"
              },
              {
                  "field": "_numbering",
                  "index": "_index",
                  "to_field": "number",
                  "type": "take_by_field"
              },
              {
                  "field": "_choices",
                  "index": "_index",
                  "to_field": "answer",
                  "type": "take_by_field"
              },
              {
                  "fields": [
                      "_numbering",
                      "_choices"
                  ],
                  "to_field": "choices",
                  "type": "zip_field_values"
              },
              {
                  "field": "choices/*",
                  "process_every_value": true,
                  "separator": ". ",
                  "to_field": "choices_list",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "field": "choices_list",
                  "index": "_index",
                  "to_field": "number_and_answer",
                  "type": "take_by_field"
              },
              {
                  "field": "choices/*/0",
                  "separator": ",",
                  "to_field": "numbers",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "add": [
                      ""
                  ],
                  "field": "choices_list",
                  "to_field": "choices_list",
                  "type": "add_constant"
              },
              {
                  "field": "choices_list",
                  "separator": "\n",
                  "to_field": "choices",
                  "type": "join_str"
              },
              {
                  "field_to_field": {
                      "number": "label"
                  },
                  "type": "rename_fields"
              }
          ],
          "task": {
              "inputs": [
                  "choices",
                  "sentence1",
                  "numbers",
                  "topic",
                  "context"
              ],
              "metrics": [
                  "metrics.accuracy"
              ],
              "outputs": [
                  "label"
              ],
              "type": "form_task"
          },
          "templates": "templates.qa.multiple_choice.context_no_intro.all",
          "type": "task_card"
      }

References: :ref:`metrics.accuracy <metrics.accuracy>`, :ref:`templates.qa.multiple_choice.context_no_intro.all <templates.qa.multiple_choice.context_no_intro.all>`

|
|



.. _cards.belebele.hin_Latn:

----------

hin_Latn
""""""""

.. note:: ID: ``cards.belebele.hin_Latn``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "default",
              "path": "facebook/belebele",
              "split": "hin_Latn",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "mapper": {
                      "hin_Latn": "test"
                  },
                  "type": "rename_splits"
              },
              {
                  "fields": {
                      "numbering": [
                          "A",
                          "B",
                          "C",
                          "D",
                          "E",
                          "F",
                          "G",
                          "H",
                          "I",
                          "J",
                          "K",
                          "L",
                          "M",
                          "N",
                          "O",
                          "P",
                          "Q",
                          "R",
                          "S",
                          "T",
                          "U",
                          "V",
                          "W",
                          "X",
                          "Y",
                          "Z"
                      ]
                  },
                  "type": "add_fields"
              },
              {
                  "fields": [
                      "mc_answer1",
                      "mc_answer2",
                      "mc_answer3",
                      "mc_answer4"
                  ],
                  "to_field": "choices",
                  "type": "list_field_values"
              },
              {
                  "mappers": {
                      "correct_answer_num": {
                          "1": "A",
                          "2": "B",
                          "3": "C",
                          "4": "D"
                      }
                  },
                  "type": "map_instance_values"
              },
              {
                  "index_of": "correct_answer_num",
                  "search_in": "numbering",
                  "to_field": "index",
                  "type": "index_of"
              },
              {
                  "field_to_field": {
                      "choices": "_choices",
                      "dialect": "topic",
                      "flores_passage": "context",
                      "index": "_index",
                      "numbering": "_numbering",
                      "question": "sentence1"
                  },
                  "type": "rename_fields"
              },
              {
                  "field": "_numbering",
                  "index": "_index",
                  "to_field": "number",
                  "type": "take_by_field"
              },
              {
                  "field": "_choices",
                  "index": "_index",
                  "to_field": "answer",
                  "type": "take_by_field"
              },
              {
                  "fields": [
                      "_numbering",
                      "_choices"
                  ],
                  "to_field": "choices",
                  "type": "zip_field_values"
              },
              {
                  "field": "choices/*",
                  "process_every_value": true,
                  "separator": ". ",
                  "to_field": "choices_list",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "field": "choices_list",
                  "index": "_index",
                  "to_field": "number_and_answer",
                  "type": "take_by_field"
              },
              {
                  "field": "choices/*/0",
                  "separator": ",",
                  "to_field": "numbers",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "add": [
                      ""
                  ],
                  "field": "choices_list",
                  "to_field": "choices_list",
                  "type": "add_constant"
              },
              {
                  "field": "choices_list",
                  "separator": "\n",
                  "to_field": "choices",
                  "type": "join_str"
              },
              {
                  "field_to_field": {
                      "number": "label"
                  },
                  "type": "rename_fields"
              }
          ],
          "task": {
              "inputs": [
                  "choices",
                  "sentence1",
                  "numbers",
                  "topic",
                  "context"
              ],
              "metrics": [
                  "metrics.accuracy"
              ],
              "outputs": [
                  "label"
              ],
              "type": "form_task"
          },
          "templates": "templates.qa.multiple_choice.context_no_intro.all",
          "type": "task_card"
      }

References: :ref:`metrics.accuracy <metrics.accuracy>`, :ref:`templates.qa.multiple_choice.context_no_intro.all <templates.qa.multiple_choice.context_no_intro.all>`

|
|



.. _cards.belebele.mar_Deva:

----------

mar_Deva
""""""""

.. note:: ID: ``cards.belebele.mar_Deva``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "default",
              "path": "facebook/belebele",
              "split": "mar_Deva",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "mapper": {
                      "mar_Deva": "test"
                  },
                  "type": "rename_splits"
              },
              {
                  "fields": {
                      "numbering": [
                          "A",
                          "B",
                          "C",
                          "D",
                          "E",
                          "F",
                          "G",
                          "H",
                          "I",
                          "J",
                          "K",
                          "L",
                          "M",
                          "N",
                          "O",
                          "P",
                          "Q",
                          "R",
                          "S",
                          "T",
                          "U",
                          "V",
                          "W",
                          "X",
                          "Y",
                          "Z"
                      ]
                  },
                  "type": "add_fields"
              },
              {
                  "fields": [
                      "mc_answer1",
                      "mc_answer2",
                      "mc_answer3",
                      "mc_answer4"
                  ],
                  "to_field": "choices",
                  "type": "list_field_values"
              },
              {
                  "mappers": {
                      "correct_answer_num": {
                          "1": "A",
                          "2": "B",
                          "3": "C",
                          "4": "D"
                      }
                  },
                  "type": "map_instance_values"
              },
              {
                  "index_of": "correct_answer_num",
                  "search_in": "numbering",
                  "to_field": "index",
                  "type": "index_of"
              },
              {
                  "field_to_field": {
                      "choices": "_choices",
                      "dialect": "topic",
                      "flores_passage": "context",
                      "index": "_index",
                      "numbering": "_numbering",
                      "question": "sentence1"
                  },
                  "type": "rename_fields"
              },
              {
                  "field": "_numbering",
                  "index": "_index",
                  "to_field": "number",
                  "type": "take_by_field"
              },
              {
                  "field": "_choices",
                  "index": "_index",
                  "to_field": "answer",
                  "type": "take_by_field"
              },
              {
                  "fields": [
                      "_numbering",
                      "_choices"
                  ],
                  "to_field": "choices",
                  "type": "zip_field_values"
              },
              {
                  "field": "choices/*",
                  "process_every_value": true,
                  "separator": ". ",
                  "to_field": "choices_list",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "field": "choices_list",
                  "index": "_index",
                  "to_field": "number_and_answer",
                  "type": "take_by_field"
              },
              {
                  "field": "choices/*/0",
                  "separator": ",",
                  "to_field": "numbers",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "add": [
                      ""
                  ],
                  "field": "choices_list",
                  "to_field": "choices_list",
                  "type": "add_constant"
              },
              {
                  "field": "choices_list",
                  "separator": "\n",
                  "to_field": "choices",
                  "type": "join_str"
              },
              {
                  "field_to_field": {
                      "number": "label"
                  },
                  "type": "rename_fields"
              }
          ],
          "task": {
              "inputs": [
                  "choices",
                  "sentence1",
                  "numbers",
                  "topic",
                  "context"
              ],
              "metrics": [
                  "metrics.accuracy"
              ],
              "outputs": [
                  "label"
              ],
              "type": "form_task"
          },
          "templates": "templates.qa.multiple_choice.context_no_intro.all",
          "type": "task_card"
      }

References: :ref:`metrics.accuracy <metrics.accuracy>`, :ref:`templates.qa.multiple_choice.context_no_intro.all <templates.qa.multiple_choice.context_no_intro.all>`

|
|



.. _cards.belebele.swh_Latn:

----------

swh_Latn
""""""""

.. note:: ID: ``cards.belebele.swh_Latn``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "default",
              "path": "facebook/belebele",
              "split": "swh_Latn",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "mapper": {
                      "swh_Latn": "test"
                  },
                  "type": "rename_splits"
              },
              {
                  "fields": {
                      "numbering": [
                          "A",
                          "B",
                          "C",
                          "D",
                          "E",
                          "F",
                          "G",
                          "H",
                          "I",
                          "J",
                          "K",
                          "L",
                          "M",
                          "N",
                          "O",
                          "P",
                          "Q",
                          "R",
                          "S",
                          "T",
                          "U",
                          "V",
                          "W",
                          "X",
                          "Y",
                          "Z"
                      ]
                  },
                  "type": "add_fields"
              },
              {
                  "fields": [
                      "mc_answer1",
                      "mc_answer2",
                      "mc_answer3",
                      "mc_answer4"
                  ],
                  "to_field": "choices",
                  "type": "list_field_values"
              },
              {
                  "mappers": {
                      "correct_answer_num": {
                          "1": "A",
                          "2": "B",
                          "3": "C",
                          "4": "D"
                      }
                  },
                  "type": "map_instance_values"
              },
              {
                  "index_of": "correct_answer_num",
                  "search_in": "numbering",
                  "to_field": "index",
                  "type": "index_of"
              },
              {
                  "field_to_field": {
                      "choices": "_choices",
                      "dialect": "topic",
                      "flores_passage": "context",
                      "index": "_index",
                      "numbering": "_numbering",
                      "question": "sentence1"
                  },
                  "type": "rename_fields"
              },
              {
                  "field": "_numbering",
                  "index": "_index",
                  "to_field": "number",
                  "type": "take_by_field"
              },
              {
                  "field": "_choices",
                  "index": "_index",
                  "to_field": "answer",
                  "type": "take_by_field"
              },
              {
                  "fields": [
                      "_numbering",
                      "_choices"
                  ],
                  "to_field": "choices",
                  "type": "zip_field_values"
              },
              {
                  "field": "choices/*",
                  "process_every_value": true,
                  "separator": ". ",
                  "to_field": "choices_list",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "field": "choices_list",
                  "index": "_index",
                  "to_field": "number_and_answer",
                  "type": "take_by_field"
              },
              {
                  "field": "choices/*/0",
                  "separator": ",",
                  "to_field": "numbers",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "add": [
                      ""
                  ],
                  "field": "choices_list",
                  "to_field": "choices_list",
                  "type": "add_constant"
              },
              {
                  "field": "choices_list",
                  "separator": "\n",
                  "to_field": "choices",
                  "type": "join_str"
              },
              {
                  "field_to_field": {
                      "number": "label"
                  },
                  "type": "rename_fields"
              }
          ],
          "task": {
              "inputs": [
                  "choices",
                  "sentence1",
                  "numbers",
                  "topic",
                  "context"
              ],
              "metrics": [
                  "metrics.accuracy"
              ],
              "outputs": [
                  "label"
              ],
              "type": "form_task"
          },
          "templates": "templates.qa.multiple_choice.context_no_intro.all",
          "type": "task_card"
      }

References: :ref:`metrics.accuracy <metrics.accuracy>`, :ref:`templates.qa.multiple_choice.context_no_intro.all <templates.qa.multiple_choice.context_no_intro.all>`

|
|



.. _cards.belebele.ars_Arab:

----------

ars_Arab
""""""""

.. note:: ID: ``cards.belebele.ars_Arab``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "default",
              "path": "facebook/belebele",
              "split": "ars_Arab",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "mapper": {
                      "ars_Arab": "test"
                  },
                  "type": "rename_splits"
              },
              {
                  "fields": {
                      "numbering": [
                          "A",
                          "B",
                          "C",
                          "D",
                          "E",
                          "F",
                          "G",
                          "H",
                          "I",
                          "J",
                          "K",
                          "L",
                          "M",
                          "N",
                          "O",
                          "P",
                          "Q",
                          "R",
                          "S",
                          "T",
                          "U",
                          "V",
                          "W",
                          "X",
                          "Y",
                          "Z"
                      ]
                  },
                  "type": "add_fields"
              },
              {
                  "fields": [
                      "mc_answer1",
                      "mc_answer2",
                      "mc_answer3",
                      "mc_answer4"
                  ],
                  "to_field": "choices",
                  "type": "list_field_values"
              },
              {
                  "mappers": {
                      "correct_answer_num": {
                          "1": "A",
                          "2": "B",
                          "3": "C",
                          "4": "D"
                      }
                  },
                  "type": "map_instance_values"
              },
              {
                  "index_of": "correct_answer_num",
                  "search_in": "numbering",
                  "to_field": "index",
                  "type": "index_of"
              },
              {
                  "field_to_field": {
                      "choices": "_choices",
                      "dialect": "topic",
                      "flores_passage": "context",
                      "index": "_index",
                      "numbering": "_numbering",
                      "question": "sentence1"
                  },
                  "type": "rename_fields"
              },
              {
                  "field": "_numbering",
                  "index": "_index",
                  "to_field": "number",
                  "type": "take_by_field"
              },
              {
                  "field": "_choices",
                  "index": "_index",
                  "to_field": "answer",
                  "type": "take_by_field"
              },
              {
                  "fields": [
                      "_numbering",
                      "_choices"
                  ],
                  "to_field": "choices",
                  "type": "zip_field_values"
              },
              {
                  "field": "choices/*",
                  "process_every_value": true,
                  "separator": ". ",
                  "to_field": "choices_list",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "field": "choices_list",
                  "index": "_index",
                  "to_field": "number_and_answer",
                  "type": "take_by_field"
              },
              {
                  "field": "choices/*/0",
                  "separator": ",",
                  "to_field": "numbers",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "add": [
                      ""
                  ],
                  "field": "choices_list",
                  "to_field": "choices_list",
                  "type": "add_constant"
              },
              {
                  "field": "choices_list",
                  "separator": "\n",
                  "to_field": "choices",
                  "type": "join_str"
              },
              {
                  "field_to_field": {
                      "number": "label"
                  },
                  "type": "rename_fields"
              }
          ],
          "task": {
              "inputs": [
                  "choices",
                  "sentence1",
                  "numbers",
                  "topic",
                  "context"
              ],
              "metrics": [
                  "metrics.accuracy"
              ],
              "outputs": [
                  "label"
              ],
              "type": "form_task"
          },
          "templates": "templates.qa.multiple_choice.context_no_intro.all",
          "type": "task_card"
      }

References: :ref:`metrics.accuracy <metrics.accuracy>`, :ref:`templates.qa.multiple_choice.context_no_intro.all <templates.qa.multiple_choice.context_no_intro.all>`

|
|



.. _cards.belebele.bul_Cyrl:

----------

bul_Cyrl
""""""""

.. note:: ID: ``cards.belebele.bul_Cyrl``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "default",
              "path": "facebook/belebele",
              "split": "bul_Cyrl",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "mapper": {
                      "bul_Cyrl": "test"
                  },
                  "type": "rename_splits"
              },
              {
                  "fields": {
                      "numbering": [
                          "A",
                          "B",
                          "C",
                          "D",
                          "E",
                          "F",
                          "G",
                          "H",
                          "I",
                          "J",
                          "K",
                          "L",
                          "M",
                          "N",
                          "O",
                          "P",
                          "Q",
                          "R",
                          "S",
                          "T",
                          "U",
                          "V",
                          "W",
                          "X",
                          "Y",
                          "Z"
                      ]
                  },
                  "type": "add_fields"
              },
              {
                  "fields": [
                      "mc_answer1",
                      "mc_answer2",
                      "mc_answer3",
                      "mc_answer4"
                  ],
                  "to_field": "choices",
                  "type": "list_field_values"
              },
              {
                  "mappers": {
                      "correct_answer_num": {
                          "1": "A",
                          "2": "B",
                          "3": "C",
                          "4": "D"
                      }
                  },
                  "type": "map_instance_values"
              },
              {
                  "index_of": "correct_answer_num",
                  "search_in": "numbering",
                  "to_field": "index",
                  "type": "index_of"
              },
              {
                  "field_to_field": {
                      "choices": "_choices",
                      "dialect": "topic",
                      "flores_passage": "context",
                      "index": "_index",
                      "numbering": "_numbering",
                      "question": "sentence1"
                  },
                  "type": "rename_fields"
              },
              {
                  "field": "_numbering",
                  "index": "_index",
                  "to_field": "number",
                  "type": "take_by_field"
              },
              {
                  "field": "_choices",
                  "index": "_index",
                  "to_field": "answer",
                  "type": "take_by_field"
              },
              {
                  "fields": [
                      "_numbering",
                      "_choices"
                  ],
                  "to_field": "choices",
                  "type": "zip_field_values"
              },
              {
                  "field": "choices/*",
                  "process_every_value": true,
                  "separator": ". ",
                  "to_field": "choices_list",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "field": "choices_list",
                  "index": "_index",
                  "to_field": "number_and_answer",
                  "type": "take_by_field"
              },
              {
                  "field": "choices/*/0",
                  "separator": ",",
                  "to_field": "numbers",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "add": [
                      ""
                  ],
                  "field": "choices_list",
                  "to_field": "choices_list",
                  "type": "add_constant"
              },
              {
                  "field": "choices_list",
                  "separator": "\n",
                  "to_field": "choices",
                  "type": "join_str"
              },
              {
                  "field_to_field": {
                      "number": "label"
                  },
                  "type": "rename_fields"
              }
          ],
          "task": {
              "inputs": [
                  "choices",
                  "sentence1",
                  "numbers",
                  "topic",
                  "context"
              ],
              "metrics": [
                  "metrics.accuracy"
              ],
              "outputs": [
                  "label"
              ],
              "type": "form_task"
          },
          "templates": "templates.qa.multiple_choice.context_no_intro.all",
          "type": "task_card"
      }

References: :ref:`metrics.accuracy <metrics.accuracy>`, :ref:`templates.qa.multiple_choice.context_no_intro.all <templates.qa.multiple_choice.context_no_intro.all>`

|
|



.. _cards.belebele.kin_Latn:

----------

kin_Latn
""""""""

.. note:: ID: ``cards.belebele.kin_Latn``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "default",
              "path": "facebook/belebele",
              "split": "kin_Latn",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "mapper": {
                      "kin_Latn": "test"
                  },
                  "type": "rename_splits"
              },
              {
                  "fields": {
                      "numbering": [
                          "A",
                          "B",
                          "C",
                          "D",
                          "E",
                          "F",
                          "G",
                          "H",
                          "I",
                          "J",
                          "K",
                          "L",
                          "M",
                          "N",
                          "O",
                          "P",
                          "Q",
                          "R",
                          "S",
                          "T",
                          "U",
                          "V",
                          "W",
                          "X",
                          "Y",
                          "Z"
                      ]
                  },
                  "type": "add_fields"
              },
              {
                  "fields": [
                      "mc_answer1",
                      "mc_answer2",
                      "mc_answer3",
                      "mc_answer4"
                  ],
                  "to_field": "choices",
                  "type": "list_field_values"
              },
              {
                  "mappers": {
                      "correct_answer_num": {
                          "1": "A",
                          "2": "B",
                          "3": "C",
                          "4": "D"
                      }
                  },
                  "type": "map_instance_values"
              },
              {
                  "index_of": "correct_answer_num",
                  "search_in": "numbering",
                  "to_field": "index",
                  "type": "index_of"
              },
              {
                  "field_to_field": {
                      "choices": "_choices",
                      "dialect": "topic",
                      "flores_passage": "context",
                      "index": "_index",
                      "numbering": "_numbering",
                      "question": "sentence1"
                  },
                  "type": "rename_fields"
              },
              {
                  "field": "_numbering",
                  "index": "_index",
                  "to_field": "number",
                  "type": "take_by_field"
              },
              {
                  "field": "_choices",
                  "index": "_index",
                  "to_field": "answer",
                  "type": "take_by_field"
              },
              {
                  "fields": [
                      "_numbering",
                      "_choices"
                  ],
                  "to_field": "choices",
                  "type": "zip_field_values"
              },
              {
                  "field": "choices/*",
                  "process_every_value": true,
                  "separator": ". ",
                  "to_field": "choices_list",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "field": "choices_list",
                  "index": "_index",
                  "to_field": "number_and_answer",
                  "type": "take_by_field"
              },
              {
                  "field": "choices/*/0",
                  "separator": ",",
                  "to_field": "numbers",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "add": [
                      ""
                  ],
                  "field": "choices_list",
                  "to_field": "choices_list",
                  "type": "add_constant"
              },
              {
                  "field": "choices_list",
                  "separator": "\n",
                  "to_field": "choices",
                  "type": "join_str"
              },
              {
                  "field_to_field": {
                      "number": "label"
                  },
                  "type": "rename_fields"
              }
          ],
          "task": {
              "inputs": [
                  "choices",
                  "sentence1",
                  "numbers",
                  "topic",
                  "context"
              ],
              "metrics": [
                  "metrics.accuracy"
              ],
              "outputs": [
                  "label"
              ],
              "type": "form_task"
          },
          "templates": "templates.qa.multiple_choice.context_no_intro.all",
          "type": "task_card"
      }

References: :ref:`metrics.accuracy <metrics.accuracy>`, :ref:`templates.qa.multiple_choice.context_no_intro.all <templates.qa.multiple_choice.context_no_intro.all>`

|
|



.. _cards.belebele.bam_Latn:

----------

bam_Latn
""""""""

.. note:: ID: ``cards.belebele.bam_Latn``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "default",
              "path": "facebook/belebele",
              "split": "bam_Latn",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "mapper": {
                      "bam_Latn": "test"
                  },
                  "type": "rename_splits"
              },
              {
                  "fields": {
                      "numbering": [
                          "A",
                          "B",
                          "C",
                          "D",
                          "E",
                          "F",
                          "G",
                          "H",
                          "I",
                          "J",
                          "K",
                          "L",
                          "M",
                          "N",
                          "O",
                          "P",
                          "Q",
                          "R",
                          "S",
                          "T",
                          "U",
                          "V",
                          "W",
                          "X",
                          "Y",
                          "Z"
                      ]
                  },
                  "type": "add_fields"
              },
              {
                  "fields": [
                      "mc_answer1",
                      "mc_answer2",
                      "mc_answer3",
                      "mc_answer4"
                  ],
                  "to_field": "choices",
                  "type": "list_field_values"
              },
              {
                  "mappers": {
                      "correct_answer_num": {
                          "1": "A",
                          "2": "B",
                          "3": "C",
                          "4": "D"
                      }
                  },
                  "type": "map_instance_values"
              },
              {
                  "index_of": "correct_answer_num",
                  "search_in": "numbering",
                  "to_field": "index",
                  "type": "index_of"
              },
              {
                  "field_to_field": {
                      "choices": "_choices",
                      "dialect": "topic",
                      "flores_passage": "context",
                      "index": "_index",
                      "numbering": "_numbering",
                      "question": "sentence1"
                  },
                  "type": "rename_fields"
              },
              {
                  "field": "_numbering",
                  "index": "_index",
                  "to_field": "number",
                  "type": "take_by_field"
              },
              {
                  "field": "_choices",
                  "index": "_index",
                  "to_field": "answer",
                  "type": "take_by_field"
              },
              {
                  "fields": [
                      "_numbering",
                      "_choices"
                  ],
                  "to_field": "choices",
                  "type": "zip_field_values"
              },
              {
                  "field": "choices/*",
                  "process_every_value": true,
                  "separator": ". ",
                  "to_field": "choices_list",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "field": "choices_list",
                  "index": "_index",
                  "to_field": "number_and_answer",
                  "type": "take_by_field"
              },
              {
                  "field": "choices/*/0",
                  "separator": ",",
                  "to_field": "numbers",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "add": [
                      ""
                  ],
                  "field": "choices_list",
                  "to_field": "choices_list",
                  "type": "add_constant"
              },
              {
                  "field": "choices_list",
                  "separator": "\n",
                  "to_field": "choices",
                  "type": "join_str"
              },
              {
                  "field_to_field": {
                      "number": "label"
                  },
                  "type": "rename_fields"
              }
          ],
          "task": {
              "inputs": [
                  "choices",
                  "sentence1",
                  "numbers",
                  "topic",
                  "context"
              ],
              "metrics": [
                  "metrics.accuracy"
              ],
              "outputs": [
                  "label"
              ],
              "type": "form_task"
          },
          "templates": "templates.qa.multiple_choice.context_no_intro.all",
          "type": "task_card"
      }

References: :ref:`metrics.accuracy <metrics.accuracy>`, :ref:`templates.qa.multiple_choice.context_no_intro.all <templates.qa.multiple_choice.context_no_intro.all>`

|
|



.. _cards.belebele.plt_Latn:

----------

plt_Latn
""""""""

.. note:: ID: ``cards.belebele.plt_Latn``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "default",
              "path": "facebook/belebele",
              "split": "plt_Latn",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "mapper": {
                      "plt_Latn": "test"
                  },
                  "type": "rename_splits"
              },
              {
                  "fields": {
                      "numbering": [
                          "A",
                          "B",
                          "C",
                          "D",
                          "E",
                          "F",
                          "G",
                          "H",
                          "I",
                          "J",
                          "K",
                          "L",
                          "M",
                          "N",
                          "O",
                          "P",
                          "Q",
                          "R",
                          "S",
                          "T",
                          "U",
                          "V",
                          "W",
                          "X",
                          "Y",
                          "Z"
                      ]
                  },
                  "type": "add_fields"
              },
              {
                  "fields": [
                      "mc_answer1",
                      "mc_answer2",
                      "mc_answer3",
                      "mc_answer4"
                  ],
                  "to_field": "choices",
                  "type": "list_field_values"
              },
              {
                  "mappers": {
                      "correct_answer_num": {
                          "1": "A",
                          "2": "B",
                          "3": "C",
                          "4": "D"
                      }
                  },
                  "type": "map_instance_values"
              },
              {
                  "index_of": "correct_answer_num",
                  "search_in": "numbering",
                  "to_field": "index",
                  "type": "index_of"
              },
              {
                  "field_to_field": {
                      "choices": "_choices",
                      "dialect": "topic",
                      "flores_passage": "context",
                      "index": "_index",
                      "numbering": "_numbering",
                      "question": "sentence1"
                  },
                  "type": "rename_fields"
              },
              {
                  "field": "_numbering",
                  "index": "_index",
                  "to_field": "number",
                  "type": "take_by_field"
              },
              {
                  "field": "_choices",
                  "index": "_index",
                  "to_field": "answer",
                  "type": "take_by_field"
              },
              {
                  "fields": [
                      "_numbering",
                      "_choices"
                  ],
                  "to_field": "choices",
                  "type": "zip_field_values"
              },
              {
                  "field": "choices/*",
                  "process_every_value": true,
                  "separator": ". ",
                  "to_field": "choices_list",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "field": "choices_list",
                  "index": "_index",
                  "to_field": "number_and_answer",
                  "type": "take_by_field"
              },
              {
                  "field": "choices/*/0",
                  "separator": ",",
                  "to_field": "numbers",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "add": [
                      ""
                  ],
                  "field": "choices_list",
                  "to_field": "choices_list",
                  "type": "add_constant"
              },
              {
                  "field": "choices_list",
                  "separator": "\n",
                  "to_field": "choices",
                  "type": "join_str"
              },
              {
                  "field_to_field": {
                      "number": "label"
                  },
                  "type": "rename_fields"
              }
          ],
          "task": {
              "inputs": [
                  "choices",
                  "sentence1",
                  "numbers",
                  "topic",
                  "context"
              ],
              "metrics": [
                  "metrics.accuracy"
              ],
              "outputs": [
                  "label"
              ],
              "type": "form_task"
          },
          "templates": "templates.qa.multiple_choice.context_no_intro.all",
          "type": "task_card"
      }

References: :ref:`metrics.accuracy <metrics.accuracy>`, :ref:`templates.qa.multiple_choice.context_no_intro.all <templates.qa.multiple_choice.context_no_intro.all>`

|
|



.. _cards.belebele.ary_Arab:

----------

ary_Arab
""""""""

.. note:: ID: ``cards.belebele.ary_Arab``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "default",
              "path": "facebook/belebele",
              "split": "ary_Arab",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "mapper": {
                      "ary_Arab": "test"
                  },
                  "type": "rename_splits"
              },
              {
                  "fields": {
                      "numbering": [
                          "A",
                          "B",
                          "C",
                          "D",
                          "E",
                          "F",
                          "G",
                          "H",
                          "I",
                          "J",
                          "K",
                          "L",
                          "M",
                          "N",
                          "O",
                          "P",
                          "Q",
                          "R",
                          "S",
                          "T",
                          "U",
                          "V",
                          "W",
                          "X",
                          "Y",
                          "Z"
                      ]
                  },
                  "type": "add_fields"
              },
              {
                  "fields": [
                      "mc_answer1",
                      "mc_answer2",
                      "mc_answer3",
                      "mc_answer4"
                  ],
                  "to_field": "choices",
                  "type": "list_field_values"
              },
              {
                  "mappers": {
                      "correct_answer_num": {
                          "1": "A",
                          "2": "B",
                          "3": "C",
                          "4": "D"
                      }
                  },
                  "type": "map_instance_values"
              },
              {
                  "index_of": "correct_answer_num",
                  "search_in": "numbering",
                  "to_field": "index",
                  "type": "index_of"
              },
              {
                  "field_to_field": {
                      "choices": "_choices",
                      "dialect": "topic",
                      "flores_passage": "context",
                      "index": "_index",
                      "numbering": "_numbering",
                      "question": "sentence1"
                  },
                  "type": "rename_fields"
              },
              {
                  "field": "_numbering",
                  "index": "_index",
                  "to_field": "number",
                  "type": "take_by_field"
              },
              {
                  "field": "_choices",
                  "index": "_index",
                  "to_field": "answer",
                  "type": "take_by_field"
              },
              {
                  "fields": [
                      "_numbering",
                      "_choices"
                  ],
                  "to_field": "choices",
                  "type": "zip_field_values"
              },
              {
                  "field": "choices/*",
                  "process_every_value": true,
                  "separator": ". ",
                  "to_field": "choices_list",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "field": "choices_list",
                  "index": "_index",
                  "to_field": "number_and_answer",
                  "type": "take_by_field"
              },
              {
                  "field": "choices/*/0",
                  "separator": ",",
                  "to_field": "numbers",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "add": [
                      ""
                  ],
                  "field": "choices_list",
                  "to_field": "choices_list",
                  "type": "add_constant"
              },
              {
                  "field": "choices_list",
                  "separator": "\n",
                  "to_field": "choices",
                  "type": "join_str"
              },
              {
                  "field_to_field": {
                      "number": "label"
                  },
                  "type": "rename_fields"
              }
          ],
          "task": {
              "inputs": [
                  "choices",
                  "sentence1",
                  "numbers",
                  "topic",
                  "context"
              ],
              "metrics": [
                  "metrics.accuracy"
              ],
              "outputs": [
                  "label"
              ],
              "type": "form_task"
          },
          "templates": "templates.qa.multiple_choice.context_no_intro.all",
          "type": "task_card"
      }

References: :ref:`metrics.accuracy <metrics.accuracy>`, :ref:`templates.qa.multiple_choice.context_no_intro.all <templates.qa.multiple_choice.context_no_intro.all>`

|
|



.. _cards.belebele.zul_Latn:

----------

zul_Latn
""""""""

.. note:: ID: ``cards.belebele.zul_Latn``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "default",
              "path": "facebook/belebele",
              "split": "zul_Latn",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "mapper": {
                      "zul_Latn": "test"
                  },
                  "type": "rename_splits"
              },
              {
                  "fields": {
                      "numbering": [
                          "A",
                          "B",
                          "C",
                          "D",
                          "E",
                          "F",
                          "G",
                          "H",
                          "I",
                          "J",
                          "K",
                          "L",
                          "M",
                          "N",
                          "O",
                          "P",
                          "Q",
                          "R",
                          "S",
                          "T",
                          "U",
                          "V",
                          "W",
                          "X",
                          "Y",
                          "Z"
                      ]
                  },
                  "type": "add_fields"
              },
              {
                  "fields": [
                      "mc_answer1",
                      "mc_answer2",
                      "mc_answer3",
                      "mc_answer4"
                  ],
                  "to_field": "choices",
                  "type": "list_field_values"
              },
              {
                  "mappers": {
                      "correct_answer_num": {
                          "1": "A",
                          "2": "B",
                          "3": "C",
                          "4": "D"
                      }
                  },
                  "type": "map_instance_values"
              },
              {
                  "index_of": "correct_answer_num",
                  "search_in": "numbering",
                  "to_field": "index",
                  "type": "index_of"
              },
              {
                  "field_to_field": {
                      "choices": "_choices",
                      "dialect": "topic",
                      "flores_passage": "context",
                      "index": "_index",
                      "numbering": "_numbering",
                      "question": "sentence1"
                  },
                  "type": "rename_fields"
              },
              {
                  "field": "_numbering",
                  "index": "_index",
                  "to_field": "number",
                  "type": "take_by_field"
              },
              {
                  "field": "_choices",
                  "index": "_index",
                  "to_field": "answer",
                  "type": "take_by_field"
              },
              {
                  "fields": [
                      "_numbering",
                      "_choices"
                  ],
                  "to_field": "choices",
                  "type": "zip_field_values"
              },
              {
                  "field": "choices/*",
                  "process_every_value": true,
                  "separator": ". ",
                  "to_field": "choices_list",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "field": "choices_list",
                  "index": "_index",
                  "to_field": "number_and_answer",
                  "type": "take_by_field"
              },
              {
                  "field": "choices/*/0",
                  "separator": ",",
                  "to_field": "numbers",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "add": [
                      ""
                  ],
                  "field": "choices_list",
                  "to_field": "choices_list",
                  "type": "add_constant"
              },
              {
                  "field": "choices_list",
                  "separator": "\n",
                  "to_field": "choices",
                  "type": "join_str"
              },
              {
                  "field_to_field": {
                      "number": "label"
                  },
                  "type": "rename_fields"
              }
          ],
          "task": {
              "inputs": [
                  "choices",
                  "sentence1",
                  "numbers",
                  "topic",
                  "context"
              ],
              "metrics": [
                  "metrics.accuracy"
              ],
              "outputs": [
                  "label"
              ],
              "type": "form_task"
          },
          "templates": "templates.qa.multiple_choice.context_no_intro.all",
          "type": "task_card"
      }

References: :ref:`metrics.accuracy <metrics.accuracy>`, :ref:`templates.qa.multiple_choice.context_no_intro.all <templates.qa.multiple_choice.context_no_intro.all>`

|
|



.. _cards.belebele.heb_Hebr:

----------

heb_Hebr
""""""""

.. note:: ID: ``cards.belebele.heb_Hebr``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "default",
              "path": "facebook/belebele",
              "split": "heb_Hebr",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "mapper": {
                      "heb_Hebr": "test"
                  },
                  "type": "rename_splits"
              },
              {
                  "fields": {
                      "numbering": [
                          "A",
                          "B",
                          "C",
                          "D",
                          "E",
                          "F",
                          "G",
                          "H",
                          "I",
                          "J",
                          "K",
                          "L",
                          "M",
                          "N",
                          "O",
                          "P",
                          "Q",
                          "R",
                          "S",
                          "T",
                          "U",
                          "V",
                          "W",
                          "X",
                          "Y",
                          "Z"
                      ]
                  },
                  "type": "add_fields"
              },
              {
                  "fields": [
                      "mc_answer1",
                      "mc_answer2",
                      "mc_answer3",
                      "mc_answer4"
                  ],
                  "to_field": "choices",
                  "type": "list_field_values"
              },
              {
                  "mappers": {
                      "correct_answer_num": {
                          "1": "A",
                          "2": "B",
                          "3": "C",
                          "4": "D"
                      }
                  },
                  "type": "map_instance_values"
              },
              {
                  "index_of": "correct_answer_num",
                  "search_in": "numbering",
                  "to_field": "index",
                  "type": "index_of"
              },
              {
                  "field_to_field": {
                      "choices": "_choices",
                      "dialect": "topic",
                      "flores_passage": "context",
                      "index": "_index",
                      "numbering": "_numbering",
                      "question": "sentence1"
                  },
                  "type": "rename_fields"
              },
              {
                  "field": "_numbering",
                  "index": "_index",
                  "to_field": "number",
                  "type": "take_by_field"
              },
              {
                  "field": "_choices",
                  "index": "_index",
                  "to_field": "answer",
                  "type": "take_by_field"
              },
              {
                  "fields": [
                      "_numbering",
                      "_choices"
                  ],
                  "to_field": "choices",
                  "type": "zip_field_values"
              },
              {
                  "field": "choices/*",
                  "process_every_value": true,
                  "separator": ". ",
                  "to_field": "choices_list",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "field": "choices_list",
                  "index": "_index",
                  "to_field": "number_and_answer",
                  "type": "take_by_field"
              },
              {
                  "field": "choices/*/0",
                  "separator": ",",
                  "to_field": "numbers",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "add": [
                      ""
                  ],
                  "field": "choices_list",
                  "to_field": "choices_list",
                  "type": "add_constant"
              },
              {
                  "field": "choices_list",
                  "separator": "\n",
                  "to_field": "choices",
                  "type": "join_str"
              },
              {
                  "field_to_field": {
                      "number": "label"
                  },
                  "type": "rename_fields"
              }
          ],
          "task": {
              "inputs": [
                  "choices",
                  "sentence1",
                  "numbers",
                  "topic",
                  "context"
              ],
              "metrics": [
                  "metrics.accuracy"
              ],
              "outputs": [
                  "label"
              ],
              "type": "form_task"
          },
          "templates": "templates.qa.multiple_choice.context_no_intro.all",
          "type": "task_card"
      }

References: :ref:`metrics.accuracy <metrics.accuracy>`, :ref:`templates.qa.multiple_choice.context_no_intro.all <templates.qa.multiple_choice.context_no_intro.all>`

|
|



.. _cards.belebele.npi_Deva:

----------

npi_Deva
""""""""

.. note:: ID: ``cards.belebele.npi_Deva``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "default",
              "path": "facebook/belebele",
              "split": "npi_Deva",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "mapper": {
                      "npi_Deva": "test"
                  },
                  "type": "rename_splits"
              },
              {
                  "fields": {
                      "numbering": [
                          "A",
                          "B",
                          "C",
                          "D",
                          "E",
                          "F",
                          "G",
                          "H",
                          "I",
                          "J",
                          "K",
                          "L",
                          "M",
                          "N",
                          "O",
                          "P",
                          "Q",
                          "R",
                          "S",
                          "T",
                          "U",
                          "V",
                          "W",
                          "X",
                          "Y",
                          "Z"
                      ]
                  },
                  "type": "add_fields"
              },
              {
                  "fields": [
                      "mc_answer1",
                      "mc_answer2",
                      "mc_answer3",
                      "mc_answer4"
                  ],
                  "to_field": "choices",
                  "type": "list_field_values"
              },
              {
                  "mappers": {
                      "correct_answer_num": {
                          "1": "A",
                          "2": "B",
                          "3": "C",
                          "4": "D"
                      }
                  },
                  "type": "map_instance_values"
              },
              {
                  "index_of": "correct_answer_num",
                  "search_in": "numbering",
                  "to_field": "index",
                  "type": "index_of"
              },
              {
                  "field_to_field": {
                      "choices": "_choices",
                      "dialect": "topic",
                      "flores_passage": "context",
                      "index": "_index",
                      "numbering": "_numbering",
                      "question": "sentence1"
                  },
                  "type": "rename_fields"
              },
              {
                  "field": "_numbering",
                  "index": "_index",
                  "to_field": "number",
                  "type": "take_by_field"
              },
              {
                  "field": "_choices",
                  "index": "_index",
                  "to_field": "answer",
                  "type": "take_by_field"
              },
              {
                  "fields": [
                      "_numbering",
                      "_choices"
                  ],
                  "to_field": "choices",
                  "type": "zip_field_values"
              },
              {
                  "field": "choices/*",
                  "process_every_value": true,
                  "separator": ". ",
                  "to_field": "choices_list",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "field": "choices_list",
                  "index": "_index",
                  "to_field": "number_and_answer",
                  "type": "take_by_field"
              },
              {
                  "field": "choices/*/0",
                  "separator": ",",
                  "to_field": "numbers",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "add": [
                      ""
                  ],
                  "field": "choices_list",
                  "to_field": "choices_list",
                  "type": "add_constant"
              },
              {
                  "field": "choices_list",
                  "separator": "\n",
                  "to_field": "choices",
                  "type": "join_str"
              },
              {
                  "field_to_field": {
                      "number": "label"
                  },
                  "type": "rename_fields"
              }
          ],
          "task": {
              "inputs": [
                  "choices",
                  "sentence1",
                  "numbers",
                  "topic",
                  "context"
              ],
              "metrics": [
                  "metrics.accuracy"
              ],
              "outputs": [
                  "label"
              ],
              "type": "form_task"
          },
          "templates": "templates.qa.multiple_choice.context_no_intro.all",
          "type": "task_card"
      }

References: :ref:`metrics.accuracy <metrics.accuracy>`, :ref:`templates.qa.multiple_choice.context_no_intro.all <templates.qa.multiple_choice.context_no_intro.all>`

|
|



.. _cards.belebele.ron_Latn:

----------

ron_Latn
""""""""

.. note:: ID: ``cards.belebele.ron_Latn``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "default",
              "path": "facebook/belebele",
              "split": "ron_Latn",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "mapper": {
                      "ron_Latn": "test"
                  },
                  "type": "rename_splits"
              },
              {
                  "fields": {
                      "numbering": [
                          "A",
                          "B",
                          "C",
                          "D",
                          "E",
                          "F",
                          "G",
                          "H",
                          "I",
                          "J",
                          "K",
                          "L",
                          "M",
                          "N",
                          "O",
                          "P",
                          "Q",
                          "R",
                          "S",
                          "T",
                          "U",
                          "V",
                          "W",
                          "X",
                          "Y",
                          "Z"
                      ]
                  },
                  "type": "add_fields"
              },
              {
                  "fields": [
                      "mc_answer1",
                      "mc_answer2",
                      "mc_answer3",
                      "mc_answer4"
                  ],
                  "to_field": "choices",
                  "type": "list_field_values"
              },
              {
                  "mappers": {
                      "correct_answer_num": {
                          "1": "A",
                          "2": "B",
                          "3": "C",
                          "4": "D"
                      }
                  },
                  "type": "map_instance_values"
              },
              {
                  "index_of": "correct_answer_num",
                  "search_in": "numbering",
                  "to_field": "index",
                  "type": "index_of"
              },
              {
                  "field_to_field": {
                      "choices": "_choices",
                      "dialect": "topic",
                      "flores_passage": "context",
                      "index": "_index",
                      "numbering": "_numbering",
                      "question": "sentence1"
                  },
                  "type": "rename_fields"
              },
              {
                  "field": "_numbering",
                  "index": "_index",
                  "to_field": "number",
                  "type": "take_by_field"
              },
              {
                  "field": "_choices",
                  "index": "_index",
                  "to_field": "answer",
                  "type": "take_by_field"
              },
              {
                  "fields": [
                      "_numbering",
                      "_choices"
                  ],
                  "to_field": "choices",
                  "type": "zip_field_values"
              },
              {
                  "field": "choices/*",
                  "process_every_value": true,
                  "separator": ". ",
                  "to_field": "choices_list",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "field": "choices_list",
                  "index": "_index",
                  "to_field": "number_and_answer",
                  "type": "take_by_field"
              },
              {
                  "field": "choices/*/0",
                  "separator": ",",
                  "to_field": "numbers",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "add": [
                      ""
                  ],
                  "field": "choices_list",
                  "to_field": "choices_list",
                  "type": "add_constant"
              },
              {
                  "field": "choices_list",
                  "separator": "\n",
                  "to_field": "choices",
                  "type": "join_str"
              },
              {
                  "field_to_field": {
                      "number": "label"
                  },
                  "type": "rename_fields"
              }
          ],
          "task": {
              "inputs": [
                  "choices",
                  "sentence1",
                  "numbers",
                  "topic",
                  "context"
              ],
              "metrics": [
                  "metrics.accuracy"
              ],
              "outputs": [
                  "label"
              ],
              "type": "form_task"
          },
          "templates": "templates.qa.multiple_choice.context_no_intro.all",
          "type": "task_card"
      }

References: :ref:`metrics.accuracy <metrics.accuracy>`, :ref:`templates.qa.multiple_choice.context_no_intro.all <templates.qa.multiple_choice.context_no_intro.all>`

|
|



.. _cards.belebele.ckb_Arab:

----------

ckb_Arab
""""""""

.. note:: ID: ``cards.belebele.ckb_Arab``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "default",
              "path": "facebook/belebele",
              "split": "ckb_Arab",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "mapper": {
                      "ckb_Arab": "test"
                  },
                  "type": "rename_splits"
              },
              {
                  "fields": {
                      "numbering": [
                          "A",
                          "B",
                          "C",
                          "D",
                          "E",
                          "F",
                          "G",
                          "H",
                          "I",
                          "J",
                          "K",
                          "L",
                          "M",
                          "N",
                          "O",
                          "P",
                          "Q",
                          "R",
                          "S",
                          "T",
                          "U",
                          "V",
                          "W",
                          "X",
                          "Y",
                          "Z"
                      ]
                  },
                  "type": "add_fields"
              },
              {
                  "fields": [
                      "mc_answer1",
                      "mc_answer2",
                      "mc_answer3",
                      "mc_answer4"
                  ],
                  "to_field": "choices",
                  "type": "list_field_values"
              },
              {
                  "mappers": {
                      "correct_answer_num": {
                          "1": "A",
                          "2": "B",
                          "3": "C",
                          "4": "D"
                      }
                  },
                  "type": "map_instance_values"
              },
              {
                  "index_of": "correct_answer_num",
                  "search_in": "numbering",
                  "to_field": "index",
                  "type": "index_of"
              },
              {
                  "field_to_field": {
                      "choices": "_choices",
                      "dialect": "topic",
                      "flores_passage": "context",
                      "index": "_index",
                      "numbering": "_numbering",
                      "question": "sentence1"
                  },
                  "type": "rename_fields"
              },
              {
                  "field": "_numbering",
                  "index": "_index",
                  "to_field": "number",
                  "type": "take_by_field"
              },
              {
                  "field": "_choices",
                  "index": "_index",
                  "to_field": "answer",
                  "type": "take_by_field"
              },
              {
                  "fields": [
                      "_numbering",
                      "_choices"
                  ],
                  "to_field": "choices",
                  "type": "zip_field_values"
              },
              {
                  "field": "choices/*",
                  "process_every_value": true,
                  "separator": ". ",
                  "to_field": "choices_list",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "field": "choices_list",
                  "index": "_index",
                  "to_field": "number_and_answer",
                  "type": "take_by_field"
              },
              {
                  "field": "choices/*/0",
                  "separator": ",",
                  "to_field": "numbers",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "add": [
                      ""
                  ],
                  "field": "choices_list",
                  "to_field": "choices_list",
                  "type": "add_constant"
              },
              {
                  "field": "choices_list",
                  "separator": "\n",
                  "to_field": "choices",
                  "type": "join_str"
              },
              {
                  "field_to_field": {
                      "number": "label"
                  },
                  "type": "rename_fields"
              }
          ],
          "task": {
              "inputs": [
                  "choices",
                  "sentence1",
                  "numbers",
                  "topic",
                  "context"
              ],
              "metrics": [
                  "metrics.accuracy"
              ],
              "outputs": [
                  "label"
              ],
              "type": "form_task"
          },
          "templates": "templates.qa.multiple_choice.context_no_intro.all",
          "type": "task_card"
      }

References: :ref:`metrics.accuracy <metrics.accuracy>`, :ref:`templates.qa.multiple_choice.context_no_intro.all <templates.qa.multiple_choice.context_no_intro.all>`

|
|



.. _cards.belebele.snd_Arab:

----------

snd_Arab
""""""""

.. note:: ID: ``cards.belebele.snd_Arab``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "default",
              "path": "facebook/belebele",
              "split": "snd_Arab",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "mapper": {
                      "snd_Arab": "test"
                  },
                  "type": "rename_splits"
              },
              {
                  "fields": {
                      "numbering": [
                          "A",
                          "B",
                          "C",
                          "D",
                          "E",
                          "F",
                          "G",
                          "H",
                          "I",
                          "J",
                          "K",
                          "L",
                          "M",
                          "N",
                          "O",
                          "P",
                          "Q",
                          "R",
                          "S",
                          "T",
                          "U",
                          "V",
                          "W",
                          "X",
                          "Y",
                          "Z"
                      ]
                  },
                  "type": "add_fields"
              },
              {
                  "fields": [
                      "mc_answer1",
                      "mc_answer2",
                      "mc_answer3",
                      "mc_answer4"
                  ],
                  "to_field": "choices",
                  "type": "list_field_values"
              },
              {
                  "mappers": {
                      "correct_answer_num": {
                          "1": "A",
                          "2": "B",
                          "3": "C",
                          "4": "D"
                      }
                  },
                  "type": "map_instance_values"
              },
              {
                  "index_of": "correct_answer_num",
                  "search_in": "numbering",
                  "to_field": "index",
                  "type": "index_of"
              },
              {
                  "field_to_field": {
                      "choices": "_choices",
                      "dialect": "topic",
                      "flores_passage": "context",
                      "index": "_index",
                      "numbering": "_numbering",
                      "question": "sentence1"
                  },
                  "type": "rename_fields"
              },
              {
                  "field": "_numbering",
                  "index": "_index",
                  "to_field": "number",
                  "type": "take_by_field"
              },
              {
                  "field": "_choices",
                  "index": "_index",
                  "to_field": "answer",
                  "type": "take_by_field"
              },
              {
                  "fields": [
                      "_numbering",
                      "_choices"
                  ],
                  "to_field": "choices",
                  "type": "zip_field_values"
              },
              {
                  "field": "choices/*",
                  "process_every_value": true,
                  "separator": ". ",
                  "to_field": "choices_list",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "field": "choices_list",
                  "index": "_index",
                  "to_field": "number_and_answer",
                  "type": "take_by_field"
              },
              {
                  "field": "choices/*/0",
                  "separator": ",",
                  "to_field": "numbers",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "add": [
                      ""
                  ],
                  "field": "choices_list",
                  "to_field": "choices_list",
                  "type": "add_constant"
              },
              {
                  "field": "choices_list",
                  "separator": "\n",
                  "to_field": "choices",
                  "type": "join_str"
              },
              {
                  "field_to_field": {
                      "number": "label"
                  },
                  "type": "rename_fields"
              }
          ],
          "task": {
              "inputs": [
                  "choices",
                  "sentence1",
                  "numbers",
                  "topic",
                  "context"
              ],
              "metrics": [
                  "metrics.accuracy"
              ],
              "outputs": [
                  "label"
              ],
              "type": "form_task"
          },
          "templates": "templates.qa.multiple_choice.context_no_intro.all",
          "type": "task_card"
      }

References: :ref:`metrics.accuracy <metrics.accuracy>`, :ref:`templates.qa.multiple_choice.context_no_intro.all <templates.qa.multiple_choice.context_no_intro.all>`

|
|



.. _cards.belebele.kea_Latn:

----------

kea_Latn
""""""""

.. note:: ID: ``cards.belebele.kea_Latn``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "default",
              "path": "facebook/belebele",
              "split": "kea_Latn",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "mapper": {
                      "kea_Latn": "test"
                  },
                  "type": "rename_splits"
              },
              {
                  "fields": {
                      "numbering": [
                          "A",
                          "B",
                          "C",
                          "D",
                          "E",
                          "F",
                          "G",
                          "H",
                          "I",
                          "J",
                          "K",
                          "L",
                          "M",
                          "N",
                          "O",
                          "P",
                          "Q",
                          "R",
                          "S",
                          "T",
                          "U",
                          "V",
                          "W",
                          "X",
                          "Y",
                          "Z"
                      ]
                  },
                  "type": "add_fields"
              },
              {
                  "fields": [
                      "mc_answer1",
                      "mc_answer2",
                      "mc_answer3",
                      "mc_answer4"
                  ],
                  "to_field": "choices",
                  "type": "list_field_values"
              },
              {
                  "mappers": {
                      "correct_answer_num": {
                          "1": "A",
                          "2": "B",
                          "3": "C",
                          "4": "D"
                      }
                  },
                  "type": "map_instance_values"
              },
              {
                  "index_of": "correct_answer_num",
                  "search_in": "numbering",
                  "to_field": "index",
                  "type": "index_of"
              },
              {
                  "field_to_field": {
                      "choices": "_choices",
                      "dialect": "topic",
                      "flores_passage": "context",
                      "index": "_index",
                      "numbering": "_numbering",
                      "question": "sentence1"
                  },
                  "type": "rename_fields"
              },
              {
                  "field": "_numbering",
                  "index": "_index",
                  "to_field": "number",
                  "type": "take_by_field"
              },
              {
                  "field": "_choices",
                  "index": "_index",
                  "to_field": "answer",
                  "type": "take_by_field"
              },
              {
                  "fields": [
                      "_numbering",
                      "_choices"
                  ],
                  "to_field": "choices",
                  "type": "zip_field_values"
              },
              {
                  "field": "choices/*",
                  "process_every_value": true,
                  "separator": ". ",
                  "to_field": "choices_list",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "field": "choices_list",
                  "index": "_index",
                  "to_field": "number_and_answer",
                  "type": "take_by_field"
              },
              {
                  "field": "choices/*/0",
                  "separator": ",",
                  "to_field": "numbers",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "add": [
                      ""
                  ],
                  "field": "choices_list",
                  "to_field": "choices_list",
                  "type": "add_constant"
              },
              {
                  "field": "choices_list",
                  "separator": "\n",
                  "to_field": "choices",
                  "type": "join_str"
              },
              {
                  "field_to_field": {
                      "number": "label"
                  },
                  "type": "rename_fields"
              }
          ],
          "task": {
              "inputs": [
                  "choices",
                  "sentence1",
                  "numbers",
                  "topic",
                  "context"
              ],
              "metrics": [
                  "metrics.accuracy"
              ],
              "outputs": [
                  "label"
              ],
              "type": "form_task"
          },
          "templates": "templates.qa.multiple_choice.context_no_intro.all",
          "type": "task_card"
      }

References: :ref:`metrics.accuracy <metrics.accuracy>`, :ref:`templates.qa.multiple_choice.context_no_intro.all <templates.qa.multiple_choice.context_no_intro.all>`

|
|



.. _cards.belebele.sun_Latn:

----------

sun_Latn
""""""""

.. note:: ID: ``cards.belebele.sun_Latn``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "default",
              "path": "facebook/belebele",
              "split": "sun_Latn",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "mapper": {
                      "sun_Latn": "test"
                  },
                  "type": "rename_splits"
              },
              {
                  "fields": {
                      "numbering": [
                          "A",
                          "B",
                          "C",
                          "D",
                          "E",
                          "F",
                          "G",
                          "H",
                          "I",
                          "J",
                          "K",
                          "L",
                          "M",
                          "N",
                          "O",
                          "P",
                          "Q",
                          "R",
                          "S",
                          "T",
                          "U",
                          "V",
                          "W",
                          "X",
                          "Y",
                          "Z"
                      ]
                  },
                  "type": "add_fields"
              },
              {
                  "fields": [
                      "mc_answer1",
                      "mc_answer2",
                      "mc_answer3",
                      "mc_answer4"
                  ],
                  "to_field": "choices",
                  "type": "list_field_values"
              },
              {
                  "mappers": {
                      "correct_answer_num": {
                          "1": "A",
                          "2": "B",
                          "3": "C",
                          "4": "D"
                      }
                  },
                  "type": "map_instance_values"
              },
              {
                  "index_of": "correct_answer_num",
                  "search_in": "numbering",
                  "to_field": "index",
                  "type": "index_of"
              },
              {
                  "field_to_field": {
                      "choices": "_choices",
                      "dialect": "topic",
                      "flores_passage": "context",
                      "index": "_index",
                      "numbering": "_numbering",
                      "question": "sentence1"
                  },
                  "type": "rename_fields"
              },
              {
                  "field": "_numbering",
                  "index": "_index",
                  "to_field": "number",
                  "type": "take_by_field"
              },
              {
                  "field": "_choices",
                  "index": "_index",
                  "to_field": "answer",
                  "type": "take_by_field"
              },
              {
                  "fields": [
                      "_numbering",
                      "_choices"
                  ],
                  "to_field": "choices",
                  "type": "zip_field_values"
              },
              {
                  "field": "choices/*",
                  "process_every_value": true,
                  "separator": ". ",
                  "to_field": "choices_list",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "field": "choices_list",
                  "index": "_index",
                  "to_field": "number_and_answer",
                  "type": "take_by_field"
              },
              {
                  "field": "choices/*/0",
                  "separator": ",",
                  "to_field": "numbers",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "add": [
                      ""
                  ],
                  "field": "choices_list",
                  "to_field": "choices_list",
                  "type": "add_constant"
              },
              {
                  "field": "choices_list",
                  "separator": "\n",
                  "to_field": "choices",
                  "type": "join_str"
              },
              {
                  "field_to_field": {
                      "number": "label"
                  },
                  "type": "rename_fields"
              }
          ],
          "task": {
              "inputs": [
                  "choices",
                  "sentence1",
                  "numbers",
                  "topic",
                  "context"
              ],
              "metrics": [
                  "metrics.accuracy"
              ],
              "outputs": [
                  "label"
              ],
              "type": "form_task"
          },
          "templates": "templates.qa.multiple_choice.context_no_intro.all",
          "type": "task_card"
      }

References: :ref:`metrics.accuracy <metrics.accuracy>`, :ref:`templates.qa.multiple_choice.context_no_intro.all <templates.qa.multiple_choice.context_no_intro.all>`

|
|



.. _cards.belebele.ilo_Latn:

----------

ilo_Latn
""""""""

.. note:: ID: ``cards.belebele.ilo_Latn``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "default",
              "path": "facebook/belebele",
              "split": "ilo_Latn",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "mapper": {
                      "ilo_Latn": "test"
                  },
                  "type": "rename_splits"
              },
              {
                  "fields": {
                      "numbering": [
                          "A",
                          "B",
                          "C",
                          "D",
                          "E",
                          "F",
                          "G",
                          "H",
                          "I",
                          "J",
                          "K",
                          "L",
                          "M",
                          "N",
                          "O",
                          "P",
                          "Q",
                          "R",
                          "S",
                          "T",
                          "U",
                          "V",
                          "W",
                          "X",
                          "Y",
                          "Z"
                      ]
                  },
                  "type": "add_fields"
              },
              {
                  "fields": [
                      "mc_answer1",
                      "mc_answer2",
                      "mc_answer3",
                      "mc_answer4"
                  ],
                  "to_field": "choices",
                  "type": "list_field_values"
              },
              {
                  "mappers": {
                      "correct_answer_num": {
                          "1": "A",
                          "2": "B",
                          "3": "C",
                          "4": "D"
                      }
                  },
                  "type": "map_instance_values"
              },
              {
                  "index_of": "correct_answer_num",
                  "search_in": "numbering",
                  "to_field": "index",
                  "type": "index_of"
              },
              {
                  "field_to_field": {
                      "choices": "_choices",
                      "dialect": "topic",
                      "flores_passage": "context",
                      "index": "_index",
                      "numbering": "_numbering",
                      "question": "sentence1"
                  },
                  "type": "rename_fields"
              },
              {
                  "field": "_numbering",
                  "index": "_index",
                  "to_field": "number",
                  "type": "take_by_field"
              },
              {
                  "field": "_choices",
                  "index": "_index",
                  "to_field": "answer",
                  "type": "take_by_field"
              },
              {
                  "fields": [
                      "_numbering",
                      "_choices"
                  ],
                  "to_field": "choices",
                  "type": "zip_field_values"
              },
              {
                  "field": "choices/*",
                  "process_every_value": true,
                  "separator": ". ",
                  "to_field": "choices_list",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "field": "choices_list",
                  "index": "_index",
                  "to_field": "number_and_answer",
                  "type": "take_by_field"
              },
              {
                  "field": "choices/*/0",
                  "separator": ",",
                  "to_field": "numbers",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "add": [
                      ""
                  ],
                  "field": "choices_list",
                  "to_field": "choices_list",
                  "type": "add_constant"
              },
              {
                  "field": "choices_list",
                  "separator": "\n",
                  "to_field": "choices",
                  "type": "join_str"
              },
              {
                  "field_to_field": {
                      "number": "label"
                  },
                  "type": "rename_fields"
              }
          ],
          "task": {
              "inputs": [
                  "choices",
                  "sentence1",
                  "numbers",
                  "topic",
                  "context"
              ],
              "metrics": [
                  "metrics.accuracy"
              ],
              "outputs": [
                  "label"
              ],
              "type": "form_task"
          },
          "templates": "templates.qa.multiple_choice.context_no_intro.all",
          "type": "task_card"
      }

References: :ref:`metrics.accuracy <metrics.accuracy>`, :ref:`templates.qa.multiple_choice.context_no_intro.all <templates.qa.multiple_choice.context_no_intro.all>`

|
|



.. _cards.belebele.som_Latn:

----------

som_Latn
""""""""

.. note:: ID: ``cards.belebele.som_Latn``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "default",
              "path": "facebook/belebele",
              "split": "som_Latn",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "mapper": {
                      "som_Latn": "test"
                  },
                  "type": "rename_splits"
              },
              {
                  "fields": {
                      "numbering": [
                          "A",
                          "B",
                          "C",
                          "D",
                          "E",
                          "F",
                          "G",
                          "H",
                          "I",
                          "J",
                          "K",
                          "L",
                          "M",
                          "N",
                          "O",
                          "P",
                          "Q",
                          "R",
                          "S",
                          "T",
                          "U",
                          "V",
                          "W",
                          "X",
                          "Y",
                          "Z"
                      ]
                  },
                  "type": "add_fields"
              },
              {
                  "fields": [
                      "mc_answer1",
                      "mc_answer2",
                      "mc_answer3",
                      "mc_answer4"
                  ],
                  "to_field": "choices",
                  "type": "list_field_values"
              },
              {
                  "mappers": {
                      "correct_answer_num": {
                          "1": "A",
                          "2": "B",
                          "3": "C",
                          "4": "D"
                      }
                  },
                  "type": "map_instance_values"
              },
              {
                  "index_of": "correct_answer_num",
                  "search_in": "numbering",
                  "to_field": "index",
                  "type": "index_of"
              },
              {
                  "field_to_field": {
                      "choices": "_choices",
                      "dialect": "topic",
                      "flores_passage": "context",
                      "index": "_index",
                      "numbering": "_numbering",
                      "question": "sentence1"
                  },
                  "type": "rename_fields"
              },
              {
                  "field": "_numbering",
                  "index": "_index",
                  "to_field": "number",
                  "type": "take_by_field"
              },
              {
                  "field": "_choices",
                  "index": "_index",
                  "to_field": "answer",
                  "type": "take_by_field"
              },
              {
                  "fields": [
                      "_numbering",
                      "_choices"
                  ],
                  "to_field": "choices",
                  "type": "zip_field_values"
              },
              {
                  "field": "choices/*",
                  "process_every_value": true,
                  "separator": ". ",
                  "to_field": "choices_list",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "field": "choices_list",
                  "index": "_index",
                  "to_field": "number_and_answer",
                  "type": "take_by_field"
              },
              {
                  "field": "choices/*/0",
                  "separator": ",",
                  "to_field": "numbers",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "add": [
                      ""
                  ],
                  "field": "choices_list",
                  "to_field": "choices_list",
                  "type": "add_constant"
              },
              {
                  "field": "choices_list",
                  "separator": "\n",
                  "to_field": "choices",
                  "type": "join_str"
              },
              {
                  "field_to_field": {
                      "number": "label"
                  },
                  "type": "rename_fields"
              }
          ],
          "task": {
              "inputs": [
                  "choices",
                  "sentence1",
                  "numbers",
                  "topic",
                  "context"
              ],
              "metrics": [
                  "metrics.accuracy"
              ],
              "outputs": [
                  "label"
              ],
              "type": "form_task"
          },
          "templates": "templates.qa.multiple_choice.context_no_intro.all",
          "type": "task_card"
      }

References: :ref:`metrics.accuracy <metrics.accuracy>`, :ref:`templates.qa.multiple_choice.context_no_intro.all <templates.qa.multiple_choice.context_no_intro.all>`

|
|



.. _cards.belebele.asm_Beng:

----------

asm_Beng
""""""""

.. note:: ID: ``cards.belebele.asm_Beng``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "default",
              "path": "facebook/belebele",
              "split": "asm_Beng",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "mapper": {
                      "asm_Beng": "test"
                  },
                  "type": "rename_splits"
              },
              {
                  "fields": {
                      "numbering": [
                          "A",
                          "B",
                          "C",
                          "D",
                          "E",
                          "F",
                          "G",
                          "H",
                          "I",
                          "J",
                          "K",
                          "L",
                          "M",
                          "N",
                          "O",
                          "P",
                          "Q",
                          "R",
                          "S",
                          "T",
                          "U",
                          "V",
                          "W",
                          "X",
                          "Y",
                          "Z"
                      ]
                  },
                  "type": "add_fields"
              },
              {
                  "fields": [
                      "mc_answer1",
                      "mc_answer2",
                      "mc_answer3",
                      "mc_answer4"
                  ],
                  "to_field": "choices",
                  "type": "list_field_values"
              },
              {
                  "mappers": {
                      "correct_answer_num": {
                          "1": "A",
                          "2": "B",
                          "3": "C",
                          "4": "D"
                      }
                  },
                  "type": "map_instance_values"
              },
              {
                  "index_of": "correct_answer_num",
                  "search_in": "numbering",
                  "to_field": "index",
                  "type": "index_of"
              },
              {
                  "field_to_field": {
                      "choices": "_choices",
                      "dialect": "topic",
                      "flores_passage": "context",
                      "index": "_index",
                      "numbering": "_numbering",
                      "question": "sentence1"
                  },
                  "type": "rename_fields"
              },
              {
                  "field": "_numbering",
                  "index": "_index",
                  "to_field": "number",
                  "type": "take_by_field"
              },
              {
                  "field": "_choices",
                  "index": "_index",
                  "to_field": "answer",
                  "type": "take_by_field"
              },
              {
                  "fields": [
                      "_numbering",
                      "_choices"
                  ],
                  "to_field": "choices",
                  "type": "zip_field_values"
              },
              {
                  "field": "choices/*",
                  "process_every_value": true,
                  "separator": ". ",
                  "to_field": "choices_list",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "field": "choices_list",
                  "index": "_index",
                  "to_field": "number_and_answer",
                  "type": "take_by_field"
              },
              {
                  "field": "choices/*/0",
                  "separator": ",",
                  "to_field": "numbers",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "add": [
                      ""
                  ],
                  "field": "choices_list",
                  "to_field": "choices_list",
                  "type": "add_constant"
              },
              {
                  "field": "choices_list",
                  "separator": "\n",
                  "to_field": "choices",
                  "type": "join_str"
              },
              {
                  "field_to_field": {
                      "number": "label"
                  },
                  "type": "rename_fields"
              }
          ],
          "task": {
              "inputs": [
                  "choices",
                  "sentence1",
                  "numbers",
                  "topic",
                  "context"
              ],
              "metrics": [
                  "metrics.accuracy"
              ],
              "outputs": [
                  "label"
              ],
              "type": "form_task"
          },
          "templates": "templates.qa.multiple_choice.context_no_intro.all",
          "type": "task_card"
      }

References: :ref:`metrics.accuracy <metrics.accuracy>`, :ref:`templates.qa.multiple_choice.context_no_intro.all <templates.qa.multiple_choice.context_no_intro.all>`

|
|



.. _cards.belebele.ukr_Cyrl:

----------

ukr_Cyrl
""""""""

.. note:: ID: ``cards.belebele.ukr_Cyrl``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "default",
              "path": "facebook/belebele",
              "split": "ukr_Cyrl",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "mapper": {
                      "ukr_Cyrl": "test"
                  },
                  "type": "rename_splits"
              },
              {
                  "fields": {
                      "numbering": [
                          "A",
                          "B",
                          "C",
                          "D",
                          "E",
                          "F",
                          "G",
                          "H",
                          "I",
                          "J",
                          "K",
                          "L",
                          "M",
                          "N",
                          "O",
                          "P",
                          "Q",
                          "R",
                          "S",
                          "T",
                          "U",
                          "V",
                          "W",
                          "X",
                          "Y",
                          "Z"
                      ]
                  },
                  "type": "add_fields"
              },
              {
                  "fields": [
                      "mc_answer1",
                      "mc_answer2",
                      "mc_answer3",
                      "mc_answer4"
                  ],
                  "to_field": "choices",
                  "type": "list_field_values"
              },
              {
                  "mappers": {
                      "correct_answer_num": {
                          "1": "A",
                          "2": "B",
                          "3": "C",
                          "4": "D"
                      }
                  },
                  "type": "map_instance_values"
              },
              {
                  "index_of": "correct_answer_num",
                  "search_in": "numbering",
                  "to_field": "index",
                  "type": "index_of"
              },
              {
                  "field_to_field": {
                      "choices": "_choices",
                      "dialect": "topic",
                      "flores_passage": "context",
                      "index": "_index",
                      "numbering": "_numbering",
                      "question": "sentence1"
                  },
                  "type": "rename_fields"
              },
              {
                  "field": "_numbering",
                  "index": "_index",
                  "to_field": "number",
                  "type": "take_by_field"
              },
              {
                  "field": "_choices",
                  "index": "_index",
                  "to_field": "answer",
                  "type": "take_by_field"
              },
              {
                  "fields": [
                      "_numbering",
                      "_choices"
                  ],
                  "to_field": "choices",
                  "type": "zip_field_values"
              },
              {
                  "field": "choices/*",
                  "process_every_value": true,
                  "separator": ". ",
                  "to_field": "choices_list",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "field": "choices_list",
                  "index": "_index",
                  "to_field": "number_and_answer",
                  "type": "take_by_field"
              },
              {
                  "field": "choices/*/0",
                  "separator": ",",
                  "to_field": "numbers",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "add": [
                      ""
                  ],
                  "field": "choices_list",
                  "to_field": "choices_list",
                  "type": "add_constant"
              },
              {
                  "field": "choices_list",
                  "separator": "\n",
                  "to_field": "choices",
                  "type": "join_str"
              },
              {
                  "field_to_field": {
                      "number": "label"
                  },
                  "type": "rename_fields"
              }
          ],
          "task": {
              "inputs": [
                  "choices",
                  "sentence1",
                  "numbers",
                  "topic",
                  "context"
              ],
              "metrics": [
                  "metrics.accuracy"
              ],
              "outputs": [
                  "label"
              ],
              "type": "form_task"
          },
          "templates": "templates.qa.multiple_choice.context_no_intro.all",
          "type": "task_card"
      }

References: :ref:`metrics.accuracy <metrics.accuracy>`, :ref:`templates.qa.multiple_choice.context_no_intro.all <templates.qa.multiple_choice.context_no_intro.all>`

|
|



.. _cards.belebele.gaz_Latn:

----------

gaz_Latn
""""""""

.. note:: ID: ``cards.belebele.gaz_Latn``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "default",
              "path": "facebook/belebele",
              "split": "gaz_Latn",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "mapper": {
                      "gaz_Latn": "test"
                  },
                  "type": "rename_splits"
              },
              {
                  "fields": {
                      "numbering": [
                          "A",
                          "B",
                          "C",
                          "D",
                          "E",
                          "F",
                          "G",
                          "H",
                          "I",
                          "J",
                          "K",
                          "L",
                          "M",
                          "N",
                          "O",
                          "P",
                          "Q",
                          "R",
                          "S",
                          "T",
                          "U",
                          "V",
                          "W",
                          "X",
                          "Y",
                          "Z"
                      ]
                  },
                  "type": "add_fields"
              },
              {
                  "fields": [
                      "mc_answer1",
                      "mc_answer2",
                      "mc_answer3",
                      "mc_answer4"
                  ],
                  "to_field": "choices",
                  "type": "list_field_values"
              },
              {
                  "mappers": {
                      "correct_answer_num": {
                          "1": "A",
                          "2": "B",
                          "3": "C",
                          "4": "D"
                      }
                  },
                  "type": "map_instance_values"
              },
              {
                  "index_of": "correct_answer_num",
                  "search_in": "numbering",
                  "to_field": "index",
                  "type": "index_of"
              },
              {
                  "field_to_field": {
                      "choices": "_choices",
                      "dialect": "topic",
                      "flores_passage": "context",
                      "index": "_index",
                      "numbering": "_numbering",
                      "question": "sentence1"
                  },
                  "type": "rename_fields"
              },
              {
                  "field": "_numbering",
                  "index": "_index",
                  "to_field": "number",
                  "type": "take_by_field"
              },
              {
                  "field": "_choices",
                  "index": "_index",
                  "to_field": "answer",
                  "type": "take_by_field"
              },
              {
                  "fields": [
                      "_numbering",
                      "_choices"
                  ],
                  "to_field": "choices",
                  "type": "zip_field_values"
              },
              {
                  "field": "choices/*",
                  "process_every_value": true,
                  "separator": ". ",
                  "to_field": "choices_list",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "field": "choices_list",
                  "index": "_index",
                  "to_field": "number_and_answer",
                  "type": "take_by_field"
              },
              {
                  "field": "choices/*/0",
                  "separator": ",",
                  "to_field": "numbers",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "add": [
                      ""
                  ],
                  "field": "choices_list",
                  "to_field": "choices_list",
                  "type": "add_constant"
              },
              {
                  "field": "choices_list",
                  "separator": "\n",
                  "to_field": "choices",
                  "type": "join_str"
              },
              {
                  "field_to_field": {
                      "number": "label"
                  },
                  "type": "rename_fields"
              }
          ],
          "task": {
              "inputs": [
                  "choices",
                  "sentence1",
                  "numbers",
                  "topic",
                  "context"
              ],
              "metrics": [
                  "metrics.accuracy"
              ],
              "outputs": [
                  "label"
              ],
              "type": "form_task"
          },
          "templates": "templates.qa.multiple_choice.context_no_intro.all",
          "type": "task_card"
      }

References: :ref:`metrics.accuracy <metrics.accuracy>`, :ref:`templates.qa.multiple_choice.context_no_intro.all <templates.qa.multiple_choice.context_no_intro.all>`

|
|



.. _cards.belebele.tel_Telu:

----------

tel_Telu
""""""""

.. note:: ID: ``cards.belebele.tel_Telu``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "default",
              "path": "facebook/belebele",
              "split": "tel_Telu",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "mapper": {
                      "tel_Telu": "test"
                  },
                  "type": "rename_splits"
              },
              {
                  "fields": {
                      "numbering": [
                          "A",
                          "B",
                          "C",
                          "D",
                          "E",
                          "F",
                          "G",
                          "H",
                          "I",
                          "J",
                          "K",
                          "L",
                          "M",
                          "N",
                          "O",
                          "P",
                          "Q",
                          "R",
                          "S",
                          "T",
                          "U",
                          "V",
                          "W",
                          "X",
                          "Y",
                          "Z"
                      ]
                  },
                  "type": "add_fields"
              },
              {
                  "fields": [
                      "mc_answer1",
                      "mc_answer2",
                      "mc_answer3",
                      "mc_answer4"
                  ],
                  "to_field": "choices",
                  "type": "list_field_values"
              },
              {
                  "mappers": {
                      "correct_answer_num": {
                          "1": "A",
                          "2": "B",
                          "3": "C",
                          "4": "D"
                      }
                  },
                  "type": "map_instance_values"
              },
              {
                  "index_of": "correct_answer_num",
                  "search_in": "numbering",
                  "to_field": "index",
                  "type": "index_of"
              },
              {
                  "field_to_field": {
                      "choices": "_choices",
                      "dialect": "topic",
                      "flores_passage": "context",
                      "index": "_index",
                      "numbering": "_numbering",
                      "question": "sentence1"
                  },
                  "type": "rename_fields"
              },
              {
                  "field": "_numbering",
                  "index": "_index",
                  "to_field": "number",
                  "type": "take_by_field"
              },
              {
                  "field": "_choices",
                  "index": "_index",
                  "to_field": "answer",
                  "type": "take_by_field"
              },
              {
                  "fields": [
                      "_numbering",
                      "_choices"
                  ],
                  "to_field": "choices",
                  "type": "zip_field_values"
              },
              {
                  "field": "choices/*",
                  "process_every_value": true,
                  "separator": ". ",
                  "to_field": "choices_list",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "field": "choices_list",
                  "index": "_index",
                  "to_field": "number_and_answer",
                  "type": "take_by_field"
              },
              {
                  "field": "choices/*/0",
                  "separator": ",",
                  "to_field": "numbers",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "add": [
                      ""
                  ],
                  "field": "choices_list",
                  "to_field": "choices_list",
                  "type": "add_constant"
              },
              {
                  "field": "choices_list",
                  "separator": "\n",
                  "to_field": "choices",
                  "type": "join_str"
              },
              {
                  "field_to_field": {
                      "number": "label"
                  },
                  "type": "rename_fields"
              }
          ],
          "task": {
              "inputs": [
                  "choices",
                  "sentence1",
                  "numbers",
                  "topic",
                  "context"
              ],
              "metrics": [
                  "metrics.accuracy"
              ],
              "outputs": [
                  "label"
              ],
              "type": "form_task"
          },
          "templates": "templates.qa.multiple_choice.context_no_intro.all",
          "type": "task_card"
      }

References: :ref:`metrics.accuracy <metrics.accuracy>`, :ref:`templates.qa.multiple_choice.context_no_intro.all <templates.qa.multiple_choice.context_no_intro.all>`

|
|



.. _cards.belebele.tgl_Latn:

----------

tgl_Latn
""""""""

.. note:: ID: ``cards.belebele.tgl_Latn``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "default",
              "path": "facebook/belebele",
              "split": "tgl_Latn",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "mapper": {
                      "tgl_Latn": "test"
                  },
                  "type": "rename_splits"
              },
              {
                  "fields": {
                      "numbering": [
                          "A",
                          "B",
                          "C",
                          "D",
                          "E",
                          "F",
                          "G",
                          "H",
                          "I",
                          "J",
                          "K",
                          "L",
                          "M",
                          "N",
                          "O",
                          "P",
                          "Q",
                          "R",
                          "S",
                          "T",
                          "U",
                          "V",
                          "W",
                          "X",
                          "Y",
                          "Z"
                      ]
                  },
                  "type": "add_fields"
              },
              {
                  "fields": [
                      "mc_answer1",
                      "mc_answer2",
                      "mc_answer3",
                      "mc_answer4"
                  ],
                  "to_field": "choices",
                  "type": "list_field_values"
              },
              {
                  "mappers": {
                      "correct_answer_num": {
                          "1": "A",
                          "2": "B",
                          "3": "C",
                          "4": "D"
                      }
                  },
                  "type": "map_instance_values"
              },
              {
                  "index_of": "correct_answer_num",
                  "search_in": "numbering",
                  "to_field": "index",
                  "type": "index_of"
              },
              {
                  "field_to_field": {
                      "choices": "_choices",
                      "dialect": "topic",
                      "flores_passage": "context",
                      "index": "_index",
                      "numbering": "_numbering",
                      "question": "sentence1"
                  },
                  "type": "rename_fields"
              },
              {
                  "field": "_numbering",
                  "index": "_index",
                  "to_field": "number",
                  "type": "take_by_field"
              },
              {
                  "field": "_choices",
                  "index": "_index",
                  "to_field": "answer",
                  "type": "take_by_field"
              },
              {
                  "fields": [
                      "_numbering",
                      "_choices"
                  ],
                  "to_field": "choices",
                  "type": "zip_field_values"
              },
              {
                  "field": "choices/*",
                  "process_every_value": true,
                  "separator": ". ",
                  "to_field": "choices_list",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "field": "choices_list",
                  "index": "_index",
                  "to_field": "number_and_answer",
                  "type": "take_by_field"
              },
              {
                  "field": "choices/*/0",
                  "separator": ",",
                  "to_field": "numbers",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "add": [
                      ""
                  ],
                  "field": "choices_list",
                  "to_field": "choices_list",
                  "type": "add_constant"
              },
              {
                  "field": "choices_list",
                  "separator": "\n",
                  "to_field": "choices",
                  "type": "join_str"
              },
              {
                  "field_to_field": {
                      "number": "label"
                  },
                  "type": "rename_fields"
              }
          ],
          "task": {
              "inputs": [
                  "choices",
                  "sentence1",
                  "numbers",
                  "topic",
                  "context"
              ],
              "metrics": [
                  "metrics.accuracy"
              ],
              "outputs": [
                  "label"
              ],
              "type": "form_task"
          },
          "templates": "templates.qa.multiple_choice.context_no_intro.all",
          "type": "task_card"
      }

References: :ref:`metrics.accuracy <metrics.accuracy>`, :ref:`templates.qa.multiple_choice.context_no_intro.all <templates.qa.multiple_choice.context_no_intro.all>`

|
|



.. _cards.belebele.als_Latn:

----------

als_Latn
""""""""

.. note:: ID: ``cards.belebele.als_Latn``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "default",
              "path": "facebook/belebele",
              "split": "als_Latn",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "mapper": {
                      "als_Latn": "test"
                  },
                  "type": "rename_splits"
              },
              {
                  "fields": {
                      "numbering": [
                          "A",
                          "B",
                          "C",
                          "D",
                          "E",
                          "F",
                          "G",
                          "H",
                          "I",
                          "J",
                          "K",
                          "L",
                          "M",
                          "N",
                          "O",
                          "P",
                          "Q",
                          "R",
                          "S",
                          "T",
                          "U",
                          "V",
                          "W",
                          "X",
                          "Y",
                          "Z"
                      ]
                  },
                  "type": "add_fields"
              },
              {
                  "fields": [
                      "mc_answer1",
                      "mc_answer2",
                      "mc_answer3",
                      "mc_answer4"
                  ],
                  "to_field": "choices",
                  "type": "list_field_values"
              },
              {
                  "mappers": {
                      "correct_answer_num": {
                          "1": "A",
                          "2": "B",
                          "3": "C",
                          "4": "D"
                      }
                  },
                  "type": "map_instance_values"
              },
              {
                  "index_of": "correct_answer_num",
                  "search_in": "numbering",
                  "to_field": "index",
                  "type": "index_of"
              },
              {
                  "field_to_field": {
                      "choices": "_choices",
                      "dialect": "topic",
                      "flores_passage": "context",
                      "index": "_index",
                      "numbering": "_numbering",
                      "question": "sentence1"
                  },
                  "type": "rename_fields"
              },
              {
                  "field": "_numbering",
                  "index": "_index",
                  "to_field": "number",
                  "type": "take_by_field"
              },
              {
                  "field": "_choices",
                  "index": "_index",
                  "to_field": "answer",
                  "type": "take_by_field"
              },
              {
                  "fields": [
                      "_numbering",
                      "_choices"
                  ],
                  "to_field": "choices",
                  "type": "zip_field_values"
              },
              {
                  "field": "choices/*",
                  "process_every_value": true,
                  "separator": ". ",
                  "to_field": "choices_list",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "field": "choices_list",
                  "index": "_index",
                  "to_field": "number_and_answer",
                  "type": "take_by_field"
              },
              {
                  "field": "choices/*/0",
                  "separator": ",",
                  "to_field": "numbers",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "add": [
                      ""
                  ],
                  "field": "choices_list",
                  "to_field": "choices_list",
                  "type": "add_constant"
              },
              {
                  "field": "choices_list",
                  "separator": "\n",
                  "to_field": "choices",
                  "type": "join_str"
              },
              {
                  "field_to_field": {
                      "number": "label"
                  },
                  "type": "rename_fields"
              }
          ],
          "task": {
              "inputs": [
                  "choices",
                  "sentence1",
                  "numbers",
                  "topic",
                  "context"
              ],
              "metrics": [
                  "metrics.accuracy"
              ],
              "outputs": [
                  "label"
              ],
              "type": "form_task"
          },
          "templates": "templates.qa.multiple_choice.context_no_intro.all",
          "type": "task_card"
      }

References: :ref:`metrics.accuracy <metrics.accuracy>`, :ref:`templates.qa.multiple_choice.context_no_intro.all <templates.qa.multiple_choice.context_no_intro.all>`

|
|



.. _cards.belebele.deu_Latn:

----------

deu_Latn
""""""""

.. note:: ID: ``cards.belebele.deu_Latn``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "default",
              "path": "facebook/belebele",
              "split": "deu_Latn",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "mapper": {
                      "deu_Latn": "test"
                  },
                  "type": "rename_splits"
              },
              {
                  "fields": {
                      "numbering": [
                          "A",
                          "B",
                          "C",
                          "D",
                          "E",
                          "F",
                          "G",
                          "H",
                          "I",
                          "J",
                          "K",
                          "L",
                          "M",
                          "N",
                          "O",
                          "P",
                          "Q",
                          "R",
                          "S",
                          "T",
                          "U",
                          "V",
                          "W",
                          "X",
                          "Y",
                          "Z"
                      ]
                  },
                  "type": "add_fields"
              },
              {
                  "fields": [
                      "mc_answer1",
                      "mc_answer2",
                      "mc_answer3",
                      "mc_answer4"
                  ],
                  "to_field": "choices",
                  "type": "list_field_values"
              },
              {
                  "mappers": {
                      "correct_answer_num": {
                          "1": "A",
                          "2": "B",
                          "3": "C",
                          "4": "D"
                      }
                  },
                  "type": "map_instance_values"
              },
              {
                  "index_of": "correct_answer_num",
                  "search_in": "numbering",
                  "to_field": "index",
                  "type": "index_of"
              },
              {
                  "field_to_field": {
                      "choices": "_choices",
                      "dialect": "topic",
                      "flores_passage": "context",
                      "index": "_index",
                      "numbering": "_numbering",
                      "question": "sentence1"
                  },
                  "type": "rename_fields"
              },
              {
                  "field": "_numbering",
                  "index": "_index",
                  "to_field": "number",
                  "type": "take_by_field"
              },
              {
                  "field": "_choices",
                  "index": "_index",
                  "to_field": "answer",
                  "type": "take_by_field"
              },
              {
                  "fields": [
                      "_numbering",
                      "_choices"
                  ],
                  "to_field": "choices",
                  "type": "zip_field_values"
              },
              {
                  "field": "choices/*",
                  "process_every_value": true,
                  "separator": ". ",
                  "to_field": "choices_list",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "field": "choices_list",
                  "index": "_index",
                  "to_field": "number_and_answer",
                  "type": "take_by_field"
              },
              {
                  "field": "choices/*/0",
                  "separator": ",",
                  "to_field": "numbers",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "add": [
                      ""
                  ],
                  "field": "choices_list",
                  "to_field": "choices_list",
                  "type": "add_constant"
              },
              {
                  "field": "choices_list",
                  "separator": "\n",
                  "to_field": "choices",
                  "type": "join_str"
              },
              {
                  "field_to_field": {
                      "number": "label"
                  },
                  "type": "rename_fields"
              }
          ],
          "task": {
              "inputs": [
                  "choices",
                  "sentence1",
                  "numbers",
                  "topic",
                  "context"
              ],
              "metrics": [
                  "metrics.accuracy"
              ],
              "outputs": [
                  "label"
              ],
              "type": "form_task"
          },
          "templates": "templates.qa.multiple_choice.context_no_intro.all",
          "type": "task_card"
      }

References: :ref:`metrics.accuracy <metrics.accuracy>`, :ref:`templates.qa.multiple_choice.context_no_intro.all <templates.qa.multiple_choice.context_no_intro.all>`

|
|



.. _cards.belebele.swe_Latn:

----------

swe_Latn
""""""""

.. note:: ID: ``cards.belebele.swe_Latn``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "default",
              "path": "facebook/belebele",
              "split": "swe_Latn",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "mapper": {
                      "swe_Latn": "test"
                  },
                  "type": "rename_splits"
              },
              {
                  "fields": {
                      "numbering": [
                          "A",
                          "B",
                          "C",
                          "D",
                          "E",
                          "F",
                          "G",
                          "H",
                          "I",
                          "J",
                          "K",
                          "L",
                          "M",
                          "N",
                          "O",
                          "P",
                          "Q",
                          "R",
                          "S",
                          "T",
                          "U",
                          "V",
                          "W",
                          "X",
                          "Y",
                          "Z"
                      ]
                  },
                  "type": "add_fields"
              },
              {
                  "fields": [
                      "mc_answer1",
                      "mc_answer2",
                      "mc_answer3",
                      "mc_answer4"
                  ],
                  "to_field": "choices",
                  "type": "list_field_values"
              },
              {
                  "mappers": {
                      "correct_answer_num": {
                          "1": "A",
                          "2": "B",
                          "3": "C",
                          "4": "D"
                      }
                  },
                  "type": "map_instance_values"
              },
              {
                  "index_of": "correct_answer_num",
                  "search_in": "numbering",
                  "to_field": "index",
                  "type": "index_of"
              },
              {
                  "field_to_field": {
                      "choices": "_choices",
                      "dialect": "topic",
                      "flores_passage": "context",
                      "index": "_index",
                      "numbering": "_numbering",
                      "question": "sentence1"
                  },
                  "type": "rename_fields"
              },
              {
                  "field": "_numbering",
                  "index": "_index",
                  "to_field": "number",
                  "type": "take_by_field"
              },
              {
                  "field": "_choices",
                  "index": "_index",
                  "to_field": "answer",
                  "type": "take_by_field"
              },
              {
                  "fields": [
                      "_numbering",
                      "_choices"
                  ],
                  "to_field": "choices",
                  "type": "zip_field_values"
              },
              {
                  "field": "choices/*",
                  "process_every_value": true,
                  "separator": ". ",
                  "to_field": "choices_list",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "field": "choices_list",
                  "index": "_index",
                  "to_field": "number_and_answer",
                  "type": "take_by_field"
              },
              {
                  "field": "choices/*/0",
                  "separator": ",",
                  "to_field": "numbers",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "add": [
                      ""
                  ],
                  "field": "choices_list",
                  "to_field": "choices_list",
                  "type": "add_constant"
              },
              {
                  "field": "choices_list",
                  "separator": "\n",
                  "to_field": "choices",
                  "type": "join_str"
              },
              {
                  "field_to_field": {
                      "number": "label"
                  },
                  "type": "rename_fields"
              }
          ],
          "task": {
              "inputs": [
                  "choices",
                  "sentence1",
                  "numbers",
                  "topic",
                  "context"
              ],
              "metrics": [
                  "metrics.accuracy"
              ],
              "outputs": [
                  "label"
              ],
              "type": "form_task"
          },
          "templates": "templates.qa.multiple_choice.context_no_intro.all",
          "type": "task_card"
      }

References: :ref:`metrics.accuracy <metrics.accuracy>`, :ref:`templates.qa.multiple_choice.context_no_intro.all <templates.qa.multiple_choice.context_no_intro.all>`

|
|



.. _cards.belebele.rus_Cyrl:

----------

rus_Cyrl
""""""""

.. note:: ID: ``cards.belebele.rus_Cyrl``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "default",
              "path": "facebook/belebele",
              "split": "rus_Cyrl",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "mapper": {
                      "rus_Cyrl": "test"
                  },
                  "type": "rename_splits"
              },
              {
                  "fields": {
                      "numbering": [
                          "A",
                          "B",
                          "C",
                          "D",
                          "E",
                          "F",
                          "G",
                          "H",
                          "I",
                          "J",
                          "K",
                          "L",
                          "M",
                          "N",
                          "O",
                          "P",
                          "Q",
                          "R",
                          "S",
                          "T",
                          "U",
                          "V",
                          "W",
                          "X",
                          "Y",
                          "Z"
                      ]
                  },
                  "type": "add_fields"
              },
              {
                  "fields": [
                      "mc_answer1",
                      "mc_answer2",
                      "mc_answer3",
                      "mc_answer4"
                  ],
                  "to_field": "choices",
                  "type": "list_field_values"
              },
              {
                  "mappers": {
                      "correct_answer_num": {
                          "1": "A",
                          "2": "B",
                          "3": "C",
                          "4": "D"
                      }
                  },
                  "type": "map_instance_values"
              },
              {
                  "index_of": "correct_answer_num",
                  "search_in": "numbering",
                  "to_field": "index",
                  "type": "index_of"
              },
              {
                  "field_to_field": {
                      "choices": "_choices",
                      "dialect": "topic",
                      "flores_passage": "context",
                      "index": "_index",
                      "numbering": "_numbering",
                      "question": "sentence1"
                  },
                  "type": "rename_fields"
              },
              {
                  "field": "_numbering",
                  "index": "_index",
                  "to_field": "number",
                  "type": "take_by_field"
              },
              {
                  "field": "_choices",
                  "index": "_index",
                  "to_field": "answer",
                  "type": "take_by_field"
              },
              {
                  "fields": [
                      "_numbering",
                      "_choices"
                  ],
                  "to_field": "choices",
                  "type": "zip_field_values"
              },
              {
                  "field": "choices/*",
                  "process_every_value": true,
                  "separator": ". ",
                  "to_field": "choices_list",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "field": "choices_list",
                  "index": "_index",
                  "to_field": "number_and_answer",
                  "type": "take_by_field"
              },
              {
                  "field": "choices/*/0",
                  "separator": ",",
                  "to_field": "numbers",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "add": [
                      ""
                  ],
                  "field": "choices_list",
                  "to_field": "choices_list",
                  "type": "add_constant"
              },
              {
                  "field": "choices_list",
                  "separator": "\n",
                  "to_field": "choices",
                  "type": "join_str"
              },
              {
                  "field_to_field": {
                      "number": "label"
                  },
                  "type": "rename_fields"
              }
          ],
          "task": {
              "inputs": [
                  "choices",
                  "sentence1",
                  "numbers",
                  "topic",
                  "context"
              ],
              "metrics": [
                  "metrics.accuracy"
              ],
              "outputs": [
                  "label"
              ],
              "type": "form_task"
          },
          "templates": "templates.qa.multiple_choice.context_no_intro.all",
          "type": "task_card"
      }

References: :ref:`metrics.accuracy <metrics.accuracy>`, :ref:`templates.qa.multiple_choice.context_no_intro.all <templates.qa.multiple_choice.context_no_intro.all>`

|
|



.. _cards.belebele.nld_Latn:

----------

nld_Latn
""""""""

.. note:: ID: ``cards.belebele.nld_Latn``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "default",
              "path": "facebook/belebele",
              "split": "nld_Latn",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "mapper": {
                      "nld_Latn": "test"
                  },
                  "type": "rename_splits"
              },
              {
                  "fields": {
                      "numbering": [
                          "A",
                          "B",
                          "C",
                          "D",
                          "E",
                          "F",
                          "G",
                          "H",
                          "I",
                          "J",
                          "K",
                          "L",
                          "M",
                          "N",
                          "O",
                          "P",
                          "Q",
                          "R",
                          "S",
                          "T",
                          "U",
                          "V",
                          "W",
                          "X",
                          "Y",
                          "Z"
                      ]
                  },
                  "type": "add_fields"
              },
              {
                  "fields": [
                      "mc_answer1",
                      "mc_answer2",
                      "mc_answer3",
                      "mc_answer4"
                  ],
                  "to_field": "choices",
                  "type": "list_field_values"
              },
              {
                  "mappers": {
                      "correct_answer_num": {
                          "1": "A",
                          "2": "B",
                          "3": "C",
                          "4": "D"
                      }
                  },
                  "type": "map_instance_values"
              },
              {
                  "index_of": "correct_answer_num",
                  "search_in": "numbering",
                  "to_field": "index",
                  "type": "index_of"
              },
              {
                  "field_to_field": {
                      "choices": "_choices",
                      "dialect": "topic",
                      "flores_passage": "context",
                      "index": "_index",
                      "numbering": "_numbering",
                      "question": "sentence1"
                  },
                  "type": "rename_fields"
              },
              {
                  "field": "_numbering",
                  "index": "_index",
                  "to_field": "number",
                  "type": "take_by_field"
              },
              {
                  "field": "_choices",
                  "index": "_index",
                  "to_field": "answer",
                  "type": "take_by_field"
              },
              {
                  "fields": [
                      "_numbering",
                      "_choices"
                  ],
                  "to_field": "choices",
                  "type": "zip_field_values"
              },
              {
                  "field": "choices/*",
                  "process_every_value": true,
                  "separator": ". ",
                  "to_field": "choices_list",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "field": "choices_list",
                  "index": "_index",
                  "to_field": "number_and_answer",
                  "type": "take_by_field"
              },
              {
                  "field": "choices/*/0",
                  "separator": ",",
                  "to_field": "numbers",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "add": [
                      ""
                  ],
                  "field": "choices_list",
                  "to_field": "choices_list",
                  "type": "add_constant"
              },
              {
                  "field": "choices_list",
                  "separator": "\n",
                  "to_field": "choices",
                  "type": "join_str"
              },
              {
                  "field_to_field": {
                      "number": "label"
                  },
                  "type": "rename_fields"
              }
          ],
          "task": {
              "inputs": [
                  "choices",
                  "sentence1",
                  "numbers",
                  "topic",
                  "context"
              ],
              "metrics": [
                  "metrics.accuracy"
              ],
              "outputs": [
                  "label"
              ],
              "type": "form_task"
          },
          "templates": "templates.qa.multiple_choice.context_no_intro.all",
          "type": "task_card"
      }

References: :ref:`metrics.accuracy <metrics.accuracy>`, :ref:`templates.qa.multiple_choice.context_no_intro.all <templates.qa.multiple_choice.context_no_intro.all>`

|
|



.. _cards.belebele.grn_Latn:

----------

grn_Latn
""""""""

.. note:: ID: ``cards.belebele.grn_Latn``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "default",
              "path": "facebook/belebele",
              "split": "grn_Latn",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "mapper": {
                      "grn_Latn": "test"
                  },
                  "type": "rename_splits"
              },
              {
                  "fields": {
                      "numbering": [
                          "A",
                          "B",
                          "C",
                          "D",
                          "E",
                          "F",
                          "G",
                          "H",
                          "I",
                          "J",
                          "K",
                          "L",
                          "M",
                          "N",
                          "O",
                          "P",
                          "Q",
                          "R",
                          "S",
                          "T",
                          "U",
                          "V",
                          "W",
                          "X",
                          "Y",
                          "Z"
                      ]
                  },
                  "type": "add_fields"
              },
              {
                  "fields": [
                      "mc_answer1",
                      "mc_answer2",
                      "mc_answer3",
                      "mc_answer4"
                  ],
                  "to_field": "choices",
                  "type": "list_field_values"
              },
              {
                  "mappers": {
                      "correct_answer_num": {
                          "1": "A",
                          "2": "B",
                          "3": "C",
                          "4": "D"
                      }
                  },
                  "type": "map_instance_values"
              },
              {
                  "index_of": "correct_answer_num",
                  "search_in": "numbering",
                  "to_field": "index",
                  "type": "index_of"
              },
              {
                  "field_to_field": {
                      "choices": "_choices",
                      "dialect": "topic",
                      "flores_passage": "context",
                      "index": "_index",
                      "numbering": "_numbering",
                      "question": "sentence1"
                  },
                  "type": "rename_fields"
              },
              {
                  "field": "_numbering",
                  "index": "_index",
                  "to_field": "number",
                  "type": "take_by_field"
              },
              {
                  "field": "_choices",
                  "index": "_index",
                  "to_field": "answer",
                  "type": "take_by_field"
              },
              {
                  "fields": [
                      "_numbering",
                      "_choices"
                  ],
                  "to_field": "choices",
                  "type": "zip_field_values"
              },
              {
                  "field": "choices/*",
                  "process_every_value": true,
                  "separator": ". ",
                  "to_field": "choices_list",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "field": "choices_list",
                  "index": "_index",
                  "to_field": "number_and_answer",
                  "type": "take_by_field"
              },
              {
                  "field": "choices/*/0",
                  "separator": ",",
                  "to_field": "numbers",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "add": [
                      ""
                  ],
                  "field": "choices_list",
                  "to_field": "choices_list",
                  "type": "add_constant"
              },
              {
                  "field": "choices_list",
                  "separator": "\n",
                  "to_field": "choices",
                  "type": "join_str"
              },
              {
                  "field_to_field": {
                      "number": "label"
                  },
                  "type": "rename_fields"
              }
          ],
          "task": {
              "inputs": [
                  "choices",
                  "sentence1",
                  "numbers",
                  "topic",
                  "context"
              ],
              "metrics": [
                  "metrics.accuracy"
              ],
              "outputs": [
                  "label"
              ],
              "type": "form_task"
          },
          "templates": "templates.qa.multiple_choice.context_no_intro.all",
          "type": "task_card"
      }

References: :ref:`metrics.accuracy <metrics.accuracy>`, :ref:`templates.qa.multiple_choice.context_no_intro.all <templates.qa.multiple_choice.context_no_intro.all>`

|
|



.. _cards.belebele.yor_Latn:

----------

yor_Latn
""""""""

.. note:: ID: ``cards.belebele.yor_Latn``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "default",
              "path": "facebook/belebele",
              "split": "yor_Latn",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "mapper": {
                      "yor_Latn": "test"
                  },
                  "type": "rename_splits"
              },
              {
                  "fields": {
                      "numbering": [
                          "A",
                          "B",
                          "C",
                          "D",
                          "E",
                          "F",
                          "G",
                          "H",
                          "I",
                          "J",
                          "K",
                          "L",
                          "M",
                          "N",
                          "O",
                          "P",
                          "Q",
                          "R",
                          "S",
                          "T",
                          "U",
                          "V",
                          "W",
                          "X",
                          "Y",
                          "Z"
                      ]
                  },
                  "type": "add_fields"
              },
              {
                  "fields": [
                      "mc_answer1",
                      "mc_answer2",
                      "mc_answer3",
                      "mc_answer4"
                  ],
                  "to_field": "choices",
                  "type": "list_field_values"
              },
              {
                  "mappers": {
                      "correct_answer_num": {
                          "1": "A",
                          "2": "B",
                          "3": "C",
                          "4": "D"
                      }
                  },
                  "type": "map_instance_values"
              },
              {
                  "index_of": "correct_answer_num",
                  "search_in": "numbering",
                  "to_field": "index",
                  "type": "index_of"
              },
              {
                  "field_to_field": {
                      "choices": "_choices",
                      "dialect": "topic",
                      "flores_passage": "context",
                      "index": "_index",
                      "numbering": "_numbering",
                      "question": "sentence1"
                  },
                  "type": "rename_fields"
              },
              {
                  "field": "_numbering",
                  "index": "_index",
                  "to_field": "number",
                  "type": "take_by_field"
              },
              {
                  "field": "_choices",
                  "index": "_index",
                  "to_field": "answer",
                  "type": "take_by_field"
              },
              {
                  "fields": [
                      "_numbering",
                      "_choices"
                  ],
                  "to_field": "choices",
                  "type": "zip_field_values"
              },
              {
                  "field": "choices/*",
                  "process_every_value": true,
                  "separator": ". ",
                  "to_field": "choices_list",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "field": "choices_list",
                  "index": "_index",
                  "to_field": "number_and_answer",
                  "type": "take_by_field"
              },
              {
                  "field": "choices/*/0",
                  "separator": ",",
                  "to_field": "numbers",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "add": [
                      ""
                  ],
                  "field": "choices_list",
                  "to_field": "choices_list",
                  "type": "add_constant"
              },
              {
                  "field": "choices_list",
                  "separator": "\n",
                  "to_field": "choices",
                  "type": "join_str"
              },
              {
                  "field_to_field": {
                      "number": "label"
                  },
                  "type": "rename_fields"
              }
          ],
          "task": {
              "inputs": [
                  "choices",
                  "sentence1",
                  "numbers",
                  "topic",
                  "context"
              ],
              "metrics": [
                  "metrics.accuracy"
              ],
              "outputs": [
                  "label"
              ],
              "type": "form_task"
          },
          "templates": "templates.qa.multiple_choice.context_no_intro.all",
          "type": "task_card"
      }

References: :ref:`metrics.accuracy <metrics.accuracy>`, :ref:`templates.qa.multiple_choice.context_no_intro.all <templates.qa.multiple_choice.context_no_intro.all>`

|
|



.. _cards.belebele.khm_Khmr:

----------

khm_Khmr
""""""""

.. note:: ID: ``cards.belebele.khm_Khmr``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "default",
              "path": "facebook/belebele",
              "split": "khm_Khmr",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "mapper": {
                      "khm_Khmr": "test"
                  },
                  "type": "rename_splits"
              },
              {
                  "fields": {
                      "numbering": [
                          "A",
                          "B",
                          "C",
                          "D",
                          "E",
                          "F",
                          "G",
                          "H",
                          "I",
                          "J",
                          "K",
                          "L",
                          "M",
                          "N",
                          "O",
                          "P",
                          "Q",
                          "R",
                          "S",
                          "T",
                          "U",
                          "V",
                          "W",
                          "X",
                          "Y",
                          "Z"
                      ]
                  },
                  "type": "add_fields"
              },
              {
                  "fields": [
                      "mc_answer1",
                      "mc_answer2",
                      "mc_answer3",
                      "mc_answer4"
                  ],
                  "to_field": "choices",
                  "type": "list_field_values"
              },
              {
                  "mappers": {
                      "correct_answer_num": {
                          "1": "A",
                          "2": "B",
                          "3": "C",
                          "4": "D"
                      }
                  },
                  "type": "map_instance_values"
              },
              {
                  "index_of": "correct_answer_num",
                  "search_in": "numbering",
                  "to_field": "index",
                  "type": "index_of"
              },
              {
                  "field_to_field": {
                      "choices": "_choices",
                      "dialect": "topic",
                      "flores_passage": "context",
                      "index": "_index",
                      "numbering": "_numbering",
                      "question": "sentence1"
                  },
                  "type": "rename_fields"
              },
              {
                  "field": "_numbering",
                  "index": "_index",
                  "to_field": "number",
                  "type": "take_by_field"
              },
              {
                  "field": "_choices",
                  "index": "_index",
                  "to_field": "answer",
                  "type": "take_by_field"
              },
              {
                  "fields": [
                      "_numbering",
                      "_choices"
                  ],
                  "to_field": "choices",
                  "type": "zip_field_values"
              },
              {
                  "field": "choices/*",
                  "process_every_value": true,
                  "separator": ". ",
                  "to_field": "choices_list",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "field": "choices_list",
                  "index": "_index",
                  "to_field": "number_and_answer",
                  "type": "take_by_field"
              },
              {
                  "field": "choices/*/0",
                  "separator": ",",
                  "to_field": "numbers",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "add": [
                      ""
                  ],
                  "field": "choices_list",
                  "to_field": "choices_list",
                  "type": "add_constant"
              },
              {
                  "field": "choices_list",
                  "separator": "\n",
                  "to_field": "choices",
                  "type": "join_str"
              },
              {
                  "field_to_field": {
                      "number": "label"
                  },
                  "type": "rename_fields"
              }
          ],
          "task": {
              "inputs": [
                  "choices",
                  "sentence1",
                  "numbers",
                  "topic",
                  "context"
              ],
              "metrics": [
                  "metrics.accuracy"
              ],
              "outputs": [
                  "label"
              ],
              "type": "form_task"
          },
          "templates": "templates.qa.multiple_choice.context_no_intro.all",
          "type": "task_card"
      }

References: :ref:`metrics.accuracy <metrics.accuracy>`, :ref:`templates.qa.multiple_choice.context_no_intro.all <templates.qa.multiple_choice.context_no_intro.all>`

|
|



.. _cards.belebele.sna_Latn:

----------

sna_Latn
""""""""

.. note:: ID: ``cards.belebele.sna_Latn``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "default",
              "path": "facebook/belebele",
              "split": "sna_Latn",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "mapper": {
                      "sna_Latn": "test"
                  },
                  "type": "rename_splits"
              },
              {
                  "fields": {
                      "numbering": [
                          "A",
                          "B",
                          "C",
                          "D",
                          "E",
                          "F",
                          "G",
                          "H",
                          "I",
                          "J",
                          "K",
                          "L",
                          "M",
                          "N",
                          "O",
                          "P",
                          "Q",
                          "R",
                          "S",
                          "T",
                          "U",
                          "V",
                          "W",
                          "X",
                          "Y",
                          "Z"
                      ]
                  },
                  "type": "add_fields"
              },
              {
                  "fields": [
                      "mc_answer1",
                      "mc_answer2",
                      "mc_answer3",
                      "mc_answer4"
                  ],
                  "to_field": "choices",
                  "type": "list_field_values"
              },
              {
                  "mappers": {
                      "correct_answer_num": {
                          "1": "A",
                          "2": "B",
                          "3": "C",
                          "4": "D"
                      }
                  },
                  "type": "map_instance_values"
              },
              {
                  "index_of": "correct_answer_num",
                  "search_in": "numbering",
                  "to_field": "index",
                  "type": "index_of"
              },
              {
                  "field_to_field": {
                      "choices": "_choices",
                      "dialect": "topic",
                      "flores_passage": "context",
                      "index": "_index",
                      "numbering": "_numbering",
                      "question": "sentence1"
                  },
                  "type": "rename_fields"
              },
              {
                  "field": "_numbering",
                  "index": "_index",
                  "to_field": "number",
                  "type": "take_by_field"
              },
              {
                  "field": "_choices",
                  "index": "_index",
                  "to_field": "answer",
                  "type": "take_by_field"
              },
              {
                  "fields": [
                      "_numbering",
                      "_choices"
                  ],
                  "to_field": "choices",
                  "type": "zip_field_values"
              },
              {
                  "field": "choices/*",
                  "process_every_value": true,
                  "separator": ". ",
                  "to_field": "choices_list",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "field": "choices_list",
                  "index": "_index",
                  "to_field": "number_and_answer",
                  "type": "take_by_field"
              },
              {
                  "field": "choices/*/0",
                  "separator": ",",
                  "to_field": "numbers",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "add": [
                      ""
                  ],
                  "field": "choices_list",
                  "to_field": "choices_list",
                  "type": "add_constant"
              },
              {
                  "field": "choices_list",
                  "separator": "\n",
                  "to_field": "choices",
                  "type": "join_str"
              },
              {
                  "field_to_field": {
                      "number": "label"
                  },
                  "type": "rename_fields"
              }
          ],
          "task": {
              "inputs": [
                  "choices",
                  "sentence1",
                  "numbers",
                  "topic",
                  "context"
              ],
              "metrics": [
                  "metrics.accuracy"
              ],
              "outputs": [
                  "label"
              ],
              "type": "form_task"
          },
          "templates": "templates.qa.multiple_choice.context_no_intro.all",
          "type": "task_card"
      }

References: :ref:`metrics.accuracy <metrics.accuracy>`, :ref:`templates.qa.multiple_choice.context_no_intro.all <templates.qa.multiple_choice.context_no_intro.all>`

|
|



.. _cards.belebele.mya_Mymr:

----------

mya_Mymr
""""""""

.. note:: ID: ``cards.belebele.mya_Mymr``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "default",
              "path": "facebook/belebele",
              "split": "mya_Mymr",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "mapper": {
                      "mya_Mymr": "test"
                  },
                  "type": "rename_splits"
              },
              {
                  "fields": {
                      "numbering": [
                          "A",
                          "B",
                          "C",
                          "D",
                          "E",
                          "F",
                          "G",
                          "H",
                          "I",
                          "J",
                          "K",
                          "L",
                          "M",
                          "N",
                          "O",
                          "P",
                          "Q",
                          "R",
                          "S",
                          "T",
                          "U",
                          "V",
                          "W",
                          "X",
                          "Y",
                          "Z"
                      ]
                  },
                  "type": "add_fields"
              },
              {
                  "fields": [
                      "mc_answer1",
                      "mc_answer2",
                      "mc_answer3",
                      "mc_answer4"
                  ],
                  "to_field": "choices",
                  "type": "list_field_values"
              },
              {
                  "mappers": {
                      "correct_answer_num": {
                          "1": "A",
                          "2": "B",
                          "3": "C",
                          "4": "D"
                      }
                  },
                  "type": "map_instance_values"
              },
              {
                  "index_of": "correct_answer_num",
                  "search_in": "numbering",
                  "to_field": "index",
                  "type": "index_of"
              },
              {
                  "field_to_field": {
                      "choices": "_choices",
                      "dialect": "topic",
                      "flores_passage": "context",
                      "index": "_index",
                      "numbering": "_numbering",
                      "question": "sentence1"
                  },
                  "type": "rename_fields"
              },
              {
                  "field": "_numbering",
                  "index": "_index",
                  "to_field": "number",
                  "type": "take_by_field"
              },
              {
                  "field": "_choices",
                  "index": "_index",
                  "to_field": "answer",
                  "type": "take_by_field"
              },
              {
                  "fields": [
                      "_numbering",
                      "_choices"
                  ],
                  "to_field": "choices",
                  "type": "zip_field_values"
              },
              {
                  "field": "choices/*",
                  "process_every_value": true,
                  "separator": ". ",
                  "to_field": "choices_list",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "field": "choices_list",
                  "index": "_index",
                  "to_field": "number_and_answer",
                  "type": "take_by_field"
              },
              {
                  "field": "choices/*/0",
                  "separator": ",",
                  "to_field": "numbers",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "add": [
                      ""
                  ],
                  "field": "choices_list",
                  "to_field": "choices_list",
                  "type": "add_constant"
              },
              {
                  "field": "choices_list",
                  "separator": "\n",
                  "to_field": "choices",
                  "type": "join_str"
              },
              {
                  "field_to_field": {
                      "number": "label"
                  },
                  "type": "rename_fields"
              }
          ],
          "task": {
              "inputs": [
                  "choices",
                  "sentence1",
                  "numbers",
                  "topic",
                  "context"
              ],
              "metrics": [
                  "metrics.accuracy"
              ],
              "outputs": [
                  "label"
              ],
              "type": "form_task"
          },
          "templates": "templates.qa.multiple_choice.context_no_intro.all",
          "type": "task_card"
      }

References: :ref:`metrics.accuracy <metrics.accuracy>`, :ref:`templates.qa.multiple_choice.context_no_intro.all <templates.qa.multiple_choice.context_no_intro.all>`

|
|



.. _cards.belebele.srp_Cyrl:

----------

srp_Cyrl
""""""""

.. note:: ID: ``cards.belebele.srp_Cyrl``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "default",
              "path": "facebook/belebele",
              "split": "srp_Cyrl",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "mapper": {
                      "srp_Cyrl": "test"
                  },
                  "type": "rename_splits"
              },
              {
                  "fields": {
                      "numbering": [
                          "A",
                          "B",
                          "C",
                          "D",
                          "E",
                          "F",
                          "G",
                          "H",
                          "I",
                          "J",
                          "K",
                          "L",
                          "M",
                          "N",
                          "O",
                          "P",
                          "Q",
                          "R",
                          "S",
                          "T",
                          "U",
                          "V",
                          "W",
                          "X",
                          "Y",
                          "Z"
                      ]
                  },
                  "type": "add_fields"
              },
              {
                  "fields": [
                      "mc_answer1",
                      "mc_answer2",
                      "mc_answer3",
                      "mc_answer4"
                  ],
                  "to_field": "choices",
                  "type": "list_field_values"
              },
              {
                  "mappers": {
                      "correct_answer_num": {
                          "1": "A",
                          "2": "B",
                          "3": "C",
                          "4": "D"
                      }
                  },
                  "type": "map_instance_values"
              },
              {
                  "index_of": "correct_answer_num",
                  "search_in": "numbering",
                  "to_field": "index",
                  "type": "index_of"
              },
              {
                  "field_to_field": {
                      "choices": "_choices",
                      "dialect": "topic",
                      "flores_passage": "context",
                      "index": "_index",
                      "numbering": "_numbering",
                      "question": "sentence1"
                  },
                  "type": "rename_fields"
              },
              {
                  "field": "_numbering",
                  "index": "_index",
                  "to_field": "number",
                  "type": "take_by_field"
              },
              {
                  "field": "_choices",
                  "index": "_index",
                  "to_field": "answer",
                  "type": "take_by_field"
              },
              {
                  "fields": [
                      "_numbering",
                      "_choices"
                  ],
                  "to_field": "choices",
                  "type": "zip_field_values"
              },
              {
                  "field": "choices/*",
                  "process_every_value": true,
                  "separator": ". ",
                  "to_field": "choices_list",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "field": "choices_list",
                  "index": "_index",
                  "to_field": "number_and_answer",
                  "type": "take_by_field"
              },
              {
                  "field": "choices/*/0",
                  "separator": ",",
                  "to_field": "numbers",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "add": [
                      ""
                  ],
                  "field": "choices_list",
                  "to_field": "choices_list",
                  "type": "add_constant"
              },
              {
                  "field": "choices_list",
                  "separator": "\n",
                  "to_field": "choices",
                  "type": "join_str"
              },
              {
                  "field_to_field": {
                      "number": "label"
                  },
                  "type": "rename_fields"
              }
          ],
          "task": {
              "inputs": [
                  "choices",
                  "sentence1",
                  "numbers",
                  "topic",
                  "context"
              ],
              "metrics": [
                  "metrics.accuracy"
              ],
              "outputs": [
                  "label"
              ],
              "type": "form_task"
          },
          "templates": "templates.qa.multiple_choice.context_no_intro.all",
          "type": "task_card"
      }

References: :ref:`metrics.accuracy <metrics.accuracy>`, :ref:`templates.qa.multiple_choice.context_no_intro.all <templates.qa.multiple_choice.context_no_intro.all>`

|
|



.. _cards.belebele.lin_Latn:

----------

lin_Latn
""""""""

.. note:: ID: ``cards.belebele.lin_Latn``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "default",
              "path": "facebook/belebele",
              "split": "lin_Latn",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "mapper": {
                      "lin_Latn": "test"
                  },
                  "type": "rename_splits"
              },
              {
                  "fields": {
                      "numbering": [
                          "A",
                          "B",
                          "C",
                          "D",
                          "E",
                          "F",
                          "G",
                          "H",
                          "I",
                          "J",
                          "K",
                          "L",
                          "M",
                          "N",
                          "O",
                          "P",
                          "Q",
                          "R",
                          "S",
                          "T",
                          "U",
                          "V",
                          "W",
                          "X",
                          "Y",
                          "Z"
                      ]
                  },
                  "type": "add_fields"
              },
              {
                  "fields": [
                      "mc_answer1",
                      "mc_answer2",
                      "mc_answer3",
                      "mc_answer4"
                  ],
                  "to_field": "choices",
                  "type": "list_field_values"
              },
              {
                  "mappers": {
                      "correct_answer_num": {
                          "1": "A",
                          "2": "B",
                          "3": "C",
                          "4": "D"
                      }
                  },
                  "type": "map_instance_values"
              },
              {
                  "index_of": "correct_answer_num",
                  "search_in": "numbering",
                  "to_field": "index",
                  "type": "index_of"
              },
              {
                  "field_to_field": {
                      "choices": "_choices",
                      "dialect": "topic",
                      "flores_passage": "context",
                      "index": "_index",
                      "numbering": "_numbering",
                      "question": "sentence1"
                  },
                  "type": "rename_fields"
              },
              {
                  "field": "_numbering",
                  "index": "_index",
                  "to_field": "number",
                  "type": "take_by_field"
              },
              {
                  "field": "_choices",
                  "index": "_index",
                  "to_field": "answer",
                  "type": "take_by_field"
              },
              {
                  "fields": [
                      "_numbering",
                      "_choices"
                  ],
                  "to_field": "choices",
                  "type": "zip_field_values"
              },
              {
                  "field": "choices/*",
                  "process_every_value": true,
                  "separator": ". ",
                  "to_field": "choices_list",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "field": "choices_list",
                  "index": "_index",
                  "to_field": "number_and_answer",
                  "type": "take_by_field"
              },
              {
                  "field": "choices/*/0",
                  "separator": ",",
                  "to_field": "numbers",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "add": [
                      ""
                  ],
                  "field": "choices_list",
                  "to_field": "choices_list",
                  "type": "add_constant"
              },
              {
                  "field": "choices_list",
                  "separator": "\n",
                  "to_field": "choices",
                  "type": "join_str"
              },
              {
                  "field_to_field": {
                      "number": "label"
                  },
                  "type": "rename_fields"
              }
          ],
          "task": {
              "inputs": [
                  "choices",
                  "sentence1",
                  "numbers",
                  "topic",
                  "context"
              ],
              "metrics": [
                  "metrics.accuracy"
              ],
              "outputs": [
                  "label"
              ],
              "type": "form_task"
          },
          "templates": "templates.qa.multiple_choice.context_no_intro.all",
          "type": "task_card"
      }

References: :ref:`metrics.accuracy <metrics.accuracy>`, :ref:`templates.qa.multiple_choice.context_no_intro.all <templates.qa.multiple_choice.context_no_intro.all>`

|
|



.. _cards.belebele.ces_Latn:

----------

ces_Latn
""""""""

.. note:: ID: ``cards.belebele.ces_Latn``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "default",
              "path": "facebook/belebele",
              "split": "ces_Latn",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "mapper": {
                      "ces_Latn": "test"
                  },
                  "type": "rename_splits"
              },
              {
                  "fields": {
                      "numbering": [
                          "A",
                          "B",
                          "C",
                          "D",
                          "E",
                          "F",
                          "G",
                          "H",
                          "I",
                          "J",
                          "K",
                          "L",
                          "M",
                          "N",
                          "O",
                          "P",
                          "Q",
                          "R",
                          "S",
                          "T",
                          "U",
                          "V",
                          "W",
                          "X",
                          "Y",
                          "Z"
                      ]
                  },
                  "type": "add_fields"
              },
              {
                  "fields": [
                      "mc_answer1",
                      "mc_answer2",
                      "mc_answer3",
                      "mc_answer4"
                  ],
                  "to_field": "choices",
                  "type": "list_field_values"
              },
              {
                  "mappers": {
                      "correct_answer_num": {
                          "1": "A",
                          "2": "B",
                          "3": "C",
                          "4": "D"
                      }
                  },
                  "type": "map_instance_values"
              },
              {
                  "index_of": "correct_answer_num",
                  "search_in": "numbering",
                  "to_field": "index",
                  "type": "index_of"
              },
              {
                  "field_to_field": {
                      "choices": "_choices",
                      "dialect": "topic",
                      "flores_passage": "context",
                      "index": "_index",
                      "numbering": "_numbering",
                      "question": "sentence1"
                  },
                  "type": "rename_fields"
              },
              {
                  "field": "_numbering",
                  "index": "_index",
                  "to_field": "number",
                  "type": "take_by_field"
              },
              {
                  "field": "_choices",
                  "index": "_index",
                  "to_field": "answer",
                  "type": "take_by_field"
              },
              {
                  "fields": [
                      "_numbering",
                      "_choices"
                  ],
                  "to_field": "choices",
                  "type": "zip_field_values"
              },
              {
                  "field": "choices/*",
                  "process_every_value": true,
                  "separator": ". ",
                  "to_field": "choices_list",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "field": "choices_list",
                  "index": "_index",
                  "to_field": "number_and_answer",
                  "type": "take_by_field"
              },
              {
                  "field": "choices/*/0",
                  "separator": ",",
                  "to_field": "numbers",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "add": [
                      ""
                  ],
                  "field": "choices_list",
                  "to_field": "choices_list",
                  "type": "add_constant"
              },
              {
                  "field": "choices_list",
                  "separator": "\n",
                  "to_field": "choices",
                  "type": "join_str"
              },
              {
                  "field_to_field": {
                      "number": "label"
                  },
                  "type": "rename_fields"
              }
          ],
          "task": {
              "inputs": [
                  "choices",
                  "sentence1",
                  "numbers",
                  "topic",
                  "context"
              ],
              "metrics": [
                  "metrics.accuracy"
              ],
              "outputs": [
                  "label"
              ],
              "type": "form_task"
          },
          "templates": "templates.qa.multiple_choice.context_no_intro.all",
          "type": "task_card"
      }

References: :ref:`metrics.accuracy <metrics.accuracy>`, :ref:`templates.qa.multiple_choice.context_no_intro.all <templates.qa.multiple_choice.context_no_intro.all>`

|
|



.. _cards.belebele.mri_Latn:

----------

mri_Latn
""""""""

.. note:: ID: ``cards.belebele.mri_Latn``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "default",
              "path": "facebook/belebele",
              "split": "mri_Latn",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "mapper": {
                      "mri_Latn": "test"
                  },
                  "type": "rename_splits"
              },
              {
                  "fields": {
                      "numbering": [
                          "A",
                          "B",
                          "C",
                          "D",
                          "E",
                          "F",
                          "G",
                          "H",
                          "I",
                          "J",
                          "K",
                          "L",
                          "M",
                          "N",
                          "O",
                          "P",
                          "Q",
                          "R",
                          "S",
                          "T",
                          "U",
                          "V",
                          "W",
                          "X",
                          "Y",
                          "Z"
                      ]
                  },
                  "type": "add_fields"
              },
              {
                  "fields": [
                      "mc_answer1",
                      "mc_answer2",
                      "mc_answer3",
                      "mc_answer4"
                  ],
                  "to_field": "choices",
                  "type": "list_field_values"
              },
              {
                  "mappers": {
                      "correct_answer_num": {
                          "1": "A",
                          "2": "B",
                          "3": "C",
                          "4": "D"
                      }
                  },
                  "type": "map_instance_values"
              },
              {
                  "index_of": "correct_answer_num",
                  "search_in": "numbering",
                  "to_field": "index",
                  "type": "index_of"
              },
              {
                  "field_to_field": {
                      "choices": "_choices",
                      "dialect": "topic",
                      "flores_passage": "context",
                      "index": "_index",
                      "numbering": "_numbering",
                      "question": "sentence1"
                  },
                  "type": "rename_fields"
              },
              {
                  "field": "_numbering",
                  "index": "_index",
                  "to_field": "number",
                  "type": "take_by_field"
              },
              {
                  "field": "_choices",
                  "index": "_index",
                  "to_field": "answer",
                  "type": "take_by_field"
              },
              {
                  "fields": [
                      "_numbering",
                      "_choices"
                  ],
                  "to_field": "choices",
                  "type": "zip_field_values"
              },
              {
                  "field": "choices/*",
                  "process_every_value": true,
                  "separator": ". ",
                  "to_field": "choices_list",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "field": "choices_list",
                  "index": "_index",
                  "to_field": "number_and_answer",
                  "type": "take_by_field"
              },
              {
                  "field": "choices/*/0",
                  "separator": ",",
                  "to_field": "numbers",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "add": [
                      ""
                  ],
                  "field": "choices_list",
                  "to_field": "choices_list",
                  "type": "add_constant"
              },
              {
                  "field": "choices_list",
                  "separator": "\n",
                  "to_field": "choices",
                  "type": "join_str"
              },
              {
                  "field_to_field": {
                      "number": "label"
                  },
                  "type": "rename_fields"
              }
          ],
          "task": {
              "inputs": [
                  "choices",
                  "sentence1",
                  "numbers",
                  "topic",
                  "context"
              ],
              "metrics": [
                  "metrics.accuracy"
              ],
              "outputs": [
                  "label"
              ],
              "type": "form_task"
          },
          "templates": "templates.qa.multiple_choice.context_no_intro.all",
          "type": "task_card"
      }

References: :ref:`metrics.accuracy <metrics.accuracy>`, :ref:`templates.qa.multiple_choice.context_no_intro.all <templates.qa.multiple_choice.context_no_intro.all>`

|
|



.. _cards.belebele.kac_Latn:

----------

kac_Latn
""""""""

.. note:: ID: ``cards.belebele.kac_Latn``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "default",
              "path": "facebook/belebele",
              "split": "kac_Latn",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "mapper": {
                      "kac_Latn": "test"
                  },
                  "type": "rename_splits"
              },
              {
                  "fields": {
                      "numbering": [
                          "A",
                          "B",
                          "C",
                          "D",
                          "E",
                          "F",
                          "G",
                          "H",
                          "I",
                          "J",
                          "K",
                          "L",
                          "M",
                          "N",
                          "O",
                          "P",
                          "Q",
                          "R",
                          "S",
                          "T",
                          "U",
                          "V",
                          "W",
                          "X",
                          "Y",
                          "Z"
                      ]
                  },
                  "type": "add_fields"
              },
              {
                  "fields": [
                      "mc_answer1",
                      "mc_answer2",
                      "mc_answer3",
                      "mc_answer4"
                  ],
                  "to_field": "choices",
                  "type": "list_field_values"
              },
              {
                  "mappers": {
                      "correct_answer_num": {
                          "1": "A",
                          "2": "B",
                          "3": "C",
                          "4": "D"
                      }
                  },
                  "type": "map_instance_values"
              },
              {
                  "index_of": "correct_answer_num",
                  "search_in": "numbering",
                  "to_field": "index",
                  "type": "index_of"
              },
              {
                  "field_to_field": {
                      "choices": "_choices",
                      "dialect": "topic",
                      "flores_passage": "context",
                      "index": "_index",
                      "numbering": "_numbering",
                      "question": "sentence1"
                  },
                  "type": "rename_fields"
              },
              {
                  "field": "_numbering",
                  "index": "_index",
                  "to_field": "number",
                  "type": "take_by_field"
              },
              {
                  "field": "_choices",
                  "index": "_index",
                  "to_field": "answer",
                  "type": "take_by_field"
              },
              {
                  "fields": [
                      "_numbering",
                      "_choices"
                  ],
                  "to_field": "choices",
                  "type": "zip_field_values"
              },
              {
                  "field": "choices/*",
                  "process_every_value": true,
                  "separator": ". ",
                  "to_field": "choices_list",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "field": "choices_list",
                  "index": "_index",
                  "to_field": "number_and_answer",
                  "type": "take_by_field"
              },
              {
                  "field": "choices/*/0",
                  "separator": ",",
                  "to_field": "numbers",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "add": [
                      ""
                  ],
                  "field": "choices_list",
                  "to_field": "choices_list",
                  "type": "add_constant"
              },
              {
                  "field": "choices_list",
                  "separator": "\n",
                  "to_field": "choices",
                  "type": "join_str"
              },
              {
                  "field_to_field": {
                      "number": "label"
                  },
                  "type": "rename_fields"
              }
          ],
          "task": {
              "inputs": [
                  "choices",
                  "sentence1",
                  "numbers",
                  "topic",
                  "context"
              ],
              "metrics": [
                  "metrics.accuracy"
              ],
              "outputs": [
                  "label"
              ],
              "type": "form_task"
          },
          "templates": "templates.qa.multiple_choice.context_no_intro.all",
          "type": "task_card"
      }

References: :ref:`metrics.accuracy <metrics.accuracy>`, :ref:`templates.qa.multiple_choice.context_no_intro.all <templates.qa.multiple_choice.context_no_intro.all>`

|
|



.. _cards.belebele.vie_Latn:

----------

vie_Latn
""""""""

.. note:: ID: ``cards.belebele.vie_Latn``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "default",
              "path": "facebook/belebele",
              "split": "vie_Latn",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "mapper": {
                      "vie_Latn": "test"
                  },
                  "type": "rename_splits"
              },
              {
                  "fields": {
                      "numbering": [
                          "A",
                          "B",
                          "C",
                          "D",
                          "E",
                          "F",
                          "G",
                          "H",
                          "I",
                          "J",
                          "K",
                          "L",
                          "M",
                          "N",
                          "O",
                          "P",
                          "Q",
                          "R",
                          "S",
                          "T",
                          "U",
                          "V",
                          "W",
                          "X",
                          "Y",
                          "Z"
                      ]
                  },
                  "type": "add_fields"
              },
              {
                  "fields": [
                      "mc_answer1",
                      "mc_answer2",
                      "mc_answer3",
                      "mc_answer4"
                  ],
                  "to_field": "choices",
                  "type": "list_field_values"
              },
              {
                  "mappers": {
                      "correct_answer_num": {
                          "1": "A",
                          "2": "B",
                          "3": "C",
                          "4": "D"
                      }
                  },
                  "type": "map_instance_values"
              },
              {
                  "index_of": "correct_answer_num",
                  "search_in": "numbering",
                  "to_field": "index",
                  "type": "index_of"
              },
              {
                  "field_to_field": {
                      "choices": "_choices",
                      "dialect": "topic",
                      "flores_passage": "context",
                      "index": "_index",
                      "numbering": "_numbering",
                      "question": "sentence1"
                  },
                  "type": "rename_fields"
              },
              {
                  "field": "_numbering",
                  "index": "_index",
                  "to_field": "number",
                  "type": "take_by_field"
              },
              {
                  "field": "_choices",
                  "index": "_index",
                  "to_field": "answer",
                  "type": "take_by_field"
              },
              {
                  "fields": [
                      "_numbering",
                      "_choices"
                  ],
                  "to_field": "choices",
                  "type": "zip_field_values"
              },
              {
                  "field": "choices/*",
                  "process_every_value": true,
                  "separator": ". ",
                  "to_field": "choices_list",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "field": "choices_list",
                  "index": "_index",
                  "to_field": "number_and_answer",
                  "type": "take_by_field"
              },
              {
                  "field": "choices/*/0",
                  "separator": ",",
                  "to_field": "numbers",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "add": [
                      ""
                  ],
                  "field": "choices_list",
                  "to_field": "choices_list",
                  "type": "add_constant"
              },
              {
                  "field": "choices_list",
                  "separator": "\n",
                  "to_field": "choices",
                  "type": "join_str"
              },
              {
                  "field_to_field": {
                      "number": "label"
                  },
                  "type": "rename_fields"
              }
          ],
          "task": {
              "inputs": [
                  "choices",
                  "sentence1",
                  "numbers",
                  "topic",
                  "context"
              ],
              "metrics": [
                  "metrics.accuracy"
              ],
              "outputs": [
                  "label"
              ],
              "type": "form_task"
          },
          "templates": "templates.qa.multiple_choice.context_no_intro.all",
          "type": "task_card"
      }

References: :ref:`metrics.accuracy <metrics.accuracy>`, :ref:`templates.qa.multiple_choice.context_no_intro.all <templates.qa.multiple_choice.context_no_intro.all>`

|
|



.. _cards.belebele.apc_Arab:

----------

apc_Arab
""""""""

.. note:: ID: ``cards.belebele.apc_Arab``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "default",
              "path": "facebook/belebele",
              "split": "apc_Arab",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "mapper": {
                      "apc_Arab": "test"
                  },
                  "type": "rename_splits"
              },
              {
                  "fields": {
                      "numbering": [
                          "A",
                          "B",
                          "C",
                          "D",
                          "E",
                          "F",
                          "G",
                          "H",
                          "I",
                          "J",
                          "K",
                          "L",
                          "M",
                          "N",
                          "O",
                          "P",
                          "Q",
                          "R",
                          "S",
                          "T",
                          "U",
                          "V",
                          "W",
                          "X",
                          "Y",
                          "Z"
                      ]
                  },
                  "type": "add_fields"
              },
              {
                  "fields": [
                      "mc_answer1",
                      "mc_answer2",
                      "mc_answer3",
                      "mc_answer4"
                  ],
                  "to_field": "choices",
                  "type": "list_field_values"
              },
              {
                  "mappers": {
                      "correct_answer_num": {
                          "1": "A",
                          "2": "B",
                          "3": "C",
                          "4": "D"
                      }
                  },
                  "type": "map_instance_values"
              },
              {
                  "index_of": "correct_answer_num",
                  "search_in": "numbering",
                  "to_field": "index",
                  "type": "index_of"
              },
              {
                  "field_to_field": {
                      "choices": "_choices",
                      "dialect": "topic",
                      "flores_passage": "context",
                      "index": "_index",
                      "numbering": "_numbering",
                      "question": "sentence1"
                  },
                  "type": "rename_fields"
              },
              {
                  "field": "_numbering",
                  "index": "_index",
                  "to_field": "number",
                  "type": "take_by_field"
              },
              {
                  "field": "_choices",
                  "index": "_index",
                  "to_field": "answer",
                  "type": "take_by_field"
              },
              {
                  "fields": [
                      "_numbering",
                      "_choices"
                  ],
                  "to_field": "choices",
                  "type": "zip_field_values"
              },
              {
                  "field": "choices/*",
                  "process_every_value": true,
                  "separator": ". ",
                  "to_field": "choices_list",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "field": "choices_list",
                  "index": "_index",
                  "to_field": "number_and_answer",
                  "type": "take_by_field"
              },
              {
                  "field": "choices/*/0",
                  "separator": ",",
                  "to_field": "numbers",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "add": [
                      ""
                  ],
                  "field": "choices_list",
                  "to_field": "choices_list",
                  "type": "add_constant"
              },
              {
                  "field": "choices_list",
                  "separator": "\n",
                  "to_field": "choices",
                  "type": "join_str"
              },
              {
                  "field_to_field": {
                      "number": "label"
                  },
                  "type": "rename_fields"
              }
          ],
          "task": {
              "inputs": [
                  "choices",
                  "sentence1",
                  "numbers",
                  "topic",
                  "context"
              ],
              "metrics": [
                  "metrics.accuracy"
              ],
              "outputs": [
                  "label"
              ],
              "type": "form_task"
          },
          "templates": "templates.qa.multiple_choice.context_no_intro.all",
          "type": "task_card"
      }

References: :ref:`metrics.accuracy <metrics.accuracy>`, :ref:`templates.qa.multiple_choice.context_no_intro.all <templates.qa.multiple_choice.context_no_intro.all>`

|
|



.. _cards.belebele.est_Latn:

----------

est_Latn
""""""""

.. note:: ID: ``cards.belebele.est_Latn``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "default",
              "path": "facebook/belebele",
              "split": "est_Latn",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "mapper": {
                      "est_Latn": "test"
                  },
                  "type": "rename_splits"
              },
              {
                  "fields": {
                      "numbering": [
                          "A",
                          "B",
                          "C",
                          "D",
                          "E",
                          "F",
                          "G",
                          "H",
                          "I",
                          "J",
                          "K",
                          "L",
                          "M",
                          "N",
                          "O",
                          "P",
                          "Q",
                          "R",
                          "S",
                          "T",
                          "U",
                          "V",
                          "W",
                          "X",
                          "Y",
                          "Z"
                      ]
                  },
                  "type": "add_fields"
              },
              {
                  "fields": [
                      "mc_answer1",
                      "mc_answer2",
                      "mc_answer3",
                      "mc_answer4"
                  ],
                  "to_field": "choices",
                  "type": "list_field_values"
              },
              {
                  "mappers": {
                      "correct_answer_num": {
                          "1": "A",
                          "2": "B",
                          "3": "C",
                          "4": "D"
                      }
                  },
                  "type": "map_instance_values"
              },
              {
                  "index_of": "correct_answer_num",
                  "search_in": "numbering",
                  "to_field": "index",
                  "type": "index_of"
              },
              {
                  "field_to_field": {
                      "choices": "_choices",
                      "dialect": "topic",
                      "flores_passage": "context",
                      "index": "_index",
                      "numbering": "_numbering",
                      "question": "sentence1"
                  },
                  "type": "rename_fields"
              },
              {
                  "field": "_numbering",
                  "index": "_index",
                  "to_field": "number",
                  "type": "take_by_field"
              },
              {
                  "field": "_choices",
                  "index": "_index",
                  "to_field": "answer",
                  "type": "take_by_field"
              },
              {
                  "fields": [
                      "_numbering",
                      "_choices"
                  ],
                  "to_field": "choices",
                  "type": "zip_field_values"
              },
              {
                  "field": "choices/*",
                  "process_every_value": true,
                  "separator": ". ",
                  "to_field": "choices_list",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "field": "choices_list",
                  "index": "_index",
                  "to_field": "number_and_answer",
                  "type": "take_by_field"
              },
              {
                  "field": "choices/*/0",
                  "separator": ",",
                  "to_field": "numbers",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "add": [
                      ""
                  ],
                  "field": "choices_list",
                  "to_field": "choices_list",
                  "type": "add_constant"
              },
              {
                  "field": "choices_list",
                  "separator": "\n",
                  "to_field": "choices",
                  "type": "join_str"
              },
              {
                  "field_to_field": {
                      "number": "label"
                  },
                  "type": "rename_fields"
              }
          ],
          "task": {
              "inputs": [
                  "choices",
                  "sentence1",
                  "numbers",
                  "topic",
                  "context"
              ],
              "metrics": [
                  "metrics.accuracy"
              ],
              "outputs": [
                  "label"
              ],
              "type": "form_task"
          },
          "templates": "templates.qa.multiple_choice.context_no_intro.all",
          "type": "task_card"
      }

References: :ref:`metrics.accuracy <metrics.accuracy>`, :ref:`templates.qa.multiple_choice.context_no_intro.all <templates.qa.multiple_choice.context_no_intro.all>`

|
|



.. _cards.belebele.mlt_Latn:

----------

mlt_Latn
""""""""

.. note:: ID: ``cards.belebele.mlt_Latn``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "default",
              "path": "facebook/belebele",
              "split": "mlt_Latn",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "mapper": {
                      "mlt_Latn": "test"
                  },
                  "type": "rename_splits"
              },
              {
                  "fields": {
                      "numbering": [
                          "A",
                          "B",
                          "C",
                          "D",
                          "E",
                          "F",
                          "G",
                          "H",
                          "I",
                          "J",
                          "K",
                          "L",
                          "M",
                          "N",
                          "O",
                          "P",
                          "Q",
                          "R",
                          "S",
                          "T",
                          "U",
                          "V",
                          "W",
                          "X",
                          "Y",
                          "Z"
                      ]
                  },
                  "type": "add_fields"
              },
              {
                  "fields": [
                      "mc_answer1",
                      "mc_answer2",
                      "mc_answer3",
                      "mc_answer4"
                  ],
                  "to_field": "choices",
                  "type": "list_field_values"
              },
              {
                  "mappers": {
                      "correct_answer_num": {
                          "1": "A",
                          "2": "B",
                          "3": "C",
                          "4": "D"
                      }
                  },
                  "type": "map_instance_values"
              },
              {
                  "index_of": "correct_answer_num",
                  "search_in": "numbering",
                  "to_field": "index",
                  "type": "index_of"
              },
              {
                  "field_to_field": {
                      "choices": "_choices",
                      "dialect": "topic",
                      "flores_passage": "context",
                      "index": "_index",
                      "numbering": "_numbering",
                      "question": "sentence1"
                  },
                  "type": "rename_fields"
              },
              {
                  "field": "_numbering",
                  "index": "_index",
                  "to_field": "number",
                  "type": "take_by_field"
              },
              {
                  "field": "_choices",
                  "index": "_index",
                  "to_field": "answer",
                  "type": "take_by_field"
              },
              {
                  "fields": [
                      "_numbering",
                      "_choices"
                  ],
                  "to_field": "choices",
                  "type": "zip_field_values"
              },
              {
                  "field": "choices/*",
                  "process_every_value": true,
                  "separator": ". ",
                  "to_field": "choices_list",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "field": "choices_list",
                  "index": "_index",
                  "to_field": "number_and_answer",
                  "type": "take_by_field"
              },
              {
                  "field": "choices/*/0",
                  "separator": ",",
                  "to_field": "numbers",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "add": [
                      ""
                  ],
                  "field": "choices_list",
                  "to_field": "choices_list",
                  "type": "add_constant"
              },
              {
                  "field": "choices_list",
                  "separator": "\n",
                  "to_field": "choices",
                  "type": "join_str"
              },
              {
                  "field_to_field": {
                      "number": "label"
                  },
                  "type": "rename_fields"
              }
          ],
          "task": {
              "inputs": [
                  "choices",
                  "sentence1",
                  "numbers",
                  "topic",
                  "context"
              ],
              "metrics": [
                  "metrics.accuracy"
              ],
              "outputs": [
                  "label"
              ],
              "type": "form_task"
          },
          "templates": "templates.qa.multiple_choice.context_no_intro.all",
          "type": "task_card"
      }

References: :ref:`metrics.accuracy <metrics.accuracy>`, :ref:`templates.qa.multiple_choice.context_no_intro.all <templates.qa.multiple_choice.context_no_intro.all>`

|
|



.. _cards.belebele.isl_Latn:

----------

isl_Latn
""""""""

.. note:: ID: ``cards.belebele.isl_Latn``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "default",
              "path": "facebook/belebele",
              "split": "isl_Latn",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "mapper": {
                      "isl_Latn": "test"
                  },
                  "type": "rename_splits"
              },
              {
                  "fields": {
                      "numbering": [
                          "A",
                          "B",
                          "C",
                          "D",
                          "E",
                          "F",
                          "G",
                          "H",
                          "I",
                          "J",
                          "K",
                          "L",
                          "M",
                          "N",
                          "O",
                          "P",
                          "Q",
                          "R",
                          "S",
                          "T",
                          "U",
                          "V",
                          "W",
                          "X",
                          "Y",
                          "Z"
                      ]
                  },
                  "type": "add_fields"
              },
              {
                  "fields": [
                      "mc_answer1",
                      "mc_answer2",
                      "mc_answer3",
                      "mc_answer4"
                  ],
                  "to_field": "choices",
                  "type": "list_field_values"
              },
              {
                  "mappers": {
                      "correct_answer_num": {
                          "1": "A",
                          "2": "B",
                          "3": "C",
                          "4": "D"
                      }
                  },
                  "type": "map_instance_values"
              },
              {
                  "index_of": "correct_answer_num",
                  "search_in": "numbering",
                  "to_field": "index",
                  "type": "index_of"
              },
              {
                  "field_to_field": {
                      "choices": "_choices",
                      "dialect": "topic",
                      "flores_passage": "context",
                      "index": "_index",
                      "numbering": "_numbering",
                      "question": "sentence1"
                  },
                  "type": "rename_fields"
              },
              {
                  "field": "_numbering",
                  "index": "_index",
                  "to_field": "number",
                  "type": "take_by_field"
              },
              {
                  "field": "_choices",
                  "index": "_index",
                  "to_field": "answer",
                  "type": "take_by_field"
              },
              {
                  "fields": [
                      "_numbering",
                      "_choices"
                  ],
                  "to_field": "choices",
                  "type": "zip_field_values"
              },
              {
                  "field": "choices/*",
                  "process_every_value": true,
                  "separator": ". ",
                  "to_field": "choices_list",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "field": "choices_list",
                  "index": "_index",
                  "to_field": "number_and_answer",
                  "type": "take_by_field"
              },
              {
                  "field": "choices/*/0",
                  "separator": ",",
                  "to_field": "numbers",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "add": [
                      ""
                  ],
                  "field": "choices_list",
                  "to_field": "choices_list",
                  "type": "add_constant"
              },
              {
                  "field": "choices_list",
                  "separator": "\n",
                  "to_field": "choices",
                  "type": "join_str"
              },
              {
                  "field_to_field": {
                      "number": "label"
                  },
                  "type": "rename_fields"
              }
          ],
          "task": {
              "inputs": [
                  "choices",
                  "sentence1",
                  "numbers",
                  "topic",
                  "context"
              ],
              "metrics": [
                  "metrics.accuracy"
              ],
              "outputs": [
                  "label"
              ],
              "type": "form_task"
          },
          "templates": "templates.qa.multiple_choice.context_no_intro.all",
          "type": "task_card"
      }

References: :ref:`metrics.accuracy <metrics.accuracy>`, :ref:`templates.qa.multiple_choice.context_no_intro.all <templates.qa.multiple_choice.context_no_intro.all>`

|
|



.. _cards.belebele.azj_Latn:

----------

azj_Latn
""""""""

.. note:: ID: ``cards.belebele.azj_Latn``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "default",
              "path": "facebook/belebele",
              "split": "azj_Latn",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "mapper": {
                      "azj_Latn": "test"
                  },
                  "type": "rename_splits"
              },
              {
                  "fields": {
                      "numbering": [
                          "A",
                          "B",
                          "C",
                          "D",
                          "E",
                          "F",
                          "G",
                          "H",
                          "I",
                          "J",
                          "K",
                          "L",
                          "M",
                          "N",
                          "O",
                          "P",
                          "Q",
                          "R",
                          "S",
                          "T",
                          "U",
                          "V",
                          "W",
                          "X",
                          "Y",
                          "Z"
                      ]
                  },
                  "type": "add_fields"
              },
              {
                  "fields": [
                      "mc_answer1",
                      "mc_answer2",
                      "mc_answer3",
                      "mc_answer4"
                  ],
                  "to_field": "choices",
                  "type": "list_field_values"
              },
              {
                  "mappers": {
                      "correct_answer_num": {
                          "1": "A",
                          "2": "B",
                          "3": "C",
                          "4": "D"
                      }
                  },
                  "type": "map_instance_values"
              },
              {
                  "index_of": "correct_answer_num",
                  "search_in": "numbering",
                  "to_field": "index",
                  "type": "index_of"
              },
              {
                  "field_to_field": {
                      "choices": "_choices",
                      "dialect": "topic",
                      "flores_passage": "context",
                      "index": "_index",
                      "numbering": "_numbering",
                      "question": "sentence1"
                  },
                  "type": "rename_fields"
              },
              {
                  "field": "_numbering",
                  "index": "_index",
                  "to_field": "number",
                  "type": "take_by_field"
              },
              {
                  "field": "_choices",
                  "index": "_index",
                  "to_field": "answer",
                  "type": "take_by_field"
              },
              {
                  "fields": [
                      "_numbering",
                      "_choices"
                  ],
                  "to_field": "choices",
                  "type": "zip_field_values"
              },
              {
                  "field": "choices/*",
                  "process_every_value": true,
                  "separator": ". ",
                  "to_field": "choices_list",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "field": "choices_list",
                  "index": "_index",
                  "to_field": "number_and_answer",
                  "type": "take_by_field"
              },
              {
                  "field": "choices/*/0",
                  "separator": ",",
                  "to_field": "numbers",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "add": [
                      ""
                  ],
                  "field": "choices_list",
                  "to_field": "choices_list",
                  "type": "add_constant"
              },
              {
                  "field": "choices_list",
                  "separator": "\n",
                  "to_field": "choices",
                  "type": "join_str"
              },
              {
                  "field_to_field": {
                      "number": "label"
                  },
                  "type": "rename_fields"
              }
          ],
          "task": {
              "inputs": [
                  "choices",
                  "sentence1",
                  "numbers",
                  "topic",
                  "context"
              ],
              "metrics": [
                  "metrics.accuracy"
              ],
              "outputs": [
                  "label"
              ],
              "type": "form_task"
          },
          "templates": "templates.qa.multiple_choice.context_no_intro.all",
          "type": "task_card"
      }

References: :ref:`metrics.accuracy <metrics.accuracy>`, :ref:`templates.qa.multiple_choice.context_no_intro.all <templates.qa.multiple_choice.context_no_intro.all>`

|
|



.. _cards.belebele.ita_Latn:

----------

ita_Latn
""""""""

.. note:: ID: ``cards.belebele.ita_Latn``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "default",
              "path": "facebook/belebele",
              "split": "ita_Latn",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "mapper": {
                      "ita_Latn": "test"
                  },
                  "type": "rename_splits"
              },
              {
                  "fields": {
                      "numbering": [
                          "A",
                          "B",
                          "C",
                          "D",
                          "E",
                          "F",
                          "G",
                          "H",
                          "I",
                          "J",
                          "K",
                          "L",
                          "M",
                          "N",
                          "O",
                          "P",
                          "Q",
                          "R",
                          "S",
                          "T",
                          "U",
                          "V",
                          "W",
                          "X",
                          "Y",
                          "Z"
                      ]
                  },
                  "type": "add_fields"
              },
              {
                  "fields": [
                      "mc_answer1",
                      "mc_answer2",
                      "mc_answer3",
                      "mc_answer4"
                  ],
                  "to_field": "choices",
                  "type": "list_field_values"
              },
              {
                  "mappers": {
                      "correct_answer_num": {
                          "1": "A",
                          "2": "B",
                          "3": "C",
                          "4": "D"
                      }
                  },
                  "type": "map_instance_values"
              },
              {
                  "index_of": "correct_answer_num",
                  "search_in": "numbering",
                  "to_field": "index",
                  "type": "index_of"
              },
              {
                  "field_to_field": {
                      "choices": "_choices",
                      "dialect": "topic",
                      "flores_passage": "context",
                      "index": "_index",
                      "numbering": "_numbering",
                      "question": "sentence1"
                  },
                  "type": "rename_fields"
              },
              {
                  "field": "_numbering",
                  "index": "_index",
                  "to_field": "number",
                  "type": "take_by_field"
              },
              {
                  "field": "_choices",
                  "index": "_index",
                  "to_field": "answer",
                  "type": "take_by_field"
              },
              {
                  "fields": [
                      "_numbering",
                      "_choices"
                  ],
                  "to_field": "choices",
                  "type": "zip_field_values"
              },
              {
                  "field": "choices/*",
                  "process_every_value": true,
                  "separator": ". ",
                  "to_field": "choices_list",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "field": "choices_list",
                  "index": "_index",
                  "to_field": "number_and_answer",
                  "type": "take_by_field"
              },
              {
                  "field": "choices/*/0",
                  "separator": ",",
                  "to_field": "numbers",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "add": [
                      ""
                  ],
                  "field": "choices_list",
                  "to_field": "choices_list",
                  "type": "add_constant"
              },
              {
                  "field": "choices_list",
                  "separator": "\n",
                  "to_field": "choices",
                  "type": "join_str"
              },
              {
                  "field_to_field": {
                      "number": "label"
                  },
                  "type": "rename_fields"
              }
          ],
          "task": {
              "inputs": [
                  "choices",
                  "sentence1",
                  "numbers",
                  "topic",
                  "context"
              ],
              "metrics": [
                  "metrics.accuracy"
              ],
              "outputs": [
                  "label"
              ],
              "type": "form_task"
          },
          "templates": "templates.qa.multiple_choice.context_no_intro.all",
          "type": "task_card"
      }

References: :ref:`metrics.accuracy <metrics.accuracy>`, :ref:`templates.qa.multiple_choice.context_no_intro.all <templates.qa.multiple_choice.context_no_intro.all>`

|
|



.. _cards.belebele.jav_Latn:

----------

jav_Latn
""""""""

.. note:: ID: ``cards.belebele.jav_Latn``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "default",
              "path": "facebook/belebele",
              "split": "jav_Latn",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "mapper": {
                      "jav_Latn": "test"
                  },
                  "type": "rename_splits"
              },
              {
                  "fields": {
                      "numbering": [
                          "A",
                          "B",
                          "C",
                          "D",
                          "E",
                          "F",
                          "G",
                          "H",
                          "I",
                          "J",
                          "K",
                          "L",
                          "M",
                          "N",
                          "O",
                          "P",
                          "Q",
                          "R",
                          "S",
                          "T",
                          "U",
                          "V",
                          "W",
                          "X",
                          "Y",
                          "Z"
                      ]
                  },
                  "type": "add_fields"
              },
              {
                  "fields": [
                      "mc_answer1",
                      "mc_answer2",
                      "mc_answer3",
                      "mc_answer4"
                  ],
                  "to_field": "choices",
                  "type": "list_field_values"
              },
              {
                  "mappers": {
                      "correct_answer_num": {
                          "1": "A",
                          "2": "B",
                          "3": "C",
                          "4": "D"
                      }
                  },
                  "type": "map_instance_values"
              },
              {
                  "index_of": "correct_answer_num",
                  "search_in": "numbering",
                  "to_field": "index",
                  "type": "index_of"
              },
              {
                  "field_to_field": {
                      "choices": "_choices",
                      "dialect": "topic",
                      "flores_passage": "context",
                      "index": "_index",
                      "numbering": "_numbering",
                      "question": "sentence1"
                  },
                  "type": "rename_fields"
              },
              {
                  "field": "_numbering",
                  "index": "_index",
                  "to_field": "number",
                  "type": "take_by_field"
              },
              {
                  "field": "_choices",
                  "index": "_index",
                  "to_field": "answer",
                  "type": "take_by_field"
              },
              {
                  "fields": [
                      "_numbering",
                      "_choices"
                  ],
                  "to_field": "choices",
                  "type": "zip_field_values"
              },
              {
                  "field": "choices/*",
                  "process_every_value": true,
                  "separator": ". ",
                  "to_field": "choices_list",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "field": "choices_list",
                  "index": "_index",
                  "to_field": "number_and_answer",
                  "type": "take_by_field"
              },
              {
                  "field": "choices/*/0",
                  "separator": ",",
                  "to_field": "numbers",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "add": [
                      ""
                  ],
                  "field": "choices_list",
                  "to_field": "choices_list",
                  "type": "add_constant"
              },
              {
                  "field": "choices_list",
                  "separator": "\n",
                  "to_field": "choices",
                  "type": "join_str"
              },
              {
                  "field_to_field": {
                      "number": "label"
                  },
                  "type": "rename_fields"
              }
          ],
          "task": {
              "inputs": [
                  "choices",
                  "sentence1",
                  "numbers",
                  "topic",
                  "context"
              ],
              "metrics": [
                  "metrics.accuracy"
              ],
              "outputs": [
                  "label"
              ],
              "type": "form_task"
          },
          "templates": "templates.qa.multiple_choice.context_no_intro.all",
          "type": "task_card"
      }

References: :ref:`metrics.accuracy <metrics.accuracy>`, :ref:`templates.qa.multiple_choice.context_no_intro.all <templates.qa.multiple_choice.context_no_intro.all>`

|
|



.. _cards.belebele.ceb_Latn:

----------

ceb_Latn
""""""""

.. note:: ID: ``cards.belebele.ceb_Latn``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "default",
              "path": "facebook/belebele",
              "split": "ceb_Latn",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "mapper": {
                      "ceb_Latn": "test"
                  },
                  "type": "rename_splits"
              },
              {
                  "fields": {
                      "numbering": [
                          "A",
                          "B",
                          "C",
                          "D",
                          "E",
                          "F",
                          "G",
                          "H",
                          "I",
                          "J",
                          "K",
                          "L",
                          "M",
                          "N",
                          "O",
                          "P",
                          "Q",
                          "R",
                          "S",
                          "T",
                          "U",
                          "V",
                          "W",
                          "X",
                          "Y",
                          "Z"
                      ]
                  },
                  "type": "add_fields"
              },
              {
                  "fields": [
                      "mc_answer1",
                      "mc_answer2",
                      "mc_answer3",
                      "mc_answer4"
                  ],
                  "to_field": "choices",
                  "type": "list_field_values"
              },
              {
                  "mappers": {
                      "correct_answer_num": {
                          "1": "A",
                          "2": "B",
                          "3": "C",
                          "4": "D"
                      }
                  },
                  "type": "map_instance_values"
              },
              {
                  "index_of": "correct_answer_num",
                  "search_in": "numbering",
                  "to_field": "index",
                  "type": "index_of"
              },
              {
                  "field_to_field": {
                      "choices": "_choices",
                      "dialect": "topic",
                      "flores_passage": "context",
                      "index": "_index",
                      "numbering": "_numbering",
                      "question": "sentence1"
                  },
                  "type": "rename_fields"
              },
              {
                  "field": "_numbering",
                  "index": "_index",
                  "to_field": "number",
                  "type": "take_by_field"
              },
              {
                  "field": "_choices",
                  "index": "_index",
                  "to_field": "answer",
                  "type": "take_by_field"
              },
              {
                  "fields": [
                      "_numbering",
                      "_choices"
                  ],
                  "to_field": "choices",
                  "type": "zip_field_values"
              },
              {
                  "field": "choices/*",
                  "process_every_value": true,
                  "separator": ". ",
                  "to_field": "choices_list",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "field": "choices_list",
                  "index": "_index",
                  "to_field": "number_and_answer",
                  "type": "take_by_field"
              },
              {
                  "field": "choices/*/0",
                  "separator": ",",
                  "to_field": "numbers",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "add": [
                      ""
                  ],
                  "field": "choices_list",
                  "to_field": "choices_list",
                  "type": "add_constant"
              },
              {
                  "field": "choices_list",
                  "separator": "\n",
                  "to_field": "choices",
                  "type": "join_str"
              },
              {
                  "field_to_field": {
                      "number": "label"
                  },
                  "type": "rename_fields"
              }
          ],
          "task": {
              "inputs": [
                  "choices",
                  "sentence1",
                  "numbers",
                  "topic",
                  "context"
              ],
              "metrics": [
                  "metrics.accuracy"
              ],
              "outputs": [
                  "label"
              ],
              "type": "form_task"
          },
          "templates": "templates.qa.multiple_choice.context_no_intro.all",
          "type": "task_card"
      }

References: :ref:`metrics.accuracy <metrics.accuracy>`, :ref:`templates.qa.multiple_choice.context_no_intro.all <templates.qa.multiple_choice.context_no_intro.all>`

|
|



.. _cards.belebele.lvs_Latn:

----------

lvs_Latn
""""""""

.. note:: ID: ``cards.belebele.lvs_Latn``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "default",
              "path": "facebook/belebele",
              "split": "lvs_Latn",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "mapper": {
                      "lvs_Latn": "test"
                  },
                  "type": "rename_splits"
              },
              {
                  "fields": {
                      "numbering": [
                          "A",
                          "B",
                          "C",
                          "D",
                          "E",
                          "F",
                          "G",
                          "H",
                          "I",
                          "J",
                          "K",
                          "L",
                          "M",
                          "N",
                          "O",
                          "P",
                          "Q",
                          "R",
                          "S",
                          "T",
                          "U",
                          "V",
                          "W",
                          "X",
                          "Y",
                          "Z"
                      ]
                  },
                  "type": "add_fields"
              },
              {
                  "fields": [
                      "mc_answer1",
                      "mc_answer2",
                      "mc_answer3",
                      "mc_answer4"
                  ],
                  "to_field": "choices",
                  "type": "list_field_values"
              },
              {
                  "mappers": {
                      "correct_answer_num": {
                          "1": "A",
                          "2": "B",
                          "3": "C",
                          "4": "D"
                      }
                  },
                  "type": "map_instance_values"
              },
              {
                  "index_of": "correct_answer_num",
                  "search_in": "numbering",
                  "to_field": "index",
                  "type": "index_of"
              },
              {
                  "field_to_field": {
                      "choices": "_choices",
                      "dialect": "topic",
                      "flores_passage": "context",
                      "index": "_index",
                      "numbering": "_numbering",
                      "question": "sentence1"
                  },
                  "type": "rename_fields"
              },
              {
                  "field": "_numbering",
                  "index": "_index",
                  "to_field": "number",
                  "type": "take_by_field"
              },
              {
                  "field": "_choices",
                  "index": "_index",
                  "to_field": "answer",
                  "type": "take_by_field"
              },
              {
                  "fields": [
                      "_numbering",
                      "_choices"
                  ],
                  "to_field": "choices",
                  "type": "zip_field_values"
              },
              {
                  "field": "choices/*",
                  "process_every_value": true,
                  "separator": ". ",
                  "to_field": "choices_list",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "field": "choices_list",
                  "index": "_index",
                  "to_field": "number_and_answer",
                  "type": "take_by_field"
              },
              {
                  "field": "choices/*/0",
                  "separator": ",",
                  "to_field": "numbers",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "add": [
                      ""
                  ],
                  "field": "choices_list",
                  "to_field": "choices_list",
                  "type": "add_constant"
              },
              {
                  "field": "choices_list",
                  "separator": "\n",
                  "to_field": "choices",
                  "type": "join_str"
              },
              {
                  "field_to_field": {
                      "number": "label"
                  },
                  "type": "rename_fields"
              }
          ],
          "task": {
              "inputs": [
                  "choices",
                  "sentence1",
                  "numbers",
                  "topic",
                  "context"
              ],
              "metrics": [
                  "metrics.accuracy"
              ],
              "outputs": [
                  "label"
              ],
              "type": "form_task"
          },
          "templates": "templates.qa.multiple_choice.context_no_intro.all",
          "type": "task_card"
      }

References: :ref:`metrics.accuracy <metrics.accuracy>`, :ref:`templates.qa.multiple_choice.context_no_intro.all <templates.qa.multiple_choice.context_no_intro.all>`

|
|



.. _cards.belebele.ssw_Latn:

----------

ssw_Latn
""""""""

.. note:: ID: ``cards.belebele.ssw_Latn``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "default",
              "path": "facebook/belebele",
              "split": "ssw_Latn",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "mapper": {
                      "ssw_Latn": "test"
                  },
                  "type": "rename_splits"
              },
              {
                  "fields": {
                      "numbering": [
                          "A",
                          "B",
                          "C",
                          "D",
                          "E",
                          "F",
                          "G",
                          "H",
                          "I",
                          "J",
                          "K",
                          "L",
                          "M",
                          "N",
                          "O",
                          "P",
                          "Q",
                          "R",
                          "S",
                          "T",
                          "U",
                          "V",
                          "W",
                          "X",
                          "Y",
                          "Z"
                      ]
                  },
                  "type": "add_fields"
              },
              {
                  "fields": [
                      "mc_answer1",
                      "mc_answer2",
                      "mc_answer3",
                      "mc_answer4"
                  ],
                  "to_field": "choices",
                  "type": "list_field_values"
              },
              {
                  "mappers": {
                      "correct_answer_num": {
                          "1": "A",
                          "2": "B",
                          "3": "C",
                          "4": "D"
                      }
                  },
                  "type": "map_instance_values"
              },
              {
                  "index_of": "correct_answer_num",
                  "search_in": "numbering",
                  "to_field": "index",
                  "type": "index_of"
              },
              {
                  "field_to_field": {
                      "choices": "_choices",
                      "dialect": "topic",
                      "flores_passage": "context",
                      "index": "_index",
                      "numbering": "_numbering",
                      "question": "sentence1"
                  },
                  "type": "rename_fields"
              },
              {
                  "field": "_numbering",
                  "index": "_index",
                  "to_field": "number",
                  "type": "take_by_field"
              },
              {
                  "field": "_choices",
                  "index": "_index",
                  "to_field": "answer",
                  "type": "take_by_field"
              },
              {
                  "fields": [
                      "_numbering",
                      "_choices"
                  ],
                  "to_field": "choices",
                  "type": "zip_field_values"
              },
              {
                  "field": "choices/*",
                  "process_every_value": true,
                  "separator": ". ",
                  "to_field": "choices_list",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "field": "choices_list",
                  "index": "_index",
                  "to_field": "number_and_answer",
                  "type": "take_by_field"
              },
              {
                  "field": "choices/*/0",
                  "separator": ",",
                  "to_field": "numbers",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "add": [
                      ""
                  ],
                  "field": "choices_list",
                  "to_field": "choices_list",
                  "type": "add_constant"
              },
              {
                  "field": "choices_list",
                  "separator": "\n",
                  "to_field": "choices",
                  "type": "join_str"
              },
              {
                  "field_to_field": {
                      "number": "label"
                  },
                  "type": "rename_fields"
              }
          ],
          "task": {
              "inputs": [
                  "choices",
                  "sentence1",
                  "numbers",
                  "topic",
                  "context"
              ],
              "metrics": [
                  "metrics.accuracy"
              ],
              "outputs": [
                  "label"
              ],
              "type": "form_task"
          },
          "templates": "templates.qa.multiple_choice.context_no_intro.all",
          "type": "task_card"
      }

References: :ref:`metrics.accuracy <metrics.accuracy>`, :ref:`templates.qa.multiple_choice.context_no_intro.all <templates.qa.multiple_choice.context_no_intro.all>`

|
|



.. _cards.belebele.arz_Arab:

----------

arz_Arab
""""""""

.. note:: ID: ``cards.belebele.arz_Arab``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "default",
              "path": "facebook/belebele",
              "split": "arz_Arab",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "mapper": {
                      "arz_Arab": "test"
                  },
                  "type": "rename_splits"
              },
              {
                  "fields": {
                      "numbering": [
                          "A",
                          "B",
                          "C",
                          "D",
                          "E",
                          "F",
                          "G",
                          "H",
                          "I",
                          "J",
                          "K",
                          "L",
                          "M",
                          "N",
                          "O",
                          "P",
                          "Q",
                          "R",
                          "S",
                          "T",
                          "U",
                          "V",
                          "W",
                          "X",
                          "Y",
                          "Z"
                      ]
                  },
                  "type": "add_fields"
              },
              {
                  "fields": [
                      "mc_answer1",
                      "mc_answer2",
                      "mc_answer3",
                      "mc_answer4"
                  ],
                  "to_field": "choices",
                  "type": "list_field_values"
              },
              {
                  "mappers": {
                      "correct_answer_num": {
                          "1": "A",
                          "2": "B",
                          "3": "C",
                          "4": "D"
                      }
                  },
                  "type": "map_instance_values"
              },
              {
                  "index_of": "correct_answer_num",
                  "search_in": "numbering",
                  "to_field": "index",
                  "type": "index_of"
              },
              {
                  "field_to_field": {
                      "choices": "_choices",
                      "dialect": "topic",
                      "flores_passage": "context",
                      "index": "_index",
                      "numbering": "_numbering",
                      "question": "sentence1"
                  },
                  "type": "rename_fields"
              },
              {
                  "field": "_numbering",
                  "index": "_index",
                  "to_field": "number",
                  "type": "take_by_field"
              },
              {
                  "field": "_choices",
                  "index": "_index",
                  "to_field": "answer",
                  "type": "take_by_field"
              },
              {
                  "fields": [
                      "_numbering",
                      "_choices"
                  ],
                  "to_field": "choices",
                  "type": "zip_field_values"
              },
              {
                  "field": "choices/*",
                  "process_every_value": true,
                  "separator": ". ",
                  "to_field": "choices_list",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "field": "choices_list",
                  "index": "_index",
                  "to_field": "number_and_answer",
                  "type": "take_by_field"
              },
              {
                  "field": "choices/*/0",
                  "separator": ",",
                  "to_field": "numbers",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "add": [
                      ""
                  ],
                  "field": "choices_list",
                  "to_field": "choices_list",
                  "type": "add_constant"
              },
              {
                  "field": "choices_list",
                  "separator": "\n",
                  "to_field": "choices",
                  "type": "join_str"
              },
              {
                  "field_to_field": {
                      "number": "label"
                  },
                  "type": "rename_fields"
              }
          ],
          "task": {
              "inputs": [
                  "choices",
                  "sentence1",
                  "numbers",
                  "topic",
                  "context"
              ],
              "metrics": [
                  "metrics.accuracy"
              ],
              "outputs": [
                  "label"
              ],
              "type": "form_task"
          },
          "templates": "templates.qa.multiple_choice.context_no_intro.all",
          "type": "task_card"
      }

References: :ref:`metrics.accuracy <metrics.accuracy>`, :ref:`templates.qa.multiple_choice.context_no_intro.all <templates.qa.multiple_choice.context_no_intro.all>`

|
|



.. _cards.belebele.hye_Armn:

----------

hye_Armn
""""""""

.. note:: ID: ``cards.belebele.hye_Armn``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "default",
              "path": "facebook/belebele",
              "split": "hye_Armn",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "mapper": {
                      "hye_Armn": "test"
                  },
                  "type": "rename_splits"
              },
              {
                  "fields": {
                      "numbering": [
                          "A",
                          "B",
                          "C",
                          "D",
                          "E",
                          "F",
                          "G",
                          "H",
                          "I",
                          "J",
                          "K",
                          "L",
                          "M",
                          "N",
                          "O",
                          "P",
                          "Q",
                          "R",
                          "S",
                          "T",
                          "U",
                          "V",
                          "W",
                          "X",
                          "Y",
                          "Z"
                      ]
                  },
                  "type": "add_fields"
              },
              {
                  "fields": [
                      "mc_answer1",
                      "mc_answer2",
                      "mc_answer3",
                      "mc_answer4"
                  ],
                  "to_field": "choices",
                  "type": "list_field_values"
              },
              {
                  "mappers": {
                      "correct_answer_num": {
                          "1": "A",
                          "2": "B",
                          "3": "C",
                          "4": "D"
                      }
                  },
                  "type": "map_instance_values"
              },
              {
                  "index_of": "correct_answer_num",
                  "search_in": "numbering",
                  "to_field": "index",
                  "type": "index_of"
              },
              {
                  "field_to_field": {
                      "choices": "_choices",
                      "dialect": "topic",
                      "flores_passage": "context",
                      "index": "_index",
                      "numbering": "_numbering",
                      "question": "sentence1"
                  },
                  "type": "rename_fields"
              },
              {
                  "field": "_numbering",
                  "index": "_index",
                  "to_field": "number",
                  "type": "take_by_field"
              },
              {
                  "field": "_choices",
                  "index": "_index",
                  "to_field": "answer",
                  "type": "take_by_field"
              },
              {
                  "fields": [
                      "_numbering",
                      "_choices"
                  ],
                  "to_field": "choices",
                  "type": "zip_field_values"
              },
              {
                  "field": "choices/*",
                  "process_every_value": true,
                  "separator": ". ",
                  "to_field": "choices_list",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "field": "choices_list",
                  "index": "_index",
                  "to_field": "number_and_answer",
                  "type": "take_by_field"
              },
              {
                  "field": "choices/*/0",
                  "separator": ",",
                  "to_field": "numbers",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "add": [
                      ""
                  ],
                  "field": "choices_list",
                  "to_field": "choices_list",
                  "type": "add_constant"
              },
              {
                  "field": "choices_list",
                  "separator": "\n",
                  "to_field": "choices",
                  "type": "join_str"
              },
              {
                  "field_to_field": {
                      "number": "label"
                  },
                  "type": "rename_fields"
              }
          ],
          "task": {
              "inputs": [
                  "choices",
                  "sentence1",
                  "numbers",
                  "topic",
                  "context"
              ],
              "metrics": [
                  "metrics.accuracy"
              ],
              "outputs": [
                  "label"
              ],
              "type": "form_task"
          },
          "templates": "templates.qa.multiple_choice.context_no_intro.all",
          "type": "task_card"
      }

References: :ref:`metrics.accuracy <metrics.accuracy>`, :ref:`templates.qa.multiple_choice.context_no_intro.all <templates.qa.multiple_choice.context_no_intro.all>`

|
|



.. _cards.copa:

----------

copa
^^^^

.. note:: ID: ``cards.copa``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "copa",
              "path": "super_glue",
              "type": "load_hf"
          },
          "preprocess_steps": [
              "splitters.small_no_test",
              {
                  "fields": {
                      "numbering": [
                          "A",
                          "B",
                          "C",
                          "D",
                          "E",
                          "F",
                          "G",
                          "H",
                          "I",
                          "J",
                          "K",
                          "L",
                          "M",
                          "N",
                          "O",
                          "P",
                          "Q",
                          "R",
                          "S",
                          "T",
                          "U",
                          "V",
                          "W",
                          "X",
                          "Y",
                          "Z"
                      ],
                      "topic": "commonsense causal reasoning"
                  },
                  "type": "add_fields"
              },
              {
                  "fields": [
                      "choice1",
                      "choice2"
                  ],
                  "to_field": "choices",
                  "type": "list_field_values"
              },
              {
                  "field_to_field": {
                      "choices": "_choices",
                      "label": "_label",
                      "numbering": "_numbering",
                      "premise": "context",
                      "question": "sentence1",
                      "topic": "topic"
                  },
                  "type": "rename_fields"
              },
              {
                  "field": "_numbering",
                  "index": "_label",
                  "to_field": "number",
                  "type": "take_by_field"
              },
              {
                  "field": "_choices",
                  "index": "_label",
                  "to_field": "answer",
                  "type": "take_by_field"
              },
              {
                  "fields": [
                      "_numbering",
                      "_choices"
                  ],
                  "to_field": "choices",
                  "type": "zip_field_values"
              },
              {
                  "field": "choices/*",
                  "process_every_value": true,
                  "separator": ". ",
                  "to_field": "choices_list",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "field": "choices_list",
                  "index": "_label",
                  "to_field": "number_and_answer",
                  "type": "take_by_field"
              },
              {
                  "field": "choices/*/0",
                  "separator": ",",
                  "to_field": "numbers",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "add": [
                      ""
                  ],
                  "field": "choices_list",
                  "to_field": "choices_list",
                  "type": "add_constant"
              },
              {
                  "field": "choices_list",
                  "separator": "\n",
                  "to_field": "choices",
                  "type": "join_str"
              },
              {
                  "field_to_field": {
                      "number": "label"
                  },
                  "type": "rename_fields"
              }
          ],
          "task": {
              "inputs": [
                  "choices",
                  "sentence1",
                  "numbers",
                  "topic",
                  "context"
              ],
              "metrics": [
                  "metrics.accuracy"
              ],
              "outputs": [
                  "label"
              ],
              "type": "form_task"
          },
          "templates": {
              "items": [
                  {
                      "input_format": "What was the {sentence1} of the following:\n{context}\nAnswers: {choices}\nAnswer:",
                      "output_format": "{label}",
                      "type": "input_output_template"
                  }
              ],
              "type": "templates_list"
          },
          "type": "task_card"
      }

References: :ref:`metrics.accuracy <metrics.accuracy>`, :ref:`splitters.small_no_test <splitters.small_no_test>`

|
|



.. _.cards.mmlu:

----------

mmlu
^^^^



.. _cards.mmlu.high_school_biology:

----------

high_school_biology
"""""""""""""""""""

.. note:: ID: ``cards.mmlu.high_school_biology``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "high_school_biology",
              "path": "cais/mmlu",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "mapper": {
                      "auxiliary_train": "train"
                  },
                  "type": "rename_splits"
              },
              {
                  "fields": {
                      "numbering": [
                          "A",
                          "B",
                          "C",
                          "D",
                          "E",
                          "F",
                          "G",
                          "H",
                          "I",
                          "J",
                          "K",
                          "L",
                          "M",
                          "N",
                          "O",
                          "P",
                          "Q",
                          "R",
                          "S",
                          "T",
                          "U",
                          "V",
                          "W",
                          "X",
                          "Y",
                          "Z"
                      ],
                      "topic": "high school biology"
                  },
                  "type": "add_fields"
              },
              {
                  "field_to_field": {
                      "answer": "_answer",
                      "choices": "_choices",
                      "numbering": "_numbering",
                      "question": "sentence1",
                      "topic": "topic"
                  },
                  "type": "rename_fields"
              },
              {
                  "field": "_numbering",
                  "index": "_answer",
                  "to_field": "number",
                  "type": "take_by_field"
              },
              {
                  "field": "_choices",
                  "index": "_answer",
                  "to_field": "answer",
                  "type": "take_by_field"
              },
              {
                  "fields": [
                      "_numbering",
                      "_choices"
                  ],
                  "to_field": "choices",
                  "type": "zip_field_values"
              },
              {
                  "field": "choices/*",
                  "process_every_value": true,
                  "separator": ". ",
                  "to_field": "choices_list",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "field": "choices_list",
                  "index": "_answer",
                  "to_field": "number_and_answer",
                  "type": "take_by_field"
              },
              {
                  "field": "choices/*/0",
                  "separator": ",",
                  "to_field": "numbers",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "add": [
                      ""
                  ],
                  "field": "choices_list",
                  "to_field": "choices_list",
                  "type": "add_constant"
              },
              {
                  "field": "choices_list",
                  "separator": "\n",
                  "to_field": "choices",
                  "type": "join_str"
              },
              {
                  "field_to_field": {
                      "number": "label"
                  },
                  "type": "rename_fields"
              }
          ],
          "task": {
              "inputs": [
                  "choices",
                  "sentence1",
                  "numbers",
                  "topic"
              ],
              "metrics": [
                  "metrics.accuracy"
              ],
              "outputs": [
                  "label"
              ],
              "type": "form_task"
          },
          "templates": "templates.qa.multiple_choice.original.all",
          "type": "task_card"
      }

References: :ref:`metrics.accuracy <metrics.accuracy>`, :ref:`templates.qa.multiple_choice.original.all <templates.qa.multiple_choice.original.all>`

|
|



.. _cards.mmlu.business_ethics:

----------

business_ethics
"""""""""""""""

.. note:: ID: ``cards.mmlu.business_ethics``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "business_ethics",
              "path": "cais/mmlu",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "mapper": {
                      "auxiliary_train": "train"
                  },
                  "type": "rename_splits"
              },
              {
                  "fields": {
                      "numbering": [
                          "A",
                          "B",
                          "C",
                          "D",
                          "E",
                          "F",
                          "G",
                          "H",
                          "I",
                          "J",
                          "K",
                          "L",
                          "M",
                          "N",
                          "O",
                          "P",
                          "Q",
                          "R",
                          "S",
                          "T",
                          "U",
                          "V",
                          "W",
                          "X",
                          "Y",
                          "Z"
                      ],
                      "topic": "business ethics"
                  },
                  "type": "add_fields"
              },
              {
                  "field_to_field": {
                      "answer": "_answer",
                      "choices": "_choices",
                      "numbering": "_numbering",
                      "question": "sentence1",
                      "topic": "topic"
                  },
                  "type": "rename_fields"
              },
              {
                  "field": "_numbering",
                  "index": "_answer",
                  "to_field": "number",
                  "type": "take_by_field"
              },
              {
                  "field": "_choices",
                  "index": "_answer",
                  "to_field": "answer",
                  "type": "take_by_field"
              },
              {
                  "fields": [
                      "_numbering",
                      "_choices"
                  ],
                  "to_field": "choices",
                  "type": "zip_field_values"
              },
              {
                  "field": "choices/*",
                  "process_every_value": true,
                  "separator": ". ",
                  "to_field": "choices_list",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "field": "choices_list",
                  "index": "_answer",
                  "to_field": "number_and_answer",
                  "type": "take_by_field"
              },
              {
                  "field": "choices/*/0",
                  "separator": ",",
                  "to_field": "numbers",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "add": [
                      ""
                  ],
                  "field": "choices_list",
                  "to_field": "choices_list",
                  "type": "add_constant"
              },
              {
                  "field": "choices_list",
                  "separator": "\n",
                  "to_field": "choices",
                  "type": "join_str"
              },
              {
                  "field_to_field": {
                      "number": "label"
                  },
                  "type": "rename_fields"
              }
          ],
          "task": {
              "inputs": [
                  "choices",
                  "sentence1",
                  "numbers",
                  "topic"
              ],
              "metrics": [
                  "metrics.accuracy"
              ],
              "outputs": [
                  "label"
              ],
              "type": "form_task"
          },
          "templates": "templates.qa.multiple_choice.original.all",
          "type": "task_card"
      }

References: :ref:`metrics.accuracy <metrics.accuracy>`, :ref:`templates.qa.multiple_choice.original.all <templates.qa.multiple_choice.original.all>`

|
|



.. _cards.mmlu.world_religions:

----------

world_religions
"""""""""""""""

.. note:: ID: ``cards.mmlu.world_religions``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "world_religions",
              "path": "cais/mmlu",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "mapper": {
                      "auxiliary_train": "train"
                  },
                  "type": "rename_splits"
              },
              {
                  "fields": {
                      "numbering": [
                          "A",
                          "B",
                          "C",
                          "D",
                          "E",
                          "F",
                          "G",
                          "H",
                          "I",
                          "J",
                          "K",
                          "L",
                          "M",
                          "N",
                          "O",
                          "P",
                          "Q",
                          "R",
                          "S",
                          "T",
                          "U",
                          "V",
                          "W",
                          "X",
                          "Y",
                          "Z"
                      ],
                      "topic": "world religions"
                  },
                  "type": "add_fields"
              },
              {
                  "field_to_field": {
                      "answer": "_answer",
                      "choices": "_choices",
                      "numbering": "_numbering",
                      "question": "sentence1",
                      "topic": "topic"
                  },
                  "type": "rename_fields"
              },
              {
                  "field": "_numbering",
                  "index": "_answer",
                  "to_field": "number",
                  "type": "take_by_field"
              },
              {
                  "field": "_choices",
                  "index": "_answer",
                  "to_field": "answer",
                  "type": "take_by_field"
              },
              {
                  "fields": [
                      "_numbering",
                      "_choices"
                  ],
                  "to_field": "choices",
                  "type": "zip_field_values"
              },
              {
                  "field": "choices/*",
                  "process_every_value": true,
                  "separator": ". ",
                  "to_field": "choices_list",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "field": "choices_list",
                  "index": "_answer",
                  "to_field": "number_and_answer",
                  "type": "take_by_field"
              },
              {
                  "field": "choices/*/0",
                  "separator": ",",
                  "to_field": "numbers",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "add": [
                      ""
                  ],
                  "field": "choices_list",
                  "to_field": "choices_list",
                  "type": "add_constant"
              },
              {
                  "field": "choices_list",
                  "separator": "\n",
                  "to_field": "choices",
                  "type": "join_str"
              },
              {
                  "field_to_field": {
                      "number": "label"
                  },
                  "type": "rename_fields"
              }
          ],
          "task": {
              "inputs": [
                  "choices",
                  "sentence1",
                  "numbers",
                  "topic"
              ],
              "metrics": [
                  "metrics.accuracy"
              ],
              "outputs": [
                  "label"
              ],
              "type": "form_task"
          },
          "templates": "templates.qa.multiple_choice.original.all",
          "type": "task_card"
      }

References: :ref:`metrics.accuracy <metrics.accuracy>`, :ref:`templates.qa.multiple_choice.original.all <templates.qa.multiple_choice.original.all>`

|
|



.. _cards.mmlu.college_mathematics:

----------

college_mathematics
"""""""""""""""""""

.. note:: ID: ``cards.mmlu.college_mathematics``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "college_mathematics",
              "path": "cais/mmlu",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "mapper": {
                      "auxiliary_train": "train"
                  },
                  "type": "rename_splits"
              },
              {
                  "fields": {
                      "numbering": [
                          "A",
                          "B",
                          "C",
                          "D",
                          "E",
                          "F",
                          "G",
                          "H",
                          "I",
                          "J",
                          "K",
                          "L",
                          "M",
                          "N",
                          "O",
                          "P",
                          "Q",
                          "R",
                          "S",
                          "T",
                          "U",
                          "V",
                          "W",
                          "X",
                          "Y",
                          "Z"
                      ],
                      "topic": "college mathematics"
                  },
                  "type": "add_fields"
              },
              {
                  "field_to_field": {
                      "answer": "_answer",
                      "choices": "_choices",
                      "numbering": "_numbering",
                      "question": "sentence1",
                      "topic": "topic"
                  },
                  "type": "rename_fields"
              },
              {
                  "field": "_numbering",
                  "index": "_answer",
                  "to_field": "number",
                  "type": "take_by_field"
              },
              {
                  "field": "_choices",
                  "index": "_answer",
                  "to_field": "answer",
                  "type": "take_by_field"
              },
              {
                  "fields": [
                      "_numbering",
                      "_choices"
                  ],
                  "to_field": "choices",
                  "type": "zip_field_values"
              },
              {
                  "field": "choices/*",
                  "process_every_value": true,
                  "separator": ". ",
                  "to_field": "choices_list",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "field": "choices_list",
                  "index": "_answer",
                  "to_field": "number_and_answer",
                  "type": "take_by_field"
              },
              {
                  "field": "choices/*/0",
                  "separator": ",",
                  "to_field": "numbers",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "add": [
                      ""
                  ],
                  "field": "choices_list",
                  "to_field": "choices_list",
                  "type": "add_constant"
              },
              {
                  "field": "choices_list",
                  "separator": "\n",
                  "to_field": "choices",
                  "type": "join_str"
              },
              {
                  "field_to_field": {
                      "number": "label"
                  },
                  "type": "rename_fields"
              }
          ],
          "task": {
              "inputs": [
                  "choices",
                  "sentence1",
                  "numbers",
                  "topic"
              ],
              "metrics": [
                  "metrics.accuracy"
              ],
              "outputs": [
                  "label"
              ],
              "type": "form_task"
          },
          "templates": "templates.qa.multiple_choice.original.all",
          "type": "task_card"
      }

References: :ref:`metrics.accuracy <metrics.accuracy>`, :ref:`templates.qa.multiple_choice.original.all <templates.qa.multiple_choice.original.all>`

|
|



.. _cards.mmlu.electrical_engineering:

----------

electrical_engineering
""""""""""""""""""""""

.. note:: ID: ``cards.mmlu.electrical_engineering``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "electrical_engineering",
              "path": "cais/mmlu",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "mapper": {
                      "auxiliary_train": "train"
                  },
                  "type": "rename_splits"
              },
              {
                  "fields": {
                      "numbering": [
                          "A",
                          "B",
                          "C",
                          "D",
                          "E",
                          "F",
                          "G",
                          "H",
                          "I",
                          "J",
                          "K",
                          "L",
                          "M",
                          "N",
                          "O",
                          "P",
                          "Q",
                          "R",
                          "S",
                          "T",
                          "U",
                          "V",
                          "W",
                          "X",
                          "Y",
                          "Z"
                      ],
                      "topic": "electrical engineering"
                  },
                  "type": "add_fields"
              },
              {
                  "field_to_field": {
                      "answer": "_answer",
                      "choices": "_choices",
                      "numbering": "_numbering",
                      "question": "sentence1",
                      "topic": "topic"
                  },
                  "type": "rename_fields"
              },
              {
                  "field": "_numbering",
                  "index": "_answer",
                  "to_field": "number",
                  "type": "take_by_field"
              },
              {
                  "field": "_choices",
                  "index": "_answer",
                  "to_field": "answer",
                  "type": "take_by_field"
              },
              {
                  "fields": [
                      "_numbering",
                      "_choices"
                  ],
                  "to_field": "choices",
                  "type": "zip_field_values"
              },
              {
                  "field": "choices/*",
                  "process_every_value": true,
                  "separator": ". ",
                  "to_field": "choices_list",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "field": "choices_list",
                  "index": "_answer",
                  "to_field": "number_and_answer",
                  "type": "take_by_field"
              },
              {
                  "field": "choices/*/0",
                  "separator": ",",
                  "to_field": "numbers",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "add": [
                      ""
                  ],
                  "field": "choices_list",
                  "to_field": "choices_list",
                  "type": "add_constant"
              },
              {
                  "field": "choices_list",
                  "separator": "\n",
                  "to_field": "choices",
                  "type": "join_str"
              },
              {
                  "field_to_field": {
                      "number": "label"
                  },
                  "type": "rename_fields"
              }
          ],
          "task": {
              "inputs": [
                  "choices",
                  "sentence1",
                  "numbers",
                  "topic"
              ],
              "metrics": [
                  "metrics.accuracy"
              ],
              "outputs": [
                  "label"
              ],
              "type": "form_task"
          },
          "templates": "templates.qa.multiple_choice.original.all",
          "type": "task_card"
      }

References: :ref:`metrics.accuracy <metrics.accuracy>`, :ref:`templates.qa.multiple_choice.original.all <templates.qa.multiple_choice.original.all>`

|
|



.. _cards.mmlu.college_biology:

----------

college_biology
"""""""""""""""

.. note:: ID: ``cards.mmlu.college_biology``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "college_biology",
              "path": "cais/mmlu",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "mapper": {
                      "auxiliary_train": "train"
                  },
                  "type": "rename_splits"
              },
              {
                  "fields": {
                      "numbering": [
                          "A",
                          "B",
                          "C",
                          "D",
                          "E",
                          "F",
                          "G",
                          "H",
                          "I",
                          "J",
                          "K",
                          "L",
                          "M",
                          "N",
                          "O",
                          "P",
                          "Q",
                          "R",
                          "S",
                          "T",
                          "U",
                          "V",
                          "W",
                          "X",
                          "Y",
                          "Z"
                      ],
                      "topic": "college biology"
                  },
                  "type": "add_fields"
              },
              {
                  "field_to_field": {
                      "answer": "_answer",
                      "choices": "_choices",
                      "numbering": "_numbering",
                      "question": "sentence1",
                      "topic": "topic"
                  },
                  "type": "rename_fields"
              },
              {
                  "field": "_numbering",
                  "index": "_answer",
                  "to_field": "number",
                  "type": "take_by_field"
              },
              {
                  "field": "_choices",
                  "index": "_answer",
                  "to_field": "answer",
                  "type": "take_by_field"
              },
              {
                  "fields": [
                      "_numbering",
                      "_choices"
                  ],
                  "to_field": "choices",
                  "type": "zip_field_values"
              },
              {
                  "field": "choices/*",
                  "process_every_value": true,
                  "separator": ". ",
                  "to_field": "choices_list",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "field": "choices_list",
                  "index": "_answer",
                  "to_field": "number_and_answer",
                  "type": "take_by_field"
              },
              {
                  "field": "choices/*/0",
                  "separator": ",",
                  "to_field": "numbers",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "add": [
                      ""
                  ],
                  "field": "choices_list",
                  "to_field": "choices_list",
                  "type": "add_constant"
              },
              {
                  "field": "choices_list",
                  "separator": "\n",
                  "to_field": "choices",
                  "type": "join_str"
              },
              {
                  "field_to_field": {
                      "number": "label"
                  },
                  "type": "rename_fields"
              }
          ],
          "task": {
              "inputs": [
                  "choices",
                  "sentence1",
                  "numbers",
                  "topic"
              ],
              "metrics": [
                  "metrics.accuracy"
              ],
              "outputs": [
                  "label"
              ],
              "type": "form_task"
          },
          "templates": "templates.qa.multiple_choice.original.all",
          "type": "task_card"
      }

References: :ref:`metrics.accuracy <metrics.accuracy>`, :ref:`templates.qa.multiple_choice.original.all <templates.qa.multiple_choice.original.all>`

|
|



.. _cards.mmlu.computer_security:

----------

computer_security
"""""""""""""""""

.. note:: ID: ``cards.mmlu.computer_security``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "computer_security",
              "path": "cais/mmlu",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "mapper": {
                      "auxiliary_train": "train"
                  },
                  "type": "rename_splits"
              },
              {
                  "fields": {
                      "numbering": [
                          "A",
                          "B",
                          "C",
                          "D",
                          "E",
                          "F",
                          "G",
                          "H",
                          "I",
                          "J",
                          "K",
                          "L",
                          "M",
                          "N",
                          "O",
                          "P",
                          "Q",
                          "R",
                          "S",
                          "T",
                          "U",
                          "V",
                          "W",
                          "X",
                          "Y",
                          "Z"
                      ],
                      "topic": "computer security"
                  },
                  "type": "add_fields"
              },
              {
                  "field_to_field": {
                      "answer": "_answer",
                      "choices": "_choices",
                      "numbering": "_numbering",
                      "question": "sentence1",
                      "topic": "topic"
                  },
                  "type": "rename_fields"
              },
              {
                  "field": "_numbering",
                  "index": "_answer",
                  "to_field": "number",
                  "type": "take_by_field"
              },
              {
                  "field": "_choices",
                  "index": "_answer",
                  "to_field": "answer",
                  "type": "take_by_field"
              },
              {
                  "fields": [
                      "_numbering",
                      "_choices"
                  ],
                  "to_field": "choices",
                  "type": "zip_field_values"
              },
              {
                  "field": "choices/*",
                  "process_every_value": true,
                  "separator": ". ",
                  "to_field": "choices_list",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "field": "choices_list",
                  "index": "_answer",
                  "to_field": "number_and_answer",
                  "type": "take_by_field"
              },
              {
                  "field": "choices/*/0",
                  "separator": ",",
                  "to_field": "numbers",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "add": [
                      ""
                  ],
                  "field": "choices_list",
                  "to_field": "choices_list",
                  "type": "add_constant"
              },
              {
                  "field": "choices_list",
                  "separator": "\n",
                  "to_field": "choices",
                  "type": "join_str"
              },
              {
                  "field_to_field": {
                      "number": "label"
                  },
                  "type": "rename_fields"
              }
          ],
          "task": {
              "inputs": [
                  "choices",
                  "sentence1",
                  "numbers",
                  "topic"
              ],
              "metrics": [
                  "metrics.accuracy"
              ],
              "outputs": [
                  "label"
              ],
              "type": "form_task"
          },
          "templates": "templates.qa.multiple_choice.original.all",
          "type": "task_card"
      }

References: :ref:`metrics.accuracy <metrics.accuracy>`, :ref:`templates.qa.multiple_choice.original.all <templates.qa.multiple_choice.original.all>`

|
|



.. _cards.mmlu.high_school_mathematics:

----------

high_school_mathematics
"""""""""""""""""""""""

.. note:: ID: ``cards.mmlu.high_school_mathematics``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "high_school_mathematics",
              "path": "cais/mmlu",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "mapper": {
                      "auxiliary_train": "train"
                  },
                  "type": "rename_splits"
              },
              {
                  "fields": {
                      "numbering": [
                          "A",
                          "B",
                          "C",
                          "D",
                          "E",
                          "F",
                          "G",
                          "H",
                          "I",
                          "J",
                          "K",
                          "L",
                          "M",
                          "N",
                          "O",
                          "P",
                          "Q",
                          "R",
                          "S",
                          "T",
                          "U",
                          "V",
                          "W",
                          "X",
                          "Y",
                          "Z"
                      ],
                      "topic": "high school mathematics"
                  },
                  "type": "add_fields"
              },
              {
                  "field_to_field": {
                      "answer": "_answer",
                      "choices": "_choices",
                      "numbering": "_numbering",
                      "question": "sentence1",
                      "topic": "topic"
                  },
                  "type": "rename_fields"
              },
              {
                  "field": "_numbering",
                  "index": "_answer",
                  "to_field": "number",
                  "type": "take_by_field"
              },
              {
                  "field": "_choices",
                  "index": "_answer",
                  "to_field": "answer",
                  "type": "take_by_field"
              },
              {
                  "fields": [
                      "_numbering",
                      "_choices"
                  ],
                  "to_field": "choices",
                  "type": "zip_field_values"
              },
              {
                  "field": "choices/*",
                  "process_every_value": true,
                  "separator": ". ",
                  "to_field": "choices_list",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "field": "choices_list",
                  "index": "_answer",
                  "to_field": "number_and_answer",
                  "type": "take_by_field"
              },
              {
                  "field": "choices/*/0",
                  "separator": ",",
                  "to_field": "numbers",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "add": [
                      ""
                  ],
                  "field": "choices_list",
                  "to_field": "choices_list",
                  "type": "add_constant"
              },
              {
                  "field": "choices_list",
                  "separator": "\n",
                  "to_field": "choices",
                  "type": "join_str"
              },
              {
                  "field_to_field": {
                      "number": "label"
                  },
                  "type": "rename_fields"
              }
          ],
          "task": {
              "inputs": [
                  "choices",
                  "sentence1",
                  "numbers",
                  "topic"
              ],
              "metrics": [
                  "metrics.accuracy"
              ],
              "outputs": [
                  "label"
              ],
              "type": "form_task"
          },
          "templates": "templates.qa.multiple_choice.original.all",
          "type": "task_card"
      }

References: :ref:`metrics.accuracy <metrics.accuracy>`, :ref:`templates.qa.multiple_choice.original.all <templates.qa.multiple_choice.original.all>`

|
|



.. _cards.mmlu.marketing:

----------

marketing
"""""""""

.. note:: ID: ``cards.mmlu.marketing``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "marketing",
              "path": "cais/mmlu",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "mapper": {
                      "auxiliary_train": "train"
                  },
                  "type": "rename_splits"
              },
              {
                  "fields": {
                      "numbering": [
                          "A",
                          "B",
                          "C",
                          "D",
                          "E",
                          "F",
                          "G",
                          "H",
                          "I",
                          "J",
                          "K",
                          "L",
                          "M",
                          "N",
                          "O",
                          "P",
                          "Q",
                          "R",
                          "S",
                          "T",
                          "U",
                          "V",
                          "W",
                          "X",
                          "Y",
                          "Z"
                      ],
                      "topic": "marketing"
                  },
                  "type": "add_fields"
              },
              {
                  "field_to_field": {
                      "answer": "_answer",
                      "choices": "_choices",
                      "numbering": "_numbering",
                      "question": "sentence1",
                      "topic": "topic"
                  },
                  "type": "rename_fields"
              },
              {
                  "field": "_numbering",
                  "index": "_answer",
                  "to_field": "number",
                  "type": "take_by_field"
              },
              {
                  "field": "_choices",
                  "index": "_answer",
                  "to_field": "answer",
                  "type": "take_by_field"
              },
              {
                  "fields": [
                      "_numbering",
                      "_choices"
                  ],
                  "to_field": "choices",
                  "type": "zip_field_values"
              },
              {
                  "field": "choices/*",
                  "process_every_value": true,
                  "separator": ". ",
                  "to_field": "choices_list",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "field": "choices_list",
                  "index": "_answer",
                  "to_field": "number_and_answer",
                  "type": "take_by_field"
              },
              {
                  "field": "choices/*/0",
                  "separator": ",",
                  "to_field": "numbers",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "add": [
                      ""
                  ],
                  "field": "choices_list",
                  "to_field": "choices_list",
                  "type": "add_constant"
              },
              {
                  "field": "choices_list",
                  "separator": "\n",
                  "to_field": "choices",
                  "type": "join_str"
              },
              {
                  "field_to_field": {
                      "number": "label"
                  },
                  "type": "rename_fields"
              }
          ],
          "task": {
              "inputs": [
                  "choices",
                  "sentence1",
                  "numbers",
                  "topic"
              ],
              "metrics": [
                  "metrics.accuracy"
              ],
              "outputs": [
                  "label"
              ],
              "type": "form_task"
          },
          "templates": "templates.qa.multiple_choice.original.all",
          "type": "task_card"
      }

References: :ref:`metrics.accuracy <metrics.accuracy>`, :ref:`templates.qa.multiple_choice.original.all <templates.qa.multiple_choice.original.all>`

|
|



.. _cards.mmlu.college_medicine:

----------

college_medicine
""""""""""""""""

.. note:: ID: ``cards.mmlu.college_medicine``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "college_medicine",
              "path": "cais/mmlu",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "mapper": {
                      "auxiliary_train": "train"
                  },
                  "type": "rename_splits"
              },
              {
                  "fields": {
                      "numbering": [
                          "A",
                          "B",
                          "C",
                          "D",
                          "E",
                          "F",
                          "G",
                          "H",
                          "I",
                          "J",
                          "K",
                          "L",
                          "M",
                          "N",
                          "O",
                          "P",
                          "Q",
                          "R",
                          "S",
                          "T",
                          "U",
                          "V",
                          "W",
                          "X",
                          "Y",
                          "Z"
                      ],
                      "topic": "college medicine"
                  },
                  "type": "add_fields"
              },
              {
                  "field_to_field": {
                      "answer": "_answer",
                      "choices": "_choices",
                      "numbering": "_numbering",
                      "question": "sentence1",
                      "topic": "topic"
                  },
                  "type": "rename_fields"
              },
              {
                  "field": "_numbering",
                  "index": "_answer",
                  "to_field": "number",
                  "type": "take_by_field"
              },
              {
                  "field": "_choices",
                  "index": "_answer",
                  "to_field": "answer",
                  "type": "take_by_field"
              },
              {
                  "fields": [
                      "_numbering",
                      "_choices"
                  ],
                  "to_field": "choices",
                  "type": "zip_field_values"
              },
              {
                  "field": "choices/*",
                  "process_every_value": true,
                  "separator": ". ",
                  "to_field": "choices_list",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "field": "choices_list",
                  "index": "_answer",
                  "to_field": "number_and_answer",
                  "type": "take_by_field"
              },
              {
                  "field": "choices/*/0",
                  "separator": ",",
                  "to_field": "numbers",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "add": [
                      ""
                  ],
                  "field": "choices_list",
                  "to_field": "choices_list",
                  "type": "add_constant"
              },
              {
                  "field": "choices_list",
                  "separator": "\n",
                  "to_field": "choices",
                  "type": "join_str"
              },
              {
                  "field_to_field": {
                      "number": "label"
                  },
                  "type": "rename_fields"
              }
          ],
          "task": {
              "inputs": [
                  "choices",
                  "sentence1",
                  "numbers",
                  "topic"
              ],
              "metrics": [
                  "metrics.accuracy"
              ],
              "outputs": [
                  "label"
              ],
              "type": "form_task"
          },
          "templates": "templates.qa.multiple_choice.original.all",
          "type": "task_card"
      }

References: :ref:`metrics.accuracy <metrics.accuracy>`, :ref:`templates.qa.multiple_choice.original.all <templates.qa.multiple_choice.original.all>`

|
|



.. _cards.mmlu.nutrition:

----------

nutrition
"""""""""

.. note:: ID: ``cards.mmlu.nutrition``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "nutrition",
              "path": "cais/mmlu",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "mapper": {
                      "auxiliary_train": "train"
                  },
                  "type": "rename_splits"
              },
              {
                  "fields": {
                      "numbering": [
                          "A",
                          "B",
                          "C",
                          "D",
                          "E",
                          "F",
                          "G",
                          "H",
                          "I",
                          "J",
                          "K",
                          "L",
                          "M",
                          "N",
                          "O",
                          "P",
                          "Q",
                          "R",
                          "S",
                          "T",
                          "U",
                          "V",
                          "W",
                          "X",
                          "Y",
                          "Z"
                      ],
                      "topic": "nutrition"
                  },
                  "type": "add_fields"
              },
              {
                  "field_to_field": {
                      "answer": "_answer",
                      "choices": "_choices",
                      "numbering": "_numbering",
                      "question": "sentence1",
                      "topic": "topic"
                  },
                  "type": "rename_fields"
              },
              {
                  "field": "_numbering",
                  "index": "_answer",
                  "to_field": "number",
                  "type": "take_by_field"
              },
              {
                  "field": "_choices",
                  "index": "_answer",
                  "to_field": "answer",
                  "type": "take_by_field"
              },
              {
                  "fields": [
                      "_numbering",
                      "_choices"
                  ],
                  "to_field": "choices",
                  "type": "zip_field_values"
              },
              {
                  "field": "choices/*",
                  "process_every_value": true,
                  "separator": ". ",
                  "to_field": "choices_list",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "field": "choices_list",
                  "index": "_answer",
                  "to_field": "number_and_answer",
                  "type": "take_by_field"
              },
              {
                  "field": "choices/*/0",
                  "separator": ",",
                  "to_field": "numbers",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "add": [
                      ""
                  ],
                  "field": "choices_list",
                  "to_field": "choices_list",
                  "type": "add_constant"
              },
              {
                  "field": "choices_list",
                  "separator": "\n",
                  "to_field": "choices",
                  "type": "join_str"
              },
              {
                  "field_to_field": {
                      "number": "label"
                  },
                  "type": "rename_fields"
              }
          ],
          "task": {
              "inputs": [
                  "choices",
                  "sentence1",
                  "numbers",
                  "topic"
              ],
              "metrics": [
                  "metrics.accuracy"
              ],
              "outputs": [
                  "label"
              ],
              "type": "form_task"
          },
          "templates": "templates.qa.multiple_choice.original.all",
          "type": "task_card"
      }

References: :ref:`metrics.accuracy <metrics.accuracy>`, :ref:`templates.qa.multiple_choice.original.all <templates.qa.multiple_choice.original.all>`

|
|



.. _cards.mmlu.virology:

----------

virology
""""""""

.. note:: ID: ``cards.mmlu.virology``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "virology",
              "path": "cais/mmlu",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "mapper": {
                      "auxiliary_train": "train"
                  },
                  "type": "rename_splits"
              },
              {
                  "fields": {
                      "numbering": [
                          "A",
                          "B",
                          "C",
                          "D",
                          "E",
                          "F",
                          "G",
                          "H",
                          "I",
                          "J",
                          "K",
                          "L",
                          "M",
                          "N",
                          "O",
                          "P",
                          "Q",
                          "R",
                          "S",
                          "T",
                          "U",
                          "V",
                          "W",
                          "X",
                          "Y",
                          "Z"
                      ],
                      "topic": "virology"
                  },
                  "type": "add_fields"
              },
              {
                  "field_to_field": {
                      "answer": "_answer",
                      "choices": "_choices",
                      "numbering": "_numbering",
                      "question": "sentence1",
                      "topic": "topic"
                  },
                  "type": "rename_fields"
              },
              {
                  "field": "_numbering",
                  "index": "_answer",
                  "to_field": "number",
                  "type": "take_by_field"
              },
              {
                  "field": "_choices",
                  "index": "_answer",
                  "to_field": "answer",
                  "type": "take_by_field"
              },
              {
                  "fields": [
                      "_numbering",
                      "_choices"
                  ],
                  "to_field": "choices",
                  "type": "zip_field_values"
              },
              {
                  "field": "choices/*",
                  "process_every_value": true,
                  "separator": ". ",
                  "to_field": "choices_list",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "field": "choices_list",
                  "index": "_answer",
                  "to_field": "number_and_answer",
                  "type": "take_by_field"
              },
              {
                  "field": "choices/*/0",
                  "separator": ",",
                  "to_field": "numbers",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "add": [
                      ""
                  ],
                  "field": "choices_list",
                  "to_field": "choices_list",
                  "type": "add_constant"
              },
              {
                  "field": "choices_list",
                  "separator": "\n",
                  "to_field": "choices",
                  "type": "join_str"
              },
              {
                  "field_to_field": {
                      "number": "label"
                  },
                  "type": "rename_fields"
              }
          ],
          "task": {
              "inputs": [
                  "choices",
                  "sentence1",
                  "numbers",
                  "topic"
              ],
              "metrics": [
                  "metrics.accuracy"
              ],
              "outputs": [
                  "label"
              ],
              "type": "form_task"
          },
          "templates": "templates.qa.multiple_choice.original.all",
          "type": "task_card"
      }

References: :ref:`metrics.accuracy <metrics.accuracy>`, :ref:`templates.qa.multiple_choice.original.all <templates.qa.multiple_choice.original.all>`

|
|



.. _cards.mmlu.high_school_chemistry:

----------

high_school_chemistry
"""""""""""""""""""""

.. note:: ID: ``cards.mmlu.high_school_chemistry``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "high_school_chemistry",
              "path": "cais/mmlu",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "mapper": {
                      "auxiliary_train": "train"
                  },
                  "type": "rename_splits"
              },
              {
                  "fields": {
                      "numbering": [
                          "A",
                          "B",
                          "C",
                          "D",
                          "E",
                          "F",
                          "G",
                          "H",
                          "I",
                          "J",
                          "K",
                          "L",
                          "M",
                          "N",
                          "O",
                          "P",
                          "Q",
                          "R",
                          "S",
                          "T",
                          "U",
                          "V",
                          "W",
                          "X",
                          "Y",
                          "Z"
                      ],
                      "topic": "high school chemistry"
                  },
                  "type": "add_fields"
              },
              {
                  "field_to_field": {
                      "answer": "_answer",
                      "choices": "_choices",
                      "numbering": "_numbering",
                      "question": "sentence1",
                      "topic": "topic"
                  },
                  "type": "rename_fields"
              },
              {
                  "field": "_numbering",
                  "index": "_answer",
                  "to_field": "number",
                  "type": "take_by_field"
              },
              {
                  "field": "_choices",
                  "index": "_answer",
                  "to_field": "answer",
                  "type": "take_by_field"
              },
              {
                  "fields": [
                      "_numbering",
                      "_choices"
                  ],
                  "to_field": "choices",
                  "type": "zip_field_values"
              },
              {
                  "field": "choices/*",
                  "process_every_value": true,
                  "separator": ". ",
                  "to_field": "choices_list",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "field": "choices_list",
                  "index": "_answer",
                  "to_field": "number_and_answer",
                  "type": "take_by_field"
              },
              {
                  "field": "choices/*/0",
                  "separator": ",",
                  "to_field": "numbers",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "add": [
                      ""
                  ],
                  "field": "choices_list",
                  "to_field": "choices_list",
                  "type": "add_constant"
              },
              {
                  "field": "choices_list",
                  "separator": "\n",
                  "to_field": "choices",
                  "type": "join_str"
              },
              {
                  "field_to_field": {
                      "number": "label"
                  },
                  "type": "rename_fields"
              }
          ],
          "task": {
              "inputs": [
                  "choices",
                  "sentence1",
                  "numbers",
                  "topic"
              ],
              "metrics": [
                  "metrics.accuracy"
              ],
              "outputs": [
                  "label"
              ],
              "type": "form_task"
          },
          "templates": "templates.qa.multiple_choice.original.all",
          "type": "task_card"
      }

References: :ref:`metrics.accuracy <metrics.accuracy>`, :ref:`templates.qa.multiple_choice.original.all <templates.qa.multiple_choice.original.all>`

|
|



.. _cards.mmlu.philosophy:

----------

philosophy
""""""""""

.. note:: ID: ``cards.mmlu.philosophy``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "philosophy",
              "path": "cais/mmlu",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "mapper": {
                      "auxiliary_train": "train"
                  },
                  "type": "rename_splits"
              },
              {
                  "fields": {
                      "numbering": [
                          "A",
                          "B",
                          "C",
                          "D",
                          "E",
                          "F",
                          "G",
                          "H",
                          "I",
                          "J",
                          "K",
                          "L",
                          "M",
                          "N",
                          "O",
                          "P",
                          "Q",
                          "R",
                          "S",
                          "T",
                          "U",
                          "V",
                          "W",
                          "X",
                          "Y",
                          "Z"
                      ],
                      "topic": "philosophy"
                  },
                  "type": "add_fields"
              },
              {
                  "field_to_field": {
                      "answer": "_answer",
                      "choices": "_choices",
                      "numbering": "_numbering",
                      "question": "sentence1",
                      "topic": "topic"
                  },
                  "type": "rename_fields"
              },
              {
                  "field": "_numbering",
                  "index": "_answer",
                  "to_field": "number",
                  "type": "take_by_field"
              },
              {
                  "field": "_choices",
                  "index": "_answer",
                  "to_field": "answer",
                  "type": "take_by_field"
              },
              {
                  "fields": [
                      "_numbering",
                      "_choices"
                  ],
                  "to_field": "choices",
                  "type": "zip_field_values"
              },
              {
                  "field": "choices/*",
                  "process_every_value": true,
                  "separator": ". ",
                  "to_field": "choices_list",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "field": "choices_list",
                  "index": "_answer",
                  "to_field": "number_and_answer",
                  "type": "take_by_field"
              },
              {
                  "field": "choices/*/0",
                  "separator": ",",
                  "to_field": "numbers",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "add": [
                      ""
                  ],
                  "field": "choices_list",
                  "to_field": "choices_list",
                  "type": "add_constant"
              },
              {
                  "field": "choices_list",
                  "separator": "\n",
                  "to_field": "choices",
                  "type": "join_str"
              },
              {
                  "field_to_field": {
                      "number": "label"
                  },
                  "type": "rename_fields"
              }
          ],
          "task": {
              "inputs": [
                  "choices",
                  "sentence1",
                  "numbers",
                  "topic"
              ],
              "metrics": [
                  "metrics.accuracy"
              ],
              "outputs": [
                  "label"
              ],
              "type": "form_task"
          },
          "templates": "templates.qa.multiple_choice.original.all",
          "type": "task_card"
      }

References: :ref:`metrics.accuracy <metrics.accuracy>`, :ref:`templates.qa.multiple_choice.original.all <templates.qa.multiple_choice.original.all>`

|
|



.. _cards.mmlu.prehistory:

----------

prehistory
""""""""""

.. note:: ID: ``cards.mmlu.prehistory``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "prehistory",
              "path": "cais/mmlu",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "mapper": {
                      "auxiliary_train": "train"
                  },
                  "type": "rename_splits"
              },
              {
                  "fields": {
                      "numbering": [
                          "A",
                          "B",
                          "C",
                          "D",
                          "E",
                          "F",
                          "G",
                          "H",
                          "I",
                          "J",
                          "K",
                          "L",
                          "M",
                          "N",
                          "O",
                          "P",
                          "Q",
                          "R",
                          "S",
                          "T",
                          "U",
                          "V",
                          "W",
                          "X",
                          "Y",
                          "Z"
                      ],
                      "topic": "prehistory"
                  },
                  "type": "add_fields"
              },
              {
                  "field_to_field": {
                      "answer": "_answer",
                      "choices": "_choices",
                      "numbering": "_numbering",
                      "question": "sentence1",
                      "topic": "topic"
                  },
                  "type": "rename_fields"
              },
              {
                  "field": "_numbering",
                  "index": "_answer",
                  "to_field": "number",
                  "type": "take_by_field"
              },
              {
                  "field": "_choices",
                  "index": "_answer",
                  "to_field": "answer",
                  "type": "take_by_field"
              },
              {
                  "fields": [
                      "_numbering",
                      "_choices"
                  ],
                  "to_field": "choices",
                  "type": "zip_field_values"
              },
              {
                  "field": "choices/*",
                  "process_every_value": true,
                  "separator": ". ",
                  "to_field": "choices_list",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "field": "choices_list",
                  "index": "_answer",
                  "to_field": "number_and_answer",
                  "type": "take_by_field"
              },
              {
                  "field": "choices/*/0",
                  "separator": ",",
                  "to_field": "numbers",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "add": [
                      ""
                  ],
                  "field": "choices_list",
                  "to_field": "choices_list",
                  "type": "add_constant"
              },
              {
                  "field": "choices_list",
                  "separator": "\n",
                  "to_field": "choices",
                  "type": "join_str"
              },
              {
                  "field_to_field": {
                      "number": "label"
                  },
                  "type": "rename_fields"
              }
          ],
          "task": {
              "inputs": [
                  "choices",
                  "sentence1",
                  "numbers",
                  "topic"
              ],
              "metrics": [
                  "metrics.accuracy"
              ],
              "outputs": [
                  "label"
              ],
              "type": "form_task"
          },
          "templates": "templates.qa.multiple_choice.original.all",
          "type": "task_card"
      }

References: :ref:`metrics.accuracy <metrics.accuracy>`, :ref:`templates.qa.multiple_choice.original.all <templates.qa.multiple_choice.original.all>`

|
|



.. _cards.mmlu.high_school_macroeconomics:

----------

high_school_macroeconomics
""""""""""""""""""""""""""

.. note:: ID: ``cards.mmlu.high_school_macroeconomics``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "high_school_macroeconomics",
              "path": "cais/mmlu",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "mapper": {
                      "auxiliary_train": "train"
                  },
                  "type": "rename_splits"
              },
              {
                  "fields": {
                      "numbering": [
                          "A",
                          "B",
                          "C",
                          "D",
                          "E",
                          "F",
                          "G",
                          "H",
                          "I",
                          "J",
                          "K",
                          "L",
                          "M",
                          "N",
                          "O",
                          "P",
                          "Q",
                          "R",
                          "S",
                          "T",
                          "U",
                          "V",
                          "W",
                          "X",
                          "Y",
                          "Z"
                      ],
                      "topic": "high school macroeconomics"
                  },
                  "type": "add_fields"
              },
              {
                  "field_to_field": {
                      "answer": "_answer",
                      "choices": "_choices",
                      "numbering": "_numbering",
                      "question": "sentence1",
                      "topic": "topic"
                  },
                  "type": "rename_fields"
              },
              {
                  "field": "_numbering",
                  "index": "_answer",
                  "to_field": "number",
                  "type": "take_by_field"
              },
              {
                  "field": "_choices",
                  "index": "_answer",
                  "to_field": "answer",
                  "type": "take_by_field"
              },
              {
                  "fields": [
                      "_numbering",
                      "_choices"
                  ],
                  "to_field": "choices",
                  "type": "zip_field_values"
              },
              {
                  "field": "choices/*",
                  "process_every_value": true,
                  "separator": ". ",
                  "to_field": "choices_list",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "field": "choices_list",
                  "index": "_answer",
                  "to_field": "number_and_answer",
                  "type": "take_by_field"
              },
              {
                  "field": "choices/*/0",
                  "separator": ",",
                  "to_field": "numbers",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "add": [
                      ""
                  ],
                  "field": "choices_list",
                  "to_field": "choices_list",
                  "type": "add_constant"
              },
              {
                  "field": "choices_list",
                  "separator": "\n",
                  "to_field": "choices",
                  "type": "join_str"
              },
              {
                  "field_to_field": {
                      "number": "label"
                  },
                  "type": "rename_fields"
              }
          ],
          "task": {
              "inputs": [
                  "choices",
                  "sentence1",
                  "numbers",
                  "topic"
              ],
              "metrics": [
                  "metrics.accuracy"
              ],
              "outputs": [
                  "label"
              ],
              "type": "form_task"
          },
          "templates": "templates.qa.multiple_choice.original.all",
          "type": "task_card"
      }

References: :ref:`metrics.accuracy <metrics.accuracy>`, :ref:`templates.qa.multiple_choice.original.all <templates.qa.multiple_choice.original.all>`

|
|



.. _cards.mmlu.security_studies:

----------

security_studies
""""""""""""""""

.. note:: ID: ``cards.mmlu.security_studies``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "security_studies",
              "path": "cais/mmlu",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "mapper": {
                      "auxiliary_train": "train"
                  },
                  "type": "rename_splits"
              },
              {
                  "fields": {
                      "numbering": [
                          "A",
                          "B",
                          "C",
                          "D",
                          "E",
                          "F",
                          "G",
                          "H",
                          "I",
                          "J",
                          "K",
                          "L",
                          "M",
                          "N",
                          "O",
                          "P",
                          "Q",
                          "R",
                          "S",
                          "T",
                          "U",
                          "V",
                          "W",
                          "X",
                          "Y",
                          "Z"
                      ],
                      "topic": "security studies"
                  },
                  "type": "add_fields"
              },
              {
                  "field_to_field": {
                      "answer": "_answer",
                      "choices": "_choices",
                      "numbering": "_numbering",
                      "question": "sentence1",
                      "topic": "topic"
                  },
                  "type": "rename_fields"
              },
              {
                  "field": "_numbering",
                  "index": "_answer",
                  "to_field": "number",
                  "type": "take_by_field"
              },
              {
                  "field": "_choices",
                  "index": "_answer",
                  "to_field": "answer",
                  "type": "take_by_field"
              },
              {
                  "fields": [
                      "_numbering",
                      "_choices"
                  ],
                  "to_field": "choices",
                  "type": "zip_field_values"
              },
              {
                  "field": "choices/*",
                  "process_every_value": true,
                  "separator": ". ",
                  "to_field": "choices_list",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "field": "choices_list",
                  "index": "_answer",
                  "to_field": "number_and_answer",
                  "type": "take_by_field"
              },
              {
                  "field": "choices/*/0",
                  "separator": ",",
                  "to_field": "numbers",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "add": [
                      ""
                  ],
                  "field": "choices_list",
                  "to_field": "choices_list",
                  "type": "add_constant"
              },
              {
                  "field": "choices_list",
                  "separator": "\n",
                  "to_field": "choices",
                  "type": "join_str"
              },
              {
                  "field_to_field": {
                      "number": "label"
                  },
                  "type": "rename_fields"
              }
          ],
          "task": {
              "inputs": [
                  "choices",
                  "sentence1",
                  "numbers",
                  "topic"
              ],
              "metrics": [
                  "metrics.accuracy"
              ],
              "outputs": [
                  "label"
              ],
              "type": "form_task"
          },
          "templates": "templates.qa.multiple_choice.original.all",
          "type": "task_card"
      }

References: :ref:`metrics.accuracy <metrics.accuracy>`, :ref:`templates.qa.multiple_choice.original.all <templates.qa.multiple_choice.original.all>`

|
|



.. _cards.mmlu.formal_logic:

----------

formal_logic
""""""""""""

.. note:: ID: ``cards.mmlu.formal_logic``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "formal_logic",
              "path": "cais/mmlu",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "mapper": {
                      "auxiliary_train": "train"
                  },
                  "type": "rename_splits"
              },
              {
                  "fields": {
                      "numbering": [
                          "A",
                          "B",
                          "C",
                          "D",
                          "E",
                          "F",
                          "G",
                          "H",
                          "I",
                          "J",
                          "K",
                          "L",
                          "M",
                          "N",
                          "O",
                          "P",
                          "Q",
                          "R",
                          "S",
                          "T",
                          "U",
                          "V",
                          "W",
                          "X",
                          "Y",
                          "Z"
                      ],
                      "topic": "formal logic"
                  },
                  "type": "add_fields"
              },
              {
                  "field_to_field": {
                      "answer": "_answer",
                      "choices": "_choices",
                      "numbering": "_numbering",
                      "question": "sentence1",
                      "topic": "topic"
                  },
                  "type": "rename_fields"
              },
              {
                  "field": "_numbering",
                  "index": "_answer",
                  "to_field": "number",
                  "type": "take_by_field"
              },
              {
                  "field": "_choices",
                  "index": "_answer",
                  "to_field": "answer",
                  "type": "take_by_field"
              },
              {
                  "fields": [
                      "_numbering",
                      "_choices"
                  ],
                  "to_field": "choices",
                  "type": "zip_field_values"
              },
              {
                  "field": "choices/*",
                  "process_every_value": true,
                  "separator": ". ",
                  "to_field": "choices_list",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "field": "choices_list",
                  "index": "_answer",
                  "to_field": "number_and_answer",
                  "type": "take_by_field"
              },
              {
                  "field": "choices/*/0",
                  "separator": ",",
                  "to_field": "numbers",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "add": [
                      ""
                  ],
                  "field": "choices_list",
                  "to_field": "choices_list",
                  "type": "add_constant"
              },
              {
                  "field": "choices_list",
                  "separator": "\n",
                  "to_field": "choices",
                  "type": "join_str"
              },
              {
                  "field_to_field": {
                      "number": "label"
                  },
                  "type": "rename_fields"
              }
          ],
          "task": {
              "inputs": [
                  "choices",
                  "sentence1",
                  "numbers",
                  "topic"
              ],
              "metrics": [
                  "metrics.accuracy"
              ],
              "outputs": [
                  "label"
              ],
              "type": "form_task"
          },
          "templates": "templates.qa.multiple_choice.original.all",
          "type": "task_card"
      }

References: :ref:`metrics.accuracy <metrics.accuracy>`, :ref:`templates.qa.multiple_choice.original.all <templates.qa.multiple_choice.original.all>`

|
|



.. _cards.mmlu.anatomy:

----------

anatomy
"""""""

.. note:: ID: ``cards.mmlu.anatomy``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "anatomy",
              "path": "cais/mmlu",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "mapper": {
                      "auxiliary_train": "train"
                  },
                  "type": "rename_splits"
              },
              {
                  "fields": {
                      "numbering": [
                          "A",
                          "B",
                          "C",
                          "D",
                          "E",
                          "F",
                          "G",
                          "H",
                          "I",
                          "J",
                          "K",
                          "L",
                          "M",
                          "N",
                          "O",
                          "P",
                          "Q",
                          "R",
                          "S",
                          "T",
                          "U",
                          "V",
                          "W",
                          "X",
                          "Y",
                          "Z"
                      ],
                      "topic": "anatomy"
                  },
                  "type": "add_fields"
              },
              {
                  "field_to_field": {
                      "answer": "_answer",
                      "choices": "_choices",
                      "numbering": "_numbering",
                      "question": "sentence1",
                      "topic": "topic"
                  },
                  "type": "rename_fields"
              },
              {
                  "field": "_numbering",
                  "index": "_answer",
                  "to_field": "number",
                  "type": "take_by_field"
              },
              {
                  "field": "_choices",
                  "index": "_answer",
                  "to_field": "answer",
                  "type": "take_by_field"
              },
              {
                  "fields": [
                      "_numbering",
                      "_choices"
                  ],
                  "to_field": "choices",
                  "type": "zip_field_values"
              },
              {
                  "field": "choices/*",
                  "process_every_value": true,
                  "separator": ". ",
                  "to_field": "choices_list",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "field": "choices_list",
                  "index": "_answer",
                  "to_field": "number_and_answer",
                  "type": "take_by_field"
              },
              {
                  "field": "choices/*/0",
                  "separator": ",",
                  "to_field": "numbers",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "add": [
                      ""
                  ],
                  "field": "choices_list",
                  "to_field": "choices_list",
                  "type": "add_constant"
              },
              {
                  "field": "choices_list",
                  "separator": "\n",
                  "to_field": "choices",
                  "type": "join_str"
              },
              {
                  "field_to_field": {
                      "number": "label"
                  },
                  "type": "rename_fields"
              }
          ],
          "task": {
              "inputs": [
                  "choices",
                  "sentence1",
                  "numbers",
                  "topic"
              ],
              "metrics": [
                  "metrics.accuracy"
              ],
              "outputs": [
                  "label"
              ],
              "type": "form_task"
          },
          "templates": "templates.qa.multiple_choice.original.all",
          "type": "task_card"
      }

References: :ref:`metrics.accuracy <metrics.accuracy>`, :ref:`templates.qa.multiple_choice.original.all <templates.qa.multiple_choice.original.all>`

|
|



.. _cards.mmlu.high_school_psychology:

----------

high_school_psychology
""""""""""""""""""""""

.. note:: ID: ``cards.mmlu.high_school_psychology``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "high_school_psychology",
              "path": "cais/mmlu",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "mapper": {
                      "auxiliary_train": "train"
                  },
                  "type": "rename_splits"
              },
              {
                  "fields": {
                      "numbering": [
                          "A",
                          "B",
                          "C",
                          "D",
                          "E",
                          "F",
                          "G",
                          "H",
                          "I",
                          "J",
                          "K",
                          "L",
                          "M",
                          "N",
                          "O",
                          "P",
                          "Q",
                          "R",
                          "S",
                          "T",
                          "U",
                          "V",
                          "W",
                          "X",
                          "Y",
                          "Z"
                      ],
                      "topic": "high school psychology"
                  },
                  "type": "add_fields"
              },
              {
                  "field_to_field": {
                      "answer": "_answer",
                      "choices": "_choices",
                      "numbering": "_numbering",
                      "question": "sentence1",
                      "topic": "topic"
                  },
                  "type": "rename_fields"
              },
              {
                  "field": "_numbering",
                  "index": "_answer",
                  "to_field": "number",
                  "type": "take_by_field"
              },
              {
                  "field": "_choices",
                  "index": "_answer",
                  "to_field": "answer",
                  "type": "take_by_field"
              },
              {
                  "fields": [
                      "_numbering",
                      "_choices"
                  ],
                  "to_field": "choices",
                  "type": "zip_field_values"
              },
              {
                  "field": "choices/*",
                  "process_every_value": true,
                  "separator": ". ",
                  "to_field": "choices_list",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "field": "choices_list",
                  "index": "_answer",
                  "to_field": "number_and_answer",
                  "type": "take_by_field"
              },
              {
                  "field": "choices/*/0",
                  "separator": ",",
                  "to_field": "numbers",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "add": [
                      ""
                  ],
                  "field": "choices_list",
                  "to_field": "choices_list",
                  "type": "add_constant"
              },
              {
                  "field": "choices_list",
                  "separator": "\n",
                  "to_field": "choices",
                  "type": "join_str"
              },
              {
                  "field_to_field": {
                      "number": "label"
                  },
                  "type": "rename_fields"
              }
          ],
          "task": {
              "inputs": [
                  "choices",
                  "sentence1",
                  "numbers",
                  "topic"
              ],
              "metrics": [
                  "metrics.accuracy"
              ],
              "outputs": [
                  "label"
              ],
              "type": "form_task"
          },
          "templates": "templates.qa.multiple_choice.original.all",
          "type": "task_card"
      }

References: :ref:`metrics.accuracy <metrics.accuracy>`, :ref:`templates.qa.multiple_choice.original.all <templates.qa.multiple_choice.original.all>`

|
|



.. _cards.mmlu.high_school_world_history:

----------

high_school_world_history
"""""""""""""""""""""""""

.. note:: ID: ``cards.mmlu.high_school_world_history``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "high_school_world_history",
              "path": "cais/mmlu",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "mapper": {
                      "auxiliary_train": "train"
                  },
                  "type": "rename_splits"
              },
              {
                  "fields": {
                      "numbering": [
                          "A",
                          "B",
                          "C",
                          "D",
                          "E",
                          "F",
                          "G",
                          "H",
                          "I",
                          "J",
                          "K",
                          "L",
                          "M",
                          "N",
                          "O",
                          "P",
                          "Q",
                          "R",
                          "S",
                          "T",
                          "U",
                          "V",
                          "W",
                          "X",
                          "Y",
                          "Z"
                      ],
                      "topic": "high school world history"
                  },
                  "type": "add_fields"
              },
              {
                  "field_to_field": {
                      "answer": "_answer",
                      "choices": "_choices",
                      "numbering": "_numbering",
                      "question": "sentence1",
                      "topic": "topic"
                  },
                  "type": "rename_fields"
              },
              {
                  "field": "_numbering",
                  "index": "_answer",
                  "to_field": "number",
                  "type": "take_by_field"
              },
              {
                  "field": "_choices",
                  "index": "_answer",
                  "to_field": "answer",
                  "type": "take_by_field"
              },
              {
                  "fields": [
                      "_numbering",
                      "_choices"
                  ],
                  "to_field": "choices",
                  "type": "zip_field_values"
              },
              {
                  "field": "choices/*",
                  "process_every_value": true,
                  "separator": ". ",
                  "to_field": "choices_list",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "field": "choices_list",
                  "index": "_answer",
                  "to_field": "number_and_answer",
                  "type": "take_by_field"
              },
              {
                  "field": "choices/*/0",
                  "separator": ",",
                  "to_field": "numbers",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "add": [
                      ""
                  ],
                  "field": "choices_list",
                  "to_field": "choices_list",
                  "type": "add_constant"
              },
              {
                  "field": "choices_list",
                  "separator": "\n",
                  "to_field": "choices",
                  "type": "join_str"
              },
              {
                  "field_to_field": {
                      "number": "label"
                  },
                  "type": "rename_fields"
              }
          ],
          "task": {
              "inputs": [
                  "choices",
                  "sentence1",
                  "numbers",
                  "topic"
              ],
              "metrics": [
                  "metrics.accuracy"
              ],
              "outputs": [
                  "label"
              ],
              "type": "form_task"
          },
          "templates": "templates.qa.multiple_choice.original.all",
          "type": "task_card"
      }

References: :ref:`metrics.accuracy <metrics.accuracy>`, :ref:`templates.qa.multiple_choice.original.all <templates.qa.multiple_choice.original.all>`

|
|



.. _cards.mmlu.astronomy:

----------

astronomy
"""""""""

.. note:: ID: ``cards.mmlu.astronomy``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "astronomy",
              "path": "cais/mmlu",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "mapper": {
                      "auxiliary_train": "train"
                  },
                  "type": "rename_splits"
              },
              {
                  "fields": {
                      "numbering": [
                          "A",
                          "B",
                          "C",
                          "D",
                          "E",
                          "F",
                          "G",
                          "H",
                          "I",
                          "J",
                          "K",
                          "L",
                          "M",
                          "N",
                          "O",
                          "P",
                          "Q",
                          "R",
                          "S",
                          "T",
                          "U",
                          "V",
                          "W",
                          "X",
                          "Y",
                          "Z"
                      ],
                      "topic": "astronomy"
                  },
                  "type": "add_fields"
              },
              {
                  "field_to_field": {
                      "answer": "_answer",
                      "choices": "_choices",
                      "numbering": "_numbering",
                      "question": "sentence1",
                      "topic": "topic"
                  },
                  "type": "rename_fields"
              },
              {
                  "field": "_numbering",
                  "index": "_answer",
                  "to_field": "number",
                  "type": "take_by_field"
              },
              {
                  "field": "_choices",
                  "index": "_answer",
                  "to_field": "answer",
                  "type": "take_by_field"
              },
              {
                  "fields": [
                      "_numbering",
                      "_choices"
                  ],
                  "to_field": "choices",
                  "type": "zip_field_values"
              },
              {
                  "field": "choices/*",
                  "process_every_value": true,
                  "separator": ". ",
                  "to_field": "choices_list",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "field": "choices_list",
                  "index": "_answer",
                  "to_field": "number_and_answer",
                  "type": "take_by_field"
              },
              {
                  "field": "choices/*/0",
                  "separator": ",",
                  "to_field": "numbers",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "add": [
                      ""
                  ],
                  "field": "choices_list",
                  "to_field": "choices_list",
                  "type": "add_constant"
              },
              {
                  "field": "choices_list",
                  "separator": "\n",
                  "to_field": "choices",
                  "type": "join_str"
              },
              {
                  "field_to_field": {
                      "number": "label"
                  },
                  "type": "rename_fields"
              }
          ],
          "task": {
              "inputs": [
                  "choices",
                  "sentence1",
                  "numbers",
                  "topic"
              ],
              "metrics": [
                  "metrics.accuracy"
              ],
              "outputs": [
                  "label"
              ],
              "type": "form_task"
          },
          "templates": "templates.qa.multiple_choice.original.all",
          "type": "task_card"
      }

References: :ref:`metrics.accuracy <metrics.accuracy>`, :ref:`templates.qa.multiple_choice.original.all <templates.qa.multiple_choice.original.all>`

|
|



.. _cards.mmlu.miscellaneous:

----------

miscellaneous
"""""""""""""

.. note:: ID: ``cards.mmlu.miscellaneous``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "miscellaneous",
              "path": "cais/mmlu",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "mapper": {
                      "auxiliary_train": "train"
                  },
                  "type": "rename_splits"
              },
              {
                  "fields": {
                      "numbering": [
                          "A",
                          "B",
                          "C",
                          "D",
                          "E",
                          "F",
                          "G",
                          "H",
                          "I",
                          "J",
                          "K",
                          "L",
                          "M",
                          "N",
                          "O",
                          "P",
                          "Q",
                          "R",
                          "S",
                          "T",
                          "U",
                          "V",
                          "W",
                          "X",
                          "Y",
                          "Z"
                      ],
                      "topic": "miscellaneous"
                  },
                  "type": "add_fields"
              },
              {
                  "field_to_field": {
                      "answer": "_answer",
                      "choices": "_choices",
                      "numbering": "_numbering",
                      "question": "sentence1",
                      "topic": "topic"
                  },
                  "type": "rename_fields"
              },
              {
                  "field": "_numbering",
                  "index": "_answer",
                  "to_field": "number",
                  "type": "take_by_field"
              },
              {
                  "field": "_choices",
                  "index": "_answer",
                  "to_field": "answer",
                  "type": "take_by_field"
              },
              {
                  "fields": [
                      "_numbering",
                      "_choices"
                  ],
                  "to_field": "choices",
                  "type": "zip_field_values"
              },
              {
                  "field": "choices/*",
                  "process_every_value": true,
                  "separator": ". ",
                  "to_field": "choices_list",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "field": "choices_list",
                  "index": "_answer",
                  "to_field": "number_and_answer",
                  "type": "take_by_field"
              },
              {
                  "field": "choices/*/0",
                  "separator": ",",
                  "to_field": "numbers",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "add": [
                      ""
                  ],
                  "field": "choices_list",
                  "to_field": "choices_list",
                  "type": "add_constant"
              },
              {
                  "field": "choices_list",
                  "separator": "\n",
                  "to_field": "choices",
                  "type": "join_str"
              },
              {
                  "field_to_field": {
                      "number": "label"
                  },
                  "type": "rename_fields"
              }
          ],
          "task": {
              "inputs": [
                  "choices",
                  "sentence1",
                  "numbers",
                  "topic"
              ],
              "metrics": [
                  "metrics.accuracy"
              ],
              "outputs": [
                  "label"
              ],
              "type": "form_task"
          },
          "templates": "templates.qa.multiple_choice.original.all",
          "type": "task_card"
      }

References: :ref:`metrics.accuracy <metrics.accuracy>`, :ref:`templates.qa.multiple_choice.original.all <templates.qa.multiple_choice.original.all>`

|
|



.. _cards.mmlu.econometrics:

----------

econometrics
""""""""""""

.. note:: ID: ``cards.mmlu.econometrics``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "econometrics",
              "path": "cais/mmlu",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "mapper": {
                      "auxiliary_train": "train"
                  },
                  "type": "rename_splits"
              },
              {
                  "fields": {
                      "numbering": [
                          "A",
                          "B",
                          "C",
                          "D",
                          "E",
                          "F",
                          "G",
                          "H",
                          "I",
                          "J",
                          "K",
                          "L",
                          "M",
                          "N",
                          "O",
                          "P",
                          "Q",
                          "R",
                          "S",
                          "T",
                          "U",
                          "V",
                          "W",
                          "X",
                          "Y",
                          "Z"
                      ],
                      "topic": "econometrics"
                  },
                  "type": "add_fields"
              },
              {
                  "field_to_field": {
                      "answer": "_answer",
                      "choices": "_choices",
                      "numbering": "_numbering",
                      "question": "sentence1",
                      "topic": "topic"
                  },
                  "type": "rename_fields"
              },
              {
                  "field": "_numbering",
                  "index": "_answer",
                  "to_field": "number",
                  "type": "take_by_field"
              },
              {
                  "field": "_choices",
                  "index": "_answer",
                  "to_field": "answer",
                  "type": "take_by_field"
              },
              {
                  "fields": [
                      "_numbering",
                      "_choices"
                  ],
                  "to_field": "choices",
                  "type": "zip_field_values"
              },
              {
                  "field": "choices/*",
                  "process_every_value": true,
                  "separator": ". ",
                  "to_field": "choices_list",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "field": "choices_list",
                  "index": "_answer",
                  "to_field": "number_and_answer",
                  "type": "take_by_field"
              },
              {
                  "field": "choices/*/0",
                  "separator": ",",
                  "to_field": "numbers",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "add": [
                      ""
                  ],
                  "field": "choices_list",
                  "to_field": "choices_list",
                  "type": "add_constant"
              },
              {
                  "field": "choices_list",
                  "separator": "\n",
                  "to_field": "choices",
                  "type": "join_str"
              },
              {
                  "field_to_field": {
                      "number": "label"
                  },
                  "type": "rename_fields"
              }
          ],
          "task": {
              "inputs": [
                  "choices",
                  "sentence1",
                  "numbers",
                  "topic"
              ],
              "metrics": [
                  "metrics.accuracy"
              ],
              "outputs": [
                  "label"
              ],
              "type": "form_task"
          },
          "templates": "templates.qa.multiple_choice.original.all",
          "type": "task_card"
      }

References: :ref:`metrics.accuracy <metrics.accuracy>`, :ref:`templates.qa.multiple_choice.original.all <templates.qa.multiple_choice.original.all>`

|
|



.. _cards.mmlu.high_school_european_history:

----------

high_school_european_history
""""""""""""""""""""""""""""

.. note:: ID: ``cards.mmlu.high_school_european_history``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "high_school_european_history",
              "path": "cais/mmlu",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "mapper": {
                      "auxiliary_train": "train"
                  },
                  "type": "rename_splits"
              },
              {
                  "fields": {
                      "numbering": [
                          "A",
                          "B",
                          "C",
                          "D",
                          "E",
                          "F",
                          "G",
                          "H",
                          "I",
                          "J",
                          "K",
                          "L",
                          "M",
                          "N",
                          "O",
                          "P",
                          "Q",
                          "R",
                          "S",
                          "T",
                          "U",
                          "V",
                          "W",
                          "X",
                          "Y",
                          "Z"
                      ],
                      "topic": "high school european history"
                  },
                  "type": "add_fields"
              },
              {
                  "field_to_field": {
                      "answer": "_answer",
                      "choices": "_choices",
                      "numbering": "_numbering",
                      "question": "sentence1",
                      "topic": "topic"
                  },
                  "type": "rename_fields"
              },
              {
                  "field": "_numbering",
                  "index": "_answer",
                  "to_field": "number",
                  "type": "take_by_field"
              },
              {
                  "field": "_choices",
                  "index": "_answer",
                  "to_field": "answer",
                  "type": "take_by_field"
              },
              {
                  "fields": [
                      "_numbering",
                      "_choices"
                  ],
                  "to_field": "choices",
                  "type": "zip_field_values"
              },
              {
                  "field": "choices/*",
                  "process_every_value": true,
                  "separator": ". ",
                  "to_field": "choices_list",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "field": "choices_list",
                  "index": "_answer",
                  "to_field": "number_and_answer",
                  "type": "take_by_field"
              },
              {
                  "field": "choices/*/0",
                  "separator": ",",
                  "to_field": "numbers",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "add": [
                      ""
                  ],
                  "field": "choices_list",
                  "to_field": "choices_list",
                  "type": "add_constant"
              },
              {
                  "field": "choices_list",
                  "separator": "\n",
                  "to_field": "choices",
                  "type": "join_str"
              },
              {
                  "field_to_field": {
                      "number": "label"
                  },
                  "type": "rename_fields"
              }
          ],
          "task": {
              "inputs": [
                  "choices",
                  "sentence1",
                  "numbers",
                  "topic"
              ],
              "metrics": [
                  "metrics.accuracy"
              ],
              "outputs": [
                  "label"
              ],
              "type": "form_task"
          },
          "templates": "templates.qa.multiple_choice.original.all",
          "type": "task_card"
      }

References: :ref:`metrics.accuracy <metrics.accuracy>`, :ref:`templates.qa.multiple_choice.original.all <templates.qa.multiple_choice.original.all>`

|
|



.. _cards.mmlu.machine_learning:

----------

machine_learning
""""""""""""""""

.. note:: ID: ``cards.mmlu.machine_learning``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "machine_learning",
              "path": "cais/mmlu",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "mapper": {
                      "auxiliary_train": "train"
                  },
                  "type": "rename_splits"
              },
              {
                  "fields": {
                      "numbering": [
                          "A",
                          "B",
                          "C",
                          "D",
                          "E",
                          "F",
                          "G",
                          "H",
                          "I",
                          "J",
                          "K",
                          "L",
                          "M",
                          "N",
                          "O",
                          "P",
                          "Q",
                          "R",
                          "S",
                          "T",
                          "U",
                          "V",
                          "W",
                          "X",
                          "Y",
                          "Z"
                      ],
                      "topic": "machine learning"
                  },
                  "type": "add_fields"
              },
              {
                  "field_to_field": {
                      "answer": "_answer",
                      "choices": "_choices",
                      "numbering": "_numbering",
                      "question": "sentence1",
                      "topic": "topic"
                  },
                  "type": "rename_fields"
              },
              {
                  "field": "_numbering",
                  "index": "_answer",
                  "to_field": "number",
                  "type": "take_by_field"
              },
              {
                  "field": "_choices",
                  "index": "_answer",
                  "to_field": "answer",
                  "type": "take_by_field"
              },
              {
                  "fields": [
                      "_numbering",
                      "_choices"
                  ],
                  "to_field": "choices",
                  "type": "zip_field_values"
              },
              {
                  "field": "choices/*",
                  "process_every_value": true,
                  "separator": ". ",
                  "to_field": "choices_list",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "field": "choices_list",
                  "index": "_answer",
                  "to_field": "number_and_answer",
                  "type": "take_by_field"
              },
              {
                  "field": "choices/*/0",
                  "separator": ",",
                  "to_field": "numbers",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "add": [
                      ""
                  ],
                  "field": "choices_list",
                  "to_field": "choices_list",
                  "type": "add_constant"
              },
              {
                  "field": "choices_list",
                  "separator": "\n",
                  "to_field": "choices",
                  "type": "join_str"
              },
              {
                  "field_to_field": {
                      "number": "label"
                  },
                  "type": "rename_fields"
              }
          ],
          "task": {
              "inputs": [
                  "choices",
                  "sentence1",
                  "numbers",
                  "topic"
              ],
              "metrics": [
                  "metrics.accuracy"
              ],
              "outputs": [
                  "label"
              ],
              "type": "form_task"
          },
          "templates": "templates.qa.multiple_choice.original.all",
          "type": "task_card"
      }

References: :ref:`metrics.accuracy <metrics.accuracy>`, :ref:`templates.qa.multiple_choice.original.all <templates.qa.multiple_choice.original.all>`

|
|



.. _cards.mmlu.global_facts:

----------

global_facts
""""""""""""

.. note:: ID: ``cards.mmlu.global_facts``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "global_facts",
              "path": "cais/mmlu",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "mapper": {
                      "auxiliary_train": "train"
                  },
                  "type": "rename_splits"
              },
              {
                  "fields": {
                      "numbering": [
                          "A",
                          "B",
                          "C",
                          "D",
                          "E",
                          "F",
                          "G",
                          "H",
                          "I",
                          "J",
                          "K",
                          "L",
                          "M",
                          "N",
                          "O",
                          "P",
                          "Q",
                          "R",
                          "S",
                          "T",
                          "U",
                          "V",
                          "W",
                          "X",
                          "Y",
                          "Z"
                      ],
                      "topic": "global facts"
                  },
                  "type": "add_fields"
              },
              {
                  "field_to_field": {
                      "answer": "_answer",
                      "choices": "_choices",
                      "numbering": "_numbering",
                      "question": "sentence1",
                      "topic": "topic"
                  },
                  "type": "rename_fields"
              },
              {
                  "field": "_numbering",
                  "index": "_answer",
                  "to_field": "number",
                  "type": "take_by_field"
              },
              {
                  "field": "_choices",
                  "index": "_answer",
                  "to_field": "answer",
                  "type": "take_by_field"
              },
              {
                  "fields": [
                      "_numbering",
                      "_choices"
                  ],
                  "to_field": "choices",
                  "type": "zip_field_values"
              },
              {
                  "field": "choices/*",
                  "process_every_value": true,
                  "separator": ". ",
                  "to_field": "choices_list",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "field": "choices_list",
                  "index": "_answer",
                  "to_field": "number_and_answer",
                  "type": "take_by_field"
              },
              {
                  "field": "choices/*/0",
                  "separator": ",",
                  "to_field": "numbers",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "add": [
                      ""
                  ],
                  "field": "choices_list",
                  "to_field": "choices_list",
                  "type": "add_constant"
              },
              {
                  "field": "choices_list",
                  "separator": "\n",
                  "to_field": "choices",
                  "type": "join_str"
              },
              {
                  "field_to_field": {
                      "number": "label"
                  },
                  "type": "rename_fields"
              }
          ],
          "task": {
              "inputs": [
                  "choices",
                  "sentence1",
                  "numbers",
                  "topic"
              ],
              "metrics": [
                  "metrics.accuracy"
              ],
              "outputs": [
                  "label"
              ],
              "type": "form_task"
          },
          "templates": "templates.qa.multiple_choice.original.all",
          "type": "task_card"
      }

References: :ref:`metrics.accuracy <metrics.accuracy>`, :ref:`templates.qa.multiple_choice.original.all <templates.qa.multiple_choice.original.all>`

|
|



.. _cards.mmlu.jurisprudence:

----------

jurisprudence
"""""""""""""

.. note:: ID: ``cards.mmlu.jurisprudence``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "jurisprudence",
              "path": "cais/mmlu",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "mapper": {
                      "auxiliary_train": "train"
                  },
                  "type": "rename_splits"
              },
              {
                  "fields": {
                      "numbering": [
                          "A",
                          "B",
                          "C",
                          "D",
                          "E",
                          "F",
                          "G",
                          "H",
                          "I",
                          "J",
                          "K",
                          "L",
                          "M",
                          "N",
                          "O",
                          "P",
                          "Q",
                          "R",
                          "S",
                          "T",
                          "U",
                          "V",
                          "W",
                          "X",
                          "Y",
                          "Z"
                      ],
                      "topic": "jurisprudence"
                  },
                  "type": "add_fields"
              },
              {
                  "field_to_field": {
                      "answer": "_answer",
                      "choices": "_choices",
                      "numbering": "_numbering",
                      "question": "sentence1",
                      "topic": "topic"
                  },
                  "type": "rename_fields"
              },
              {
                  "field": "_numbering",
                  "index": "_answer",
                  "to_field": "number",
                  "type": "take_by_field"
              },
              {
                  "field": "_choices",
                  "index": "_answer",
                  "to_field": "answer",
                  "type": "take_by_field"
              },
              {
                  "fields": [
                      "_numbering",
                      "_choices"
                  ],
                  "to_field": "choices",
                  "type": "zip_field_values"
              },
              {
                  "field": "choices/*",
                  "process_every_value": true,
                  "separator": ". ",
                  "to_field": "choices_list",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "field": "choices_list",
                  "index": "_answer",
                  "to_field": "number_and_answer",
                  "type": "take_by_field"
              },
              {
                  "field": "choices/*/0",
                  "separator": ",",
                  "to_field": "numbers",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "add": [
                      ""
                  ],
                  "field": "choices_list",
                  "to_field": "choices_list",
                  "type": "add_constant"
              },
              {
                  "field": "choices_list",
                  "separator": "\n",
                  "to_field": "choices",
                  "type": "join_str"
              },
              {
                  "field_to_field": {
                      "number": "label"
                  },
                  "type": "rename_fields"
              }
          ],
          "task": {
              "inputs": [
                  "choices",
                  "sentence1",
                  "numbers",
                  "topic"
              ],
              "metrics": [
                  "metrics.accuracy"
              ],
              "outputs": [
                  "label"
              ],
              "type": "form_task"
          },
          "templates": "templates.qa.multiple_choice.original.all",
          "type": "task_card"
      }

References: :ref:`metrics.accuracy <metrics.accuracy>`, :ref:`templates.qa.multiple_choice.original.all <templates.qa.multiple_choice.original.all>`

|
|



.. _cards.mmlu.public_relations:

----------

public_relations
""""""""""""""""

.. note:: ID: ``cards.mmlu.public_relations``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "public_relations",
              "path": "cais/mmlu",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "mapper": {
                      "auxiliary_train": "train"
                  },
                  "type": "rename_splits"
              },
              {
                  "fields": {
                      "numbering": [
                          "A",
                          "B",
                          "C",
                          "D",
                          "E",
                          "F",
                          "G",
                          "H",
                          "I",
                          "J",
                          "K",
                          "L",
                          "M",
                          "N",
                          "O",
                          "P",
                          "Q",
                          "R",
                          "S",
                          "T",
                          "U",
                          "V",
                          "W",
                          "X",
                          "Y",
                          "Z"
                      ],
                      "topic": "public relations"
                  },
                  "type": "add_fields"
              },
              {
                  "field_to_field": {
                      "answer": "_answer",
                      "choices": "_choices",
                      "numbering": "_numbering",
                      "question": "sentence1",
                      "topic": "topic"
                  },
                  "type": "rename_fields"
              },
              {
                  "field": "_numbering",
                  "index": "_answer",
                  "to_field": "number",
                  "type": "take_by_field"
              },
              {
                  "field": "_choices",
                  "index": "_answer",
                  "to_field": "answer",
                  "type": "take_by_field"
              },
              {
                  "fields": [
                      "_numbering",
                      "_choices"
                  ],
                  "to_field": "choices",
                  "type": "zip_field_values"
              },
              {
                  "field": "choices/*",
                  "process_every_value": true,
                  "separator": ". ",
                  "to_field": "choices_list",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "field": "choices_list",
                  "index": "_answer",
                  "to_field": "number_and_answer",
                  "type": "take_by_field"
              },
              {
                  "field": "choices/*/0",
                  "separator": ",",
                  "to_field": "numbers",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "add": [
                      ""
                  ],
                  "field": "choices_list",
                  "to_field": "choices_list",
                  "type": "add_constant"
              },
              {
                  "field": "choices_list",
                  "separator": "\n",
                  "to_field": "choices",
                  "type": "join_str"
              },
              {
                  "field_to_field": {
                      "number": "label"
                  },
                  "type": "rename_fields"
              }
          ],
          "task": {
              "inputs": [
                  "choices",
                  "sentence1",
                  "numbers",
                  "topic"
              ],
              "metrics": [
                  "metrics.accuracy"
              ],
              "outputs": [
                  "label"
              ],
              "type": "form_task"
          },
          "templates": "templates.qa.multiple_choice.original.all",
          "type": "task_card"
      }

References: :ref:`metrics.accuracy <metrics.accuracy>`, :ref:`templates.qa.multiple_choice.original.all <templates.qa.multiple_choice.original.all>`

|
|



.. _cards.mmlu.clinical_knowledge:

----------

clinical_knowledge
""""""""""""""""""

.. note:: ID: ``cards.mmlu.clinical_knowledge``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "clinical_knowledge",
              "path": "cais/mmlu",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "mapper": {
                      "auxiliary_train": "train"
                  },
                  "type": "rename_splits"
              },
              {
                  "fields": {
                      "numbering": [
                          "A",
                          "B",
                          "C",
                          "D",
                          "E",
                          "F",
                          "G",
                          "H",
                          "I",
                          "J",
                          "K",
                          "L",
                          "M",
                          "N",
                          "O",
                          "P",
                          "Q",
                          "R",
                          "S",
                          "T",
                          "U",
                          "V",
                          "W",
                          "X",
                          "Y",
                          "Z"
                      ],
                      "topic": "clinical knowledge"
                  },
                  "type": "add_fields"
              },
              {
                  "field_to_field": {
                      "answer": "_answer",
                      "choices": "_choices",
                      "numbering": "_numbering",
                      "question": "sentence1",
                      "topic": "topic"
                  },
                  "type": "rename_fields"
              },
              {
                  "field": "_numbering",
                  "index": "_answer",
                  "to_field": "number",
                  "type": "take_by_field"
              },
              {
                  "field": "_choices",
                  "index": "_answer",
                  "to_field": "answer",
                  "type": "take_by_field"
              },
              {
                  "fields": [
                      "_numbering",
                      "_choices"
                  ],
                  "to_field": "choices",
                  "type": "zip_field_values"
              },
              {
                  "field": "choices/*",
                  "process_every_value": true,
                  "separator": ". ",
                  "to_field": "choices_list",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "field": "choices_list",
                  "index": "_answer",
                  "to_field": "number_and_answer",
                  "type": "take_by_field"
              },
              {
                  "field": "choices/*/0",
                  "separator": ",",
                  "to_field": "numbers",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "add": [
                      ""
                  ],
                  "field": "choices_list",
                  "to_field": "choices_list",
                  "type": "add_constant"
              },
              {
                  "field": "choices_list",
                  "separator": "\n",
                  "to_field": "choices",
                  "type": "join_str"
              },
              {
                  "field_to_field": {
                      "number": "label"
                  },
                  "type": "rename_fields"
              }
          ],
          "task": {
              "inputs": [
                  "choices",
                  "sentence1",
                  "numbers",
                  "topic"
              ],
              "metrics": [
                  "metrics.accuracy"
              ],
              "outputs": [
                  "label"
              ],
              "type": "form_task"
          },
          "templates": "templates.qa.multiple_choice.original.all",
          "type": "task_card"
      }

References: :ref:`metrics.accuracy <metrics.accuracy>`, :ref:`templates.qa.multiple_choice.original.all <templates.qa.multiple_choice.original.all>`

|
|



.. _cards.mmlu.college_computer_science:

----------

college_computer_science
""""""""""""""""""""""""

.. note:: ID: ``cards.mmlu.college_computer_science``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "college_computer_science",
              "path": "cais/mmlu",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "mapper": {
                      "auxiliary_train": "train"
                  },
                  "type": "rename_splits"
              },
              {
                  "fields": {
                      "numbering": [
                          "A",
                          "B",
                          "C",
                          "D",
                          "E",
                          "F",
                          "G",
                          "H",
                          "I",
                          "J",
                          "K",
                          "L",
                          "M",
                          "N",
                          "O",
                          "P",
                          "Q",
                          "R",
                          "S",
                          "T",
                          "U",
                          "V",
                          "W",
                          "X",
                          "Y",
                          "Z"
                      ],
                      "topic": "college computer science"
                  },
                  "type": "add_fields"
              },
              {
                  "field_to_field": {
                      "answer": "_answer",
                      "choices": "_choices",
                      "numbering": "_numbering",
                      "question": "sentence1",
                      "topic": "topic"
                  },
                  "type": "rename_fields"
              },
              {
                  "field": "_numbering",
                  "index": "_answer",
                  "to_field": "number",
                  "type": "take_by_field"
              },
              {
                  "field": "_choices",
                  "index": "_answer",
                  "to_field": "answer",
                  "type": "take_by_field"
              },
              {
                  "fields": [
                      "_numbering",
                      "_choices"
                  ],
                  "to_field": "choices",
                  "type": "zip_field_values"
              },
              {
                  "field": "choices/*",
                  "process_every_value": true,
                  "separator": ". ",
                  "to_field": "choices_list",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "field": "choices_list",
                  "index": "_answer",
                  "to_field": "number_and_answer",
                  "type": "take_by_field"
              },
              {
                  "field": "choices/*/0",
                  "separator": ",",
                  "to_field": "numbers",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "add": [
                      ""
                  ],
                  "field": "choices_list",
                  "to_field": "choices_list",
                  "type": "add_constant"
              },
              {
                  "field": "choices_list",
                  "separator": "\n",
                  "to_field": "choices",
                  "type": "join_str"
              },
              {
                  "field_to_field": {
                      "number": "label"
                  },
                  "type": "rename_fields"
              }
          ],
          "task": {
              "inputs": [
                  "choices",
                  "sentence1",
                  "numbers",
                  "topic"
              ],
              "metrics": [
                  "metrics.accuracy"
              ],
              "outputs": [
                  "label"
              ],
              "type": "form_task"
          },
          "templates": "templates.qa.multiple_choice.original.all",
          "type": "task_card"
      }

References: :ref:`metrics.accuracy <metrics.accuracy>`, :ref:`templates.qa.multiple_choice.original.all <templates.qa.multiple_choice.original.all>`

|
|



.. _cards.mmlu.high_school_geography:

----------

high_school_geography
"""""""""""""""""""""

.. note:: ID: ``cards.mmlu.high_school_geography``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "high_school_geography",
              "path": "cais/mmlu",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "mapper": {
                      "auxiliary_train": "train"
                  },
                  "type": "rename_splits"
              },
              {
                  "fields": {
                      "numbering": [
                          "A",
                          "B",
                          "C",
                          "D",
                          "E",
                          "F",
                          "G",
                          "H",
                          "I",
                          "J",
                          "K",
                          "L",
                          "M",
                          "N",
                          "O",
                          "P",
                          "Q",
                          "R",
                          "S",
                          "T",
                          "U",
                          "V",
                          "W",
                          "X",
                          "Y",
                          "Z"
                      ],
                      "topic": "high school geography"
                  },
                  "type": "add_fields"
              },
              {
                  "field_to_field": {
                      "answer": "_answer",
                      "choices": "_choices",
                      "numbering": "_numbering",
                      "question": "sentence1",
                      "topic": "topic"
                  },
                  "type": "rename_fields"
              },
              {
                  "field": "_numbering",
                  "index": "_answer",
                  "to_field": "number",
                  "type": "take_by_field"
              },
              {
                  "field": "_choices",
                  "index": "_answer",
                  "to_field": "answer",
                  "type": "take_by_field"
              },
              {
                  "fields": [
                      "_numbering",
                      "_choices"
                  ],
                  "to_field": "choices",
                  "type": "zip_field_values"
              },
              {
                  "field": "choices/*",
                  "process_every_value": true,
                  "separator": ". ",
                  "to_field": "choices_list",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "field": "choices_list",
                  "index": "_answer",
                  "to_field": "number_and_answer",
                  "type": "take_by_field"
              },
              {
                  "field": "choices/*/0",
                  "separator": ",",
                  "to_field": "numbers",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "add": [
                      ""
                  ],
                  "field": "choices_list",
                  "to_field": "choices_list",
                  "type": "add_constant"
              },
              {
                  "field": "choices_list",
                  "separator": "\n",
                  "to_field": "choices",
                  "type": "join_str"
              },
              {
                  "field_to_field": {
                      "number": "label"
                  },
                  "type": "rename_fields"
              }
          ],
          "task": {
              "inputs": [
                  "choices",
                  "sentence1",
                  "numbers",
                  "topic"
              ],
              "metrics": [
                  "metrics.accuracy"
              ],
              "outputs": [
                  "label"
              ],
              "type": "form_task"
          },
          "templates": "templates.qa.multiple_choice.original.all",
          "type": "task_card"
      }

References: :ref:`metrics.accuracy <metrics.accuracy>`, :ref:`templates.qa.multiple_choice.original.all <templates.qa.multiple_choice.original.all>`

|
|



.. _cards.mmlu.management:

----------

management
""""""""""

.. note:: ID: ``cards.mmlu.management``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "management",
              "path": "cais/mmlu",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "mapper": {
                      "auxiliary_train": "train"
                  },
                  "type": "rename_splits"
              },
              {
                  "fields": {
                      "numbering": [
                          "A",
                          "B",
                          "C",
                          "D",
                          "E",
                          "F",
                          "G",
                          "H",
                          "I",
                          "J",
                          "K",
                          "L",
                          "M",
                          "N",
                          "O",
                          "P",
                          "Q",
                          "R",
                          "S",
                          "T",
                          "U",
                          "V",
                          "W",
                          "X",
                          "Y",
                          "Z"
                      ],
                      "topic": "management"
                  },
                  "type": "add_fields"
              },
              {
                  "field_to_field": {
                      "answer": "_answer",
                      "choices": "_choices",
                      "numbering": "_numbering",
                      "question": "sentence1",
                      "topic": "topic"
                  },
                  "type": "rename_fields"
              },
              {
                  "field": "_numbering",
                  "index": "_answer",
                  "to_field": "number",
                  "type": "take_by_field"
              },
              {
                  "field": "_choices",
                  "index": "_answer",
                  "to_field": "answer",
                  "type": "take_by_field"
              },
              {
                  "fields": [
                      "_numbering",
                      "_choices"
                  ],
                  "to_field": "choices",
                  "type": "zip_field_values"
              },
              {
                  "field": "choices/*",
                  "process_every_value": true,
                  "separator": ". ",
                  "to_field": "choices_list",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "field": "choices_list",
                  "index": "_answer",
                  "to_field": "number_and_answer",
                  "type": "take_by_field"
              },
              {
                  "field": "choices/*/0",
                  "separator": ",",
                  "to_field": "numbers",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "add": [
                      ""
                  ],
                  "field": "choices_list",
                  "to_field": "choices_list",
                  "type": "add_constant"
              },
              {
                  "field": "choices_list",
                  "separator": "\n",
                  "to_field": "choices",
                  "type": "join_str"
              },
              {
                  "field_to_field": {
                      "number": "label"
                  },
                  "type": "rename_fields"
              }
          ],
          "task": {
              "inputs": [
                  "choices",
                  "sentence1",
                  "numbers",
                  "topic"
              ],
              "metrics": [
                  "metrics.accuracy"
              ],
              "outputs": [
                  "label"
              ],
              "type": "form_task"
          },
          "templates": "templates.qa.multiple_choice.original.all",
          "type": "task_card"
      }

References: :ref:`metrics.accuracy <metrics.accuracy>`, :ref:`templates.qa.multiple_choice.original.all <templates.qa.multiple_choice.original.all>`

|
|



.. _cards.mmlu.international_law:

----------

international_law
"""""""""""""""""

.. note:: ID: ``cards.mmlu.international_law``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "international_law",
              "path": "cais/mmlu",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "mapper": {
                      "auxiliary_train": "train"
                  },
                  "type": "rename_splits"
              },
              {
                  "fields": {
                      "numbering": [
                          "A",
                          "B",
                          "C",
                          "D",
                          "E",
                          "F",
                          "G",
                          "H",
                          "I",
                          "J",
                          "K",
                          "L",
                          "M",
                          "N",
                          "O",
                          "P",
                          "Q",
                          "R",
                          "S",
                          "T",
                          "U",
                          "V",
                          "W",
                          "X",
                          "Y",
                          "Z"
                      ],
                      "topic": "international law"
                  },
                  "type": "add_fields"
              },
              {
                  "field_to_field": {
                      "answer": "_answer",
                      "choices": "_choices",
                      "numbering": "_numbering",
                      "question": "sentence1",
                      "topic": "topic"
                  },
                  "type": "rename_fields"
              },
              {
                  "field": "_numbering",
                  "index": "_answer",
                  "to_field": "number",
                  "type": "take_by_field"
              },
              {
                  "field": "_choices",
                  "index": "_answer",
                  "to_field": "answer",
                  "type": "take_by_field"
              },
              {
                  "fields": [
                      "_numbering",
                      "_choices"
                  ],
                  "to_field": "choices",
                  "type": "zip_field_values"
              },
              {
                  "field": "choices/*",
                  "process_every_value": true,
                  "separator": ". ",
                  "to_field": "choices_list",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "field": "choices_list",
                  "index": "_answer",
                  "to_field": "number_and_answer",
                  "type": "take_by_field"
              },
              {
                  "field": "choices/*/0",
                  "separator": ",",
                  "to_field": "numbers",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "add": [
                      ""
                  ],
                  "field": "choices_list",
                  "to_field": "choices_list",
                  "type": "add_constant"
              },
              {
                  "field": "choices_list",
                  "separator": "\n",
                  "to_field": "choices",
                  "type": "join_str"
              },
              {
                  "field_to_field": {
                      "number": "label"
                  },
                  "type": "rename_fields"
              }
          ],
          "task": {
              "inputs": [
                  "choices",
                  "sentence1",
                  "numbers",
                  "topic"
              ],
              "metrics": [
                  "metrics.accuracy"
              ],
              "outputs": [
                  "label"
              ],
              "type": "form_task"
          },
          "templates": "templates.qa.multiple_choice.original.all",
          "type": "task_card"
      }

References: :ref:`metrics.accuracy <metrics.accuracy>`, :ref:`templates.qa.multiple_choice.original.all <templates.qa.multiple_choice.original.all>`

|
|



.. _cards.mmlu.moral_disputes:

----------

moral_disputes
""""""""""""""

.. note:: ID: ``cards.mmlu.moral_disputes``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "moral_disputes",
              "path": "cais/mmlu",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "mapper": {
                      "auxiliary_train": "train"
                  },
                  "type": "rename_splits"
              },
              {
                  "fields": {
                      "numbering": [
                          "A",
                          "B",
                          "C",
                          "D",
                          "E",
                          "F",
                          "G",
                          "H",
                          "I",
                          "J",
                          "K",
                          "L",
                          "M",
                          "N",
                          "O",
                          "P",
                          "Q",
                          "R",
                          "S",
                          "T",
                          "U",
                          "V",
                          "W",
                          "X",
                          "Y",
                          "Z"
                      ],
                      "topic": "moral disputes"
                  },
                  "type": "add_fields"
              },
              {
                  "field_to_field": {
                      "answer": "_answer",
                      "choices": "_choices",
                      "numbering": "_numbering",
                      "question": "sentence1",
                      "topic": "topic"
                  },
                  "type": "rename_fields"
              },
              {
                  "field": "_numbering",
                  "index": "_answer",
                  "to_field": "number",
                  "type": "take_by_field"
              },
              {
                  "field": "_choices",
                  "index": "_answer",
                  "to_field": "answer",
                  "type": "take_by_field"
              },
              {
                  "fields": [
                      "_numbering",
                      "_choices"
                  ],
                  "to_field": "choices",
                  "type": "zip_field_values"
              },
              {
                  "field": "choices/*",
                  "process_every_value": true,
                  "separator": ". ",
                  "to_field": "choices_list",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "field": "choices_list",
                  "index": "_answer",
                  "to_field": "number_and_answer",
                  "type": "take_by_field"
              },
              {
                  "field": "choices/*/0",
                  "separator": ",",
                  "to_field": "numbers",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "add": [
                      ""
                  ],
                  "field": "choices_list",
                  "to_field": "choices_list",
                  "type": "add_constant"
              },
              {
                  "field": "choices_list",
                  "separator": "\n",
                  "to_field": "choices",
                  "type": "join_str"
              },
              {
                  "field_to_field": {
                      "number": "label"
                  },
                  "type": "rename_fields"
              }
          ],
          "task": {
              "inputs": [
                  "choices",
                  "sentence1",
                  "numbers",
                  "topic"
              ],
              "metrics": [
                  "metrics.accuracy"
              ],
              "outputs": [
                  "label"
              ],
              "type": "form_task"
          },
          "templates": "templates.qa.multiple_choice.original.all",
          "type": "task_card"
      }

References: :ref:`metrics.accuracy <metrics.accuracy>`, :ref:`templates.qa.multiple_choice.original.all <templates.qa.multiple_choice.original.all>`

|
|



.. _cards.mmlu.us_foreign_policy:

----------

us_foreign_policy
"""""""""""""""""

.. note:: ID: ``cards.mmlu.us_foreign_policy``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "us_foreign_policy",
              "path": "cais/mmlu",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "mapper": {
                      "auxiliary_train": "train"
                  },
                  "type": "rename_splits"
              },
              {
                  "fields": {
                      "numbering": [
                          "A",
                          "B",
                          "C",
                          "D",
                          "E",
                          "F",
                          "G",
                          "H",
                          "I",
                          "J",
                          "K",
                          "L",
                          "M",
                          "N",
                          "O",
                          "P",
                          "Q",
                          "R",
                          "S",
                          "T",
                          "U",
                          "V",
                          "W",
                          "X",
                          "Y",
                          "Z"
                      ],
                      "topic": "us foreign policy"
                  },
                  "type": "add_fields"
              },
              {
                  "field_to_field": {
                      "answer": "_answer",
                      "choices": "_choices",
                      "numbering": "_numbering",
                      "question": "sentence1",
                      "topic": "topic"
                  },
                  "type": "rename_fields"
              },
              {
                  "field": "_numbering",
                  "index": "_answer",
                  "to_field": "number",
                  "type": "take_by_field"
              },
              {
                  "field": "_choices",
                  "index": "_answer",
                  "to_field": "answer",
                  "type": "take_by_field"
              },
              {
                  "fields": [
                      "_numbering",
                      "_choices"
                  ],
                  "to_field": "choices",
                  "type": "zip_field_values"
              },
              {
                  "field": "choices/*",
                  "process_every_value": true,
                  "separator": ". ",
                  "to_field": "choices_list",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "field": "choices_list",
                  "index": "_answer",
                  "to_field": "number_and_answer",
                  "type": "take_by_field"
              },
              {
                  "field": "choices/*/0",
                  "separator": ",",
                  "to_field": "numbers",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "add": [
                      ""
                  ],
                  "field": "choices_list",
                  "to_field": "choices_list",
                  "type": "add_constant"
              },
              {
                  "field": "choices_list",
                  "separator": "\n",
                  "to_field": "choices",
                  "type": "join_str"
              },
              {
                  "field_to_field": {
                      "number": "label"
                  },
                  "type": "rename_fields"
              }
          ],
          "task": {
              "inputs": [
                  "choices",
                  "sentence1",
                  "numbers",
                  "topic"
              ],
              "metrics": [
                  "metrics.accuracy"
              ],
              "outputs": [
                  "label"
              ],
              "type": "form_task"
          },
          "templates": "templates.qa.multiple_choice.original.all",
          "type": "task_card"
      }

References: :ref:`metrics.accuracy <metrics.accuracy>`, :ref:`templates.qa.multiple_choice.original.all <templates.qa.multiple_choice.original.all>`

|
|



.. _cards.mmlu.professional_accounting:

----------

professional_accounting
"""""""""""""""""""""""

.. note:: ID: ``cards.mmlu.professional_accounting``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "professional_accounting",
              "path": "cais/mmlu",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "mapper": {
                      "auxiliary_train": "train"
                  },
                  "type": "rename_splits"
              },
              {
                  "fields": {
                      "numbering": [
                          "A",
                          "B",
                          "C",
                          "D",
                          "E",
                          "F",
                          "G",
                          "H",
                          "I",
                          "J",
                          "K",
                          "L",
                          "M",
                          "N",
                          "O",
                          "P",
                          "Q",
                          "R",
                          "S",
                          "T",
                          "U",
                          "V",
                          "W",
                          "X",
                          "Y",
                          "Z"
                      ],
                      "topic": "professional accounting"
                  },
                  "type": "add_fields"
              },
              {
                  "field_to_field": {
                      "answer": "_answer",
                      "choices": "_choices",
                      "numbering": "_numbering",
                      "question": "sentence1",
                      "topic": "topic"
                  },
                  "type": "rename_fields"
              },
              {
                  "field": "_numbering",
                  "index": "_answer",
                  "to_field": "number",
                  "type": "take_by_field"
              },
              {
                  "field": "_choices",
                  "index": "_answer",
                  "to_field": "answer",
                  "type": "take_by_field"
              },
              {
                  "fields": [
                      "_numbering",
                      "_choices"
                  ],
                  "to_field": "choices",
                  "type": "zip_field_values"
              },
              {
                  "field": "choices/*",
                  "process_every_value": true,
                  "separator": ". ",
                  "to_field": "choices_list",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "field": "choices_list",
                  "index": "_answer",
                  "to_field": "number_and_answer",
                  "type": "take_by_field"
              },
              {
                  "field": "choices/*/0",
                  "separator": ",",
                  "to_field": "numbers",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "add": [
                      ""
                  ],
                  "field": "choices_list",
                  "to_field": "choices_list",
                  "type": "add_constant"
              },
              {
                  "field": "choices_list",
                  "separator": "\n",
                  "to_field": "choices",
                  "type": "join_str"
              },
              {
                  "field_to_field": {
                      "number": "label"
                  },
                  "type": "rename_fields"
              }
          ],
          "task": {
              "inputs": [
                  "choices",
                  "sentence1",
                  "numbers",
                  "topic"
              ],
              "metrics": [
                  "metrics.accuracy"
              ],
              "outputs": [
                  "label"
              ],
              "type": "form_task"
          },
          "templates": "templates.qa.multiple_choice.original.all",
          "type": "task_card"
      }

References: :ref:`metrics.accuracy <metrics.accuracy>`, :ref:`templates.qa.multiple_choice.original.all <templates.qa.multiple_choice.original.all>`

|
|



.. _cards.mmlu.high_school_computer_science:

----------

high_school_computer_science
""""""""""""""""""""""""""""

.. note:: ID: ``cards.mmlu.high_school_computer_science``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "high_school_computer_science",
              "path": "cais/mmlu",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "mapper": {
                      "auxiliary_train": "train"
                  },
                  "type": "rename_splits"
              },
              {
                  "fields": {
                      "numbering": [
                          "A",
                          "B",
                          "C",
                          "D",
                          "E",
                          "F",
                          "G",
                          "H",
                          "I",
                          "J",
                          "K",
                          "L",
                          "M",
                          "N",
                          "O",
                          "P",
                          "Q",
                          "R",
                          "S",
                          "T",
                          "U",
                          "V",
                          "W",
                          "X",
                          "Y",
                          "Z"
                      ],
                      "topic": "high school computer science"
                  },
                  "type": "add_fields"
              },
              {
                  "field_to_field": {
                      "answer": "_answer",
                      "choices": "_choices",
                      "numbering": "_numbering",
                      "question": "sentence1",
                      "topic": "topic"
                  },
                  "type": "rename_fields"
              },
              {
                  "field": "_numbering",
                  "index": "_answer",
                  "to_field": "number",
                  "type": "take_by_field"
              },
              {
                  "field": "_choices",
                  "index": "_answer",
                  "to_field": "answer",
                  "type": "take_by_field"
              },
              {
                  "fields": [
                      "_numbering",
                      "_choices"
                  ],
                  "to_field": "choices",
                  "type": "zip_field_values"
              },
              {
                  "field": "choices/*",
                  "process_every_value": true,
                  "separator": ". ",
                  "to_field": "choices_list",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "field": "choices_list",
                  "index": "_answer",
                  "to_field": "number_and_answer",
                  "type": "take_by_field"
              },
              {
                  "field": "choices/*/0",
                  "separator": ",",
                  "to_field": "numbers",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "add": [
                      ""
                  ],
                  "field": "choices_list",
                  "to_field": "choices_list",
                  "type": "add_constant"
              },
              {
                  "field": "choices_list",
                  "separator": "\n",
                  "to_field": "choices",
                  "type": "join_str"
              },
              {
                  "field_to_field": {
                      "number": "label"
                  },
                  "type": "rename_fields"
              }
          ],
          "task": {
              "inputs": [
                  "choices",
                  "sentence1",
                  "numbers",
                  "topic"
              ],
              "metrics": [
                  "metrics.accuracy"
              ],
              "outputs": [
                  "label"
              ],
              "type": "form_task"
          },
          "templates": "templates.qa.multiple_choice.original.all",
          "type": "task_card"
      }

References: :ref:`metrics.accuracy <metrics.accuracy>`, :ref:`templates.qa.multiple_choice.original.all <templates.qa.multiple_choice.original.all>`

|
|



.. _cards.mmlu.moral_scenarios:

----------

moral_scenarios
"""""""""""""""

.. note:: ID: ``cards.mmlu.moral_scenarios``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "moral_scenarios",
              "path": "cais/mmlu",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "mapper": {
                      "auxiliary_train": "train"
                  },
                  "type": "rename_splits"
              },
              {
                  "fields": {
                      "numbering": [
                          "A",
                          "B",
                          "C",
                          "D",
                          "E",
                          "F",
                          "G",
                          "H",
                          "I",
                          "J",
                          "K",
                          "L",
                          "M",
                          "N",
                          "O",
                          "P",
                          "Q",
                          "R",
                          "S",
                          "T",
                          "U",
                          "V",
                          "W",
                          "X",
                          "Y",
                          "Z"
                      ],
                      "topic": "moral scenarios"
                  },
                  "type": "add_fields"
              },
              {
                  "field_to_field": {
                      "answer": "_answer",
                      "choices": "_choices",
                      "numbering": "_numbering",
                      "question": "sentence1",
                      "topic": "topic"
                  },
                  "type": "rename_fields"
              },
              {
                  "field": "_numbering",
                  "index": "_answer",
                  "to_field": "number",
                  "type": "take_by_field"
              },
              {
                  "field": "_choices",
                  "index": "_answer",
                  "to_field": "answer",
                  "type": "take_by_field"
              },
              {
                  "fields": [
                      "_numbering",
                      "_choices"
                  ],
                  "to_field": "choices",
                  "type": "zip_field_values"
              },
              {
                  "field": "choices/*",
                  "process_every_value": true,
                  "separator": ". ",
                  "to_field": "choices_list",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "field": "choices_list",
                  "index": "_answer",
                  "to_field": "number_and_answer",
                  "type": "take_by_field"
              },
              {
                  "field": "choices/*/0",
                  "separator": ",",
                  "to_field": "numbers",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "add": [
                      ""
                  ],
                  "field": "choices_list",
                  "to_field": "choices_list",
                  "type": "add_constant"
              },
              {
                  "field": "choices_list",
                  "separator": "\n",
                  "to_field": "choices",
                  "type": "join_str"
              },
              {
                  "field_to_field": {
                      "number": "label"
                  },
                  "type": "rename_fields"
              }
          ],
          "task": {
              "inputs": [
                  "choices",
                  "sentence1",
                  "numbers",
                  "topic"
              ],
              "metrics": [
                  "metrics.accuracy"
              ],
              "outputs": [
                  "label"
              ],
              "type": "form_task"
          },
          "templates": "templates.qa.multiple_choice.original.all",
          "type": "task_card"
      }

References: :ref:`metrics.accuracy <metrics.accuracy>`, :ref:`templates.qa.multiple_choice.original.all <templates.qa.multiple_choice.original.all>`

|
|



.. _cards.mmlu.abstract_algebra:

----------

abstract_algebra
""""""""""""""""

.. note:: ID: ``cards.mmlu.abstract_algebra``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "abstract_algebra",
              "path": "cais/mmlu",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "mapper": {
                      "auxiliary_train": "train"
                  },
                  "type": "rename_splits"
              },
              {
                  "fields": {
                      "numbering": [
                          "A",
                          "B",
                          "C",
                          "D",
                          "E",
                          "F",
                          "G",
                          "H",
                          "I",
                          "J",
                          "K",
                          "L",
                          "M",
                          "N",
                          "O",
                          "P",
                          "Q",
                          "R",
                          "S",
                          "T",
                          "U",
                          "V",
                          "W",
                          "X",
                          "Y",
                          "Z"
                      ],
                      "topic": "abstract algebra"
                  },
                  "type": "add_fields"
              },
              {
                  "field_to_field": {
                      "answer": "_answer",
                      "choices": "_choices",
                      "numbering": "_numbering",
                      "question": "sentence1",
                      "topic": "topic"
                  },
                  "type": "rename_fields"
              },
              {
                  "field": "_numbering",
                  "index": "_answer",
                  "to_field": "number",
                  "type": "take_by_field"
              },
              {
                  "field": "_choices",
                  "index": "_answer",
                  "to_field": "answer",
                  "type": "take_by_field"
              },
              {
                  "fields": [
                      "_numbering",
                      "_choices"
                  ],
                  "to_field": "choices",
                  "type": "zip_field_values"
              },
              {
                  "field": "choices/*",
                  "process_every_value": true,
                  "separator": ". ",
                  "to_field": "choices_list",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "field": "choices_list",
                  "index": "_answer",
                  "to_field": "number_and_answer",
                  "type": "take_by_field"
              },
              {
                  "field": "choices/*/0",
                  "separator": ",",
                  "to_field": "numbers",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "add": [
                      ""
                  ],
                  "field": "choices_list",
                  "to_field": "choices_list",
                  "type": "add_constant"
              },
              {
                  "field": "choices_list",
                  "separator": "\n",
                  "to_field": "choices",
                  "type": "join_str"
              },
              {
                  "field_to_field": {
                      "number": "label"
                  },
                  "type": "rename_fields"
              }
          ],
          "task": {
              "inputs": [
                  "choices",
                  "sentence1",
                  "numbers",
                  "topic"
              ],
              "metrics": [
                  "metrics.accuracy"
              ],
              "outputs": [
                  "label"
              ],
              "type": "form_task"
          },
          "templates": "templates.qa.multiple_choice.original.all",
          "type": "task_card"
      }

References: :ref:`metrics.accuracy <metrics.accuracy>`, :ref:`templates.qa.multiple_choice.original.all <templates.qa.multiple_choice.original.all>`

|
|



.. _cards.mmlu.sociology:

----------

sociology
"""""""""

.. note:: ID: ``cards.mmlu.sociology``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "sociology",
              "path": "cais/mmlu",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "mapper": {
                      "auxiliary_train": "train"
                  },
                  "type": "rename_splits"
              },
              {
                  "fields": {
                      "numbering": [
                          "A",
                          "B",
                          "C",
                          "D",
                          "E",
                          "F",
                          "G",
                          "H",
                          "I",
                          "J",
                          "K",
                          "L",
                          "M",
                          "N",
                          "O",
                          "P",
                          "Q",
                          "R",
                          "S",
                          "T",
                          "U",
                          "V",
                          "W",
                          "X",
                          "Y",
                          "Z"
                      ],
                      "topic": "sociology"
                  },
                  "type": "add_fields"
              },
              {
                  "field_to_field": {
                      "answer": "_answer",
                      "choices": "_choices",
                      "numbering": "_numbering",
                      "question": "sentence1",
                      "topic": "topic"
                  },
                  "type": "rename_fields"
              },
              {
                  "field": "_numbering",
                  "index": "_answer",
                  "to_field": "number",
                  "type": "take_by_field"
              },
              {
                  "field": "_choices",
                  "index": "_answer",
                  "to_field": "answer",
                  "type": "take_by_field"
              },
              {
                  "fields": [
                      "_numbering",
                      "_choices"
                  ],
                  "to_field": "choices",
                  "type": "zip_field_values"
              },
              {
                  "field": "choices/*",
                  "process_every_value": true,
                  "separator": ". ",
                  "to_field": "choices_list",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "field": "choices_list",
                  "index": "_answer",
                  "to_field": "number_and_answer",
                  "type": "take_by_field"
              },
              {
                  "field": "choices/*/0",
                  "separator": ",",
                  "to_field": "numbers",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "add": [
                      ""
                  ],
                  "field": "choices_list",
                  "to_field": "choices_list",
                  "type": "add_constant"
              },
              {
                  "field": "choices_list",
                  "separator": "\n",
                  "to_field": "choices",
                  "type": "join_str"
              },
              {
                  "field_to_field": {
                      "number": "label"
                  },
                  "type": "rename_fields"
              }
          ],
          "task": {
              "inputs": [
                  "choices",
                  "sentence1",
                  "numbers",
                  "topic"
              ],
              "metrics": [
                  "metrics.accuracy"
              ],
              "outputs": [
                  "label"
              ],
              "type": "form_task"
          },
          "templates": "templates.qa.multiple_choice.original.all",
          "type": "task_card"
      }

References: :ref:`metrics.accuracy <metrics.accuracy>`, :ref:`templates.qa.multiple_choice.original.all <templates.qa.multiple_choice.original.all>`

|
|



.. _cards.mmlu.human_sexuality:

----------

human_sexuality
"""""""""""""""

.. note:: ID: ``cards.mmlu.human_sexuality``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "human_sexuality",
              "path": "cais/mmlu",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "mapper": {
                      "auxiliary_train": "train"
                  },
                  "type": "rename_splits"
              },
              {
                  "fields": {
                      "numbering": [
                          "A",
                          "B",
                          "C",
                          "D",
                          "E",
                          "F",
                          "G",
                          "H",
                          "I",
                          "J",
                          "K",
                          "L",
                          "M",
                          "N",
                          "O",
                          "P",
                          "Q",
                          "R",
                          "S",
                          "T",
                          "U",
                          "V",
                          "W",
                          "X",
                          "Y",
                          "Z"
                      ],
                      "topic": "human sexuality"
                  },
                  "type": "add_fields"
              },
              {
                  "field_to_field": {
                      "answer": "_answer",
                      "choices": "_choices",
                      "numbering": "_numbering",
                      "question": "sentence1",
                      "topic": "topic"
                  },
                  "type": "rename_fields"
              },
              {
                  "field": "_numbering",
                  "index": "_answer",
                  "to_field": "number",
                  "type": "take_by_field"
              },
              {
                  "field": "_choices",
                  "index": "_answer",
                  "to_field": "answer",
                  "type": "take_by_field"
              },
              {
                  "fields": [
                      "_numbering",
                      "_choices"
                  ],
                  "to_field": "choices",
                  "type": "zip_field_values"
              },
              {
                  "field": "choices/*",
                  "process_every_value": true,
                  "separator": ". ",
                  "to_field": "choices_list",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "field": "choices_list",
                  "index": "_answer",
                  "to_field": "number_and_answer",
                  "type": "take_by_field"
              },
              {
                  "field": "choices/*/0",
                  "separator": ",",
                  "to_field": "numbers",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "add": [
                      ""
                  ],
                  "field": "choices_list",
                  "to_field": "choices_list",
                  "type": "add_constant"
              },
              {
                  "field": "choices_list",
                  "separator": "\n",
                  "to_field": "choices",
                  "type": "join_str"
              },
              {
                  "field_to_field": {
                      "number": "label"
                  },
                  "type": "rename_fields"
              }
          ],
          "task": {
              "inputs": [
                  "choices",
                  "sentence1",
                  "numbers",
                  "topic"
              ],
              "metrics": [
                  "metrics.accuracy"
              ],
              "outputs": [
                  "label"
              ],
              "type": "form_task"
          },
          "templates": "templates.qa.multiple_choice.original.all",
          "type": "task_card"
      }

References: :ref:`metrics.accuracy <metrics.accuracy>`, :ref:`templates.qa.multiple_choice.original.all <templates.qa.multiple_choice.original.all>`

|
|



.. _cards.mmlu.high_school_statistics:

----------

high_school_statistics
""""""""""""""""""""""

.. note:: ID: ``cards.mmlu.high_school_statistics``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "high_school_statistics",
              "path": "cais/mmlu",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "mapper": {
                      "auxiliary_train": "train"
                  },
                  "type": "rename_splits"
              },
              {
                  "fields": {
                      "numbering": [
                          "A",
                          "B",
                          "C",
                          "D",
                          "E",
                          "F",
                          "G",
                          "H",
                          "I",
                          "J",
                          "K",
                          "L",
                          "M",
                          "N",
                          "O",
                          "P",
                          "Q",
                          "R",
                          "S",
                          "T",
                          "U",
                          "V",
                          "W",
                          "X",
                          "Y",
                          "Z"
                      ],
                      "topic": "high school statistics"
                  },
                  "type": "add_fields"
              },
              {
                  "field_to_field": {
                      "answer": "_answer",
                      "choices": "_choices",
                      "numbering": "_numbering",
                      "question": "sentence1",
                      "topic": "topic"
                  },
                  "type": "rename_fields"
              },
              {
                  "field": "_numbering",
                  "index": "_answer",
                  "to_field": "number",
                  "type": "take_by_field"
              },
              {
                  "field": "_choices",
                  "index": "_answer",
                  "to_field": "answer",
                  "type": "take_by_field"
              },
              {
                  "fields": [
                      "_numbering",
                      "_choices"
                  ],
                  "to_field": "choices",
                  "type": "zip_field_values"
              },
              {
                  "field": "choices/*",
                  "process_every_value": true,
                  "separator": ". ",
                  "to_field": "choices_list",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "field": "choices_list",
                  "index": "_answer",
                  "to_field": "number_and_answer",
                  "type": "take_by_field"
              },
              {
                  "field": "choices/*/0",
                  "separator": ",",
                  "to_field": "numbers",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "add": [
                      ""
                  ],
                  "field": "choices_list",
                  "to_field": "choices_list",
                  "type": "add_constant"
              },
              {
                  "field": "choices_list",
                  "separator": "\n",
                  "to_field": "choices",
                  "type": "join_str"
              },
              {
                  "field_to_field": {
                      "number": "label"
                  },
                  "type": "rename_fields"
              }
          ],
          "task": {
              "inputs": [
                  "choices",
                  "sentence1",
                  "numbers",
                  "topic"
              ],
              "metrics": [
                  "metrics.accuracy"
              ],
              "outputs": [
                  "label"
              ],
              "type": "form_task"
          },
          "templates": "templates.qa.multiple_choice.original.all",
          "type": "task_card"
      }

References: :ref:`metrics.accuracy <metrics.accuracy>`, :ref:`templates.qa.multiple_choice.original.all <templates.qa.multiple_choice.original.all>`

|
|



.. _cards.mmlu.high_school_us_history:

----------

high_school_us_history
""""""""""""""""""""""

.. note:: ID: ``cards.mmlu.high_school_us_history``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "high_school_us_history",
              "path": "cais/mmlu",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "mapper": {
                      "auxiliary_train": "train"
                  },
                  "type": "rename_splits"
              },
              {
                  "fields": {
                      "numbering": [
                          "A",
                          "B",
                          "C",
                          "D",
                          "E",
                          "F",
                          "G",
                          "H",
                          "I",
                          "J",
                          "K",
                          "L",
                          "M",
                          "N",
                          "O",
                          "P",
                          "Q",
                          "R",
                          "S",
                          "T",
                          "U",
                          "V",
                          "W",
                          "X",
                          "Y",
                          "Z"
                      ],
                      "topic": "high school us history"
                  },
                  "type": "add_fields"
              },
              {
                  "field_to_field": {
                      "answer": "_answer",
                      "choices": "_choices",
                      "numbering": "_numbering",
                      "question": "sentence1",
                      "topic": "topic"
                  },
                  "type": "rename_fields"
              },
              {
                  "field": "_numbering",
                  "index": "_answer",
                  "to_field": "number",
                  "type": "take_by_field"
              },
              {
                  "field": "_choices",
                  "index": "_answer",
                  "to_field": "answer",
                  "type": "take_by_field"
              },
              {
                  "fields": [
                      "_numbering",
                      "_choices"
                  ],
                  "to_field": "choices",
                  "type": "zip_field_values"
              },
              {
                  "field": "choices/*",
                  "process_every_value": true,
                  "separator": ". ",
                  "to_field": "choices_list",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "field": "choices_list",
                  "index": "_answer",
                  "to_field": "number_and_answer",
                  "type": "take_by_field"
              },
              {
                  "field": "choices/*/0",
                  "separator": ",",
                  "to_field": "numbers",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "add": [
                      ""
                  ],
                  "field": "choices_list",
                  "to_field": "choices_list",
                  "type": "add_constant"
              },
              {
                  "field": "choices_list",
                  "separator": "\n",
                  "to_field": "choices",
                  "type": "join_str"
              },
              {
                  "field_to_field": {
                      "number": "label"
                  },
                  "type": "rename_fields"
              }
          ],
          "task": {
              "inputs": [
                  "choices",
                  "sentence1",
                  "numbers",
                  "topic"
              ],
              "metrics": [
                  "metrics.accuracy"
              ],
              "outputs": [
                  "label"
              ],
              "type": "form_task"
          },
          "templates": "templates.qa.multiple_choice.original.all",
          "type": "task_card"
      }

References: :ref:`metrics.accuracy <metrics.accuracy>`, :ref:`templates.qa.multiple_choice.original.all <templates.qa.multiple_choice.original.all>`

|
|



.. _cards.mmlu.professional_psychology:

----------

professional_psychology
"""""""""""""""""""""""

.. note:: ID: ``cards.mmlu.professional_psychology``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "professional_psychology",
              "path": "cais/mmlu",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "mapper": {
                      "auxiliary_train": "train"
                  },
                  "type": "rename_splits"
              },
              {
                  "fields": {
                      "numbering": [
                          "A",
                          "B",
                          "C",
                          "D",
                          "E",
                          "F",
                          "G",
                          "H",
                          "I",
                          "J",
                          "K",
                          "L",
                          "M",
                          "N",
                          "O",
                          "P",
                          "Q",
                          "R",
                          "S",
                          "T",
                          "U",
                          "V",
                          "W",
                          "X",
                          "Y",
                          "Z"
                      ],
                      "topic": "professional psychology"
                  },
                  "type": "add_fields"
              },
              {
                  "field_to_field": {
                      "answer": "_answer",
                      "choices": "_choices",
                      "numbering": "_numbering",
                      "question": "sentence1",
                      "topic": "topic"
                  },
                  "type": "rename_fields"
              },
              {
                  "field": "_numbering",
                  "index": "_answer",
                  "to_field": "number",
                  "type": "take_by_field"
              },
              {
                  "field": "_choices",
                  "index": "_answer",
                  "to_field": "answer",
                  "type": "take_by_field"
              },
              {
                  "fields": [
                      "_numbering",
                      "_choices"
                  ],
                  "to_field": "choices",
                  "type": "zip_field_values"
              },
              {
                  "field": "choices/*",
                  "process_every_value": true,
                  "separator": ". ",
                  "to_field": "choices_list",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "field": "choices_list",
                  "index": "_answer",
                  "to_field": "number_and_answer",
                  "type": "take_by_field"
              },
              {
                  "field": "choices/*/0",
                  "separator": ",",
                  "to_field": "numbers",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "add": [
                      ""
                  ],
                  "field": "choices_list",
                  "to_field": "choices_list",
                  "type": "add_constant"
              },
              {
                  "field": "choices_list",
                  "separator": "\n",
                  "to_field": "choices",
                  "type": "join_str"
              },
              {
                  "field_to_field": {
                      "number": "label"
                  },
                  "type": "rename_fields"
              }
          ],
          "task": {
              "inputs": [
                  "choices",
                  "sentence1",
                  "numbers",
                  "topic"
              ],
              "metrics": [
                  "metrics.accuracy"
              ],
              "outputs": [
                  "label"
              ],
              "type": "form_task"
          },
          "templates": "templates.qa.multiple_choice.original.all",
          "type": "task_card"
      }

References: :ref:`metrics.accuracy <metrics.accuracy>`, :ref:`templates.qa.multiple_choice.original.all <templates.qa.multiple_choice.original.all>`

|
|



.. _cards.mmlu.high_school_physics:

----------

high_school_physics
"""""""""""""""""""

.. note:: ID: ``cards.mmlu.high_school_physics``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "high_school_physics",
              "path": "cais/mmlu",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "mapper": {
                      "auxiliary_train": "train"
                  },
                  "type": "rename_splits"
              },
              {
                  "fields": {
                      "numbering": [
                          "A",
                          "B",
                          "C",
                          "D",
                          "E",
                          "F",
                          "G",
                          "H",
                          "I",
                          "J",
                          "K",
                          "L",
                          "M",
                          "N",
                          "O",
                          "P",
                          "Q",
                          "R",
                          "S",
                          "T",
                          "U",
                          "V",
                          "W",
                          "X",
                          "Y",
                          "Z"
                      ],
                      "topic": "high school physics"
                  },
                  "type": "add_fields"
              },
              {
                  "field_to_field": {
                      "answer": "_answer",
                      "choices": "_choices",
                      "numbering": "_numbering",
                      "question": "sentence1",
                      "topic": "topic"
                  },
                  "type": "rename_fields"
              },
              {
                  "field": "_numbering",
                  "index": "_answer",
                  "to_field": "number",
                  "type": "take_by_field"
              },
              {
                  "field": "_choices",
                  "index": "_answer",
                  "to_field": "answer",
                  "type": "take_by_field"
              },
              {
                  "fields": [
                      "_numbering",
                      "_choices"
                  ],
                  "to_field": "choices",
                  "type": "zip_field_values"
              },
              {
                  "field": "choices/*",
                  "process_every_value": true,
                  "separator": ". ",
                  "to_field": "choices_list",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "field": "choices_list",
                  "index": "_answer",
                  "to_field": "number_and_answer",
                  "type": "take_by_field"
              },
              {
                  "field": "choices/*/0",
                  "separator": ",",
                  "to_field": "numbers",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "add": [
                      ""
                  ],
                  "field": "choices_list",
                  "to_field": "choices_list",
                  "type": "add_constant"
              },
              {
                  "field": "choices_list",
                  "separator": "\n",
                  "to_field": "choices",
                  "type": "join_str"
              },
              {
                  "field_to_field": {
                      "number": "label"
                  },
                  "type": "rename_fields"
              }
          ],
          "task": {
              "inputs": [
                  "choices",
                  "sentence1",
                  "numbers",
                  "topic"
              ],
              "metrics": [
                  "metrics.accuracy"
              ],
              "outputs": [
                  "label"
              ],
              "type": "form_task"
          },
          "templates": "templates.qa.multiple_choice.original.all",
          "type": "task_card"
      }

References: :ref:`metrics.accuracy <metrics.accuracy>`, :ref:`templates.qa.multiple_choice.original.all <templates.qa.multiple_choice.original.all>`

|
|



.. _cards.mmlu.conceptual_physics:

----------

conceptual_physics
""""""""""""""""""

.. note:: ID: ``cards.mmlu.conceptual_physics``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "conceptual_physics",
              "path": "cais/mmlu",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "mapper": {
                      "auxiliary_train": "train"
                  },
                  "type": "rename_splits"
              },
              {
                  "fields": {
                      "numbering": [
                          "A",
                          "B",
                          "C",
                          "D",
                          "E",
                          "F",
                          "G",
                          "H",
                          "I",
                          "J",
                          "K",
                          "L",
                          "M",
                          "N",
                          "O",
                          "P",
                          "Q",
                          "R",
                          "S",
                          "T",
                          "U",
                          "V",
                          "W",
                          "X",
                          "Y",
                          "Z"
                      ],
                      "topic": "conceptual physics"
                  },
                  "type": "add_fields"
              },
              {
                  "field_to_field": {
                      "answer": "_answer",
                      "choices": "_choices",
                      "numbering": "_numbering",
                      "question": "sentence1",
                      "topic": "topic"
                  },
                  "type": "rename_fields"
              },
              {
                  "field": "_numbering",
                  "index": "_answer",
                  "to_field": "number",
                  "type": "take_by_field"
              },
              {
                  "field": "_choices",
                  "index": "_answer",
                  "to_field": "answer",
                  "type": "take_by_field"
              },
              {
                  "fields": [
                      "_numbering",
                      "_choices"
                  ],
                  "to_field": "choices",
                  "type": "zip_field_values"
              },
              {
                  "field": "choices/*",
                  "process_every_value": true,
                  "separator": ". ",
                  "to_field": "choices_list",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "field": "choices_list",
                  "index": "_answer",
                  "to_field": "number_and_answer",
                  "type": "take_by_field"
              },
              {
                  "field": "choices/*/0",
                  "separator": ",",
                  "to_field": "numbers",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "add": [
                      ""
                  ],
                  "field": "choices_list",
                  "to_field": "choices_list",
                  "type": "add_constant"
              },
              {
                  "field": "choices_list",
                  "separator": "\n",
                  "to_field": "choices",
                  "type": "join_str"
              },
              {
                  "field_to_field": {
                      "number": "label"
                  },
                  "type": "rename_fields"
              }
          ],
          "task": {
              "inputs": [
                  "choices",
                  "sentence1",
                  "numbers",
                  "topic"
              ],
              "metrics": [
                  "metrics.accuracy"
              ],
              "outputs": [
                  "label"
              ],
              "type": "form_task"
          },
          "templates": "templates.qa.multiple_choice.original.all",
          "type": "task_card"
      }

References: :ref:`metrics.accuracy <metrics.accuracy>`, :ref:`templates.qa.multiple_choice.original.all <templates.qa.multiple_choice.original.all>`

|
|



.. _cards.mmlu.college_chemistry:

----------

college_chemistry
"""""""""""""""""

.. note:: ID: ``cards.mmlu.college_chemistry``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "college_chemistry",
              "path": "cais/mmlu",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "mapper": {
                      "auxiliary_train": "train"
                  },
                  "type": "rename_splits"
              },
              {
                  "fields": {
                      "numbering": [
                          "A",
                          "B",
                          "C",
                          "D",
                          "E",
                          "F",
                          "G",
                          "H",
                          "I",
                          "J",
                          "K",
                          "L",
                          "M",
                          "N",
                          "O",
                          "P",
                          "Q",
                          "R",
                          "S",
                          "T",
                          "U",
                          "V",
                          "W",
                          "X",
                          "Y",
                          "Z"
                      ],
                      "topic": "college chemistry"
                  },
                  "type": "add_fields"
              },
              {
                  "field_to_field": {
                      "answer": "_answer",
                      "choices": "_choices",
                      "numbering": "_numbering",
                      "question": "sentence1",
                      "topic": "topic"
                  },
                  "type": "rename_fields"
              },
              {
                  "field": "_numbering",
                  "index": "_answer",
                  "to_field": "number",
                  "type": "take_by_field"
              },
              {
                  "field": "_choices",
                  "index": "_answer",
                  "to_field": "answer",
                  "type": "take_by_field"
              },
              {
                  "fields": [
                      "_numbering",
                      "_choices"
                  ],
                  "to_field": "choices",
                  "type": "zip_field_values"
              },
              {
                  "field": "choices/*",
                  "process_every_value": true,
                  "separator": ". ",
                  "to_field": "choices_list",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "field": "choices_list",
                  "index": "_answer",
                  "to_field": "number_and_answer",
                  "type": "take_by_field"
              },
              {
                  "field": "choices/*/0",
                  "separator": ",",
                  "to_field": "numbers",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "add": [
                      ""
                  ],
                  "field": "choices_list",
                  "to_field": "choices_list",
                  "type": "add_constant"
              },
              {
                  "field": "choices_list",
                  "separator": "\n",
                  "to_field": "choices",
                  "type": "join_str"
              },
              {
                  "field_to_field": {
                      "number": "label"
                  },
                  "type": "rename_fields"
              }
          ],
          "task": {
              "inputs": [
                  "choices",
                  "sentence1",
                  "numbers",
                  "topic"
              ],
              "metrics": [
                  "metrics.accuracy"
              ],
              "outputs": [
                  "label"
              ],
              "type": "form_task"
          },
          "templates": "templates.qa.multiple_choice.original.all",
          "type": "task_card"
      }

References: :ref:`metrics.accuracy <metrics.accuracy>`, :ref:`templates.qa.multiple_choice.original.all <templates.qa.multiple_choice.original.all>`

|
|



.. _cards.mmlu.college_physics:

----------

college_physics
"""""""""""""""

.. note:: ID: ``cards.mmlu.college_physics``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "college_physics",
              "path": "cais/mmlu",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "mapper": {
                      "auxiliary_train": "train"
                  },
                  "type": "rename_splits"
              },
              {
                  "fields": {
                      "numbering": [
                          "A",
                          "B",
                          "C",
                          "D",
                          "E",
                          "F",
                          "G",
                          "H",
                          "I",
                          "J",
                          "K",
                          "L",
                          "M",
                          "N",
                          "O",
                          "P",
                          "Q",
                          "R",
                          "S",
                          "T",
                          "U",
                          "V",
                          "W",
                          "X",
                          "Y",
                          "Z"
                      ],
                      "topic": "college physics"
                  },
                  "type": "add_fields"
              },
              {
                  "field_to_field": {
                      "answer": "_answer",
                      "choices": "_choices",
                      "numbering": "_numbering",
                      "question": "sentence1",
                      "topic": "topic"
                  },
                  "type": "rename_fields"
              },
              {
                  "field": "_numbering",
                  "index": "_answer",
                  "to_field": "number",
                  "type": "take_by_field"
              },
              {
                  "field": "_choices",
                  "index": "_answer",
                  "to_field": "answer",
                  "type": "take_by_field"
              },
              {
                  "fields": [
                      "_numbering",
                      "_choices"
                  ],
                  "to_field": "choices",
                  "type": "zip_field_values"
              },
              {
                  "field": "choices/*",
                  "process_every_value": true,
                  "separator": ". ",
                  "to_field": "choices_list",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "field": "choices_list",
                  "index": "_answer",
                  "to_field": "number_and_answer",
                  "type": "take_by_field"
              },
              {
                  "field": "choices/*/0",
                  "separator": ",",
                  "to_field": "numbers",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "add": [
                      ""
                  ],
                  "field": "choices_list",
                  "to_field": "choices_list",
                  "type": "add_constant"
              },
              {
                  "field": "choices_list",
                  "separator": "\n",
                  "to_field": "choices",
                  "type": "join_str"
              },
              {
                  "field_to_field": {
                      "number": "label"
                  },
                  "type": "rename_fields"
              }
          ],
          "task": {
              "inputs": [
                  "choices",
                  "sentence1",
                  "numbers",
                  "topic"
              ],
              "metrics": [
                  "metrics.accuracy"
              ],
              "outputs": [
                  "label"
              ],
              "type": "form_task"
          },
          "templates": "templates.qa.multiple_choice.original.all",
          "type": "task_card"
      }

References: :ref:`metrics.accuracy <metrics.accuracy>`, :ref:`templates.qa.multiple_choice.original.all <templates.qa.multiple_choice.original.all>`

|
|



.. _cards.mmlu.elementary_mathematics:

----------

elementary_mathematics
""""""""""""""""""""""

.. note:: ID: ``cards.mmlu.elementary_mathematics``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "elementary_mathematics",
              "path": "cais/mmlu",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "mapper": {
                      "auxiliary_train": "train"
                  },
                  "type": "rename_splits"
              },
              {
                  "fields": {
                      "numbering": [
                          "A",
                          "B",
                          "C",
                          "D",
                          "E",
                          "F",
                          "G",
                          "H",
                          "I",
                          "J",
                          "K",
                          "L",
                          "M",
                          "N",
                          "O",
                          "P",
                          "Q",
                          "R",
                          "S",
                          "T",
                          "U",
                          "V",
                          "W",
                          "X",
                          "Y",
                          "Z"
                      ],
                      "topic": "elementary mathematics"
                  },
                  "type": "add_fields"
              },
              {
                  "field_to_field": {
                      "answer": "_answer",
                      "choices": "_choices",
                      "numbering": "_numbering",
                      "question": "sentence1",
                      "topic": "topic"
                  },
                  "type": "rename_fields"
              },
              {
                  "field": "_numbering",
                  "index": "_answer",
                  "to_field": "number",
                  "type": "take_by_field"
              },
              {
                  "field": "_choices",
                  "index": "_answer",
                  "to_field": "answer",
                  "type": "take_by_field"
              },
              {
                  "fields": [
                      "_numbering",
                      "_choices"
                  ],
                  "to_field": "choices",
                  "type": "zip_field_values"
              },
              {
                  "field": "choices/*",
                  "process_every_value": true,
                  "separator": ". ",
                  "to_field": "choices_list",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "field": "choices_list",
                  "index": "_answer",
                  "to_field": "number_and_answer",
                  "type": "take_by_field"
              },
              {
                  "field": "choices/*/0",
                  "separator": ",",
                  "to_field": "numbers",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "add": [
                      ""
                  ],
                  "field": "choices_list",
                  "to_field": "choices_list",
                  "type": "add_constant"
              },
              {
                  "field": "choices_list",
                  "separator": "\n",
                  "to_field": "choices",
                  "type": "join_str"
              },
              {
                  "field_to_field": {
                      "number": "label"
                  },
                  "type": "rename_fields"
              }
          ],
          "task": {
              "inputs": [
                  "choices",
                  "sentence1",
                  "numbers",
                  "topic"
              ],
              "metrics": [
                  "metrics.accuracy"
              ],
              "outputs": [
                  "label"
              ],
              "type": "form_task"
          },
          "templates": "templates.qa.multiple_choice.original.all",
          "type": "task_card"
      }

References: :ref:`metrics.accuracy <metrics.accuracy>`, :ref:`templates.qa.multiple_choice.original.all <templates.qa.multiple_choice.original.all>`

|
|



.. _cards.mmlu.logical_fallacies:

----------

logical_fallacies
"""""""""""""""""

.. note:: ID: ``cards.mmlu.logical_fallacies``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "logical_fallacies",
              "path": "cais/mmlu",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "mapper": {
                      "auxiliary_train": "train"
                  },
                  "type": "rename_splits"
              },
              {
                  "fields": {
                      "numbering": [
                          "A",
                          "B",
                          "C",
                          "D",
                          "E",
                          "F",
                          "G",
                          "H",
                          "I",
                          "J",
                          "K",
                          "L",
                          "M",
                          "N",
                          "O",
                          "P",
                          "Q",
                          "R",
                          "S",
                          "T",
                          "U",
                          "V",
                          "W",
                          "X",
                          "Y",
                          "Z"
                      ],
                      "topic": "logical fallacies"
                  },
                  "type": "add_fields"
              },
              {
                  "field_to_field": {
                      "answer": "_answer",
                      "choices": "_choices",
                      "numbering": "_numbering",
                      "question": "sentence1",
                      "topic": "topic"
                  },
                  "type": "rename_fields"
              },
              {
                  "field": "_numbering",
                  "index": "_answer",
                  "to_field": "number",
                  "type": "take_by_field"
              },
              {
                  "field": "_choices",
                  "index": "_answer",
                  "to_field": "answer",
                  "type": "take_by_field"
              },
              {
                  "fields": [
                      "_numbering",
                      "_choices"
                  ],
                  "to_field": "choices",
                  "type": "zip_field_values"
              },
              {
                  "field": "choices/*",
                  "process_every_value": true,
                  "separator": ". ",
                  "to_field": "choices_list",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "field": "choices_list",
                  "index": "_answer",
                  "to_field": "number_and_answer",
                  "type": "take_by_field"
              },
              {
                  "field": "choices/*/0",
                  "separator": ",",
                  "to_field": "numbers",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "add": [
                      ""
                  ],
                  "field": "choices_list",
                  "to_field": "choices_list",
                  "type": "add_constant"
              },
              {
                  "field": "choices_list",
                  "separator": "\n",
                  "to_field": "choices",
                  "type": "join_str"
              },
              {
                  "field_to_field": {
                      "number": "label"
                  },
                  "type": "rename_fields"
              }
          ],
          "task": {
              "inputs": [
                  "choices",
                  "sentence1",
                  "numbers",
                  "topic"
              ],
              "metrics": [
                  "metrics.accuracy"
              ],
              "outputs": [
                  "label"
              ],
              "type": "form_task"
          },
          "templates": "templates.qa.multiple_choice.original.all",
          "type": "task_card"
      }

References: :ref:`metrics.accuracy <metrics.accuracy>`, :ref:`templates.qa.multiple_choice.original.all <templates.qa.multiple_choice.original.all>`

|
|



.. _cards.mmlu.human_aging:

----------

human_aging
"""""""""""

.. note:: ID: ``cards.mmlu.human_aging``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "human_aging",
              "path": "cais/mmlu",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "mapper": {
                      "auxiliary_train": "train"
                  },
                  "type": "rename_splits"
              },
              {
                  "fields": {
                      "numbering": [
                          "A",
                          "B",
                          "C",
                          "D",
                          "E",
                          "F",
                          "G",
                          "H",
                          "I",
                          "J",
                          "K",
                          "L",
                          "M",
                          "N",
                          "O",
                          "P",
                          "Q",
                          "R",
                          "S",
                          "T",
                          "U",
                          "V",
                          "W",
                          "X",
                          "Y",
                          "Z"
                      ],
                      "topic": "human aging"
                  },
                  "type": "add_fields"
              },
              {
                  "field_to_field": {
                      "answer": "_answer",
                      "choices": "_choices",
                      "numbering": "_numbering",
                      "question": "sentence1",
                      "topic": "topic"
                  },
                  "type": "rename_fields"
              },
              {
                  "field": "_numbering",
                  "index": "_answer",
                  "to_field": "number",
                  "type": "take_by_field"
              },
              {
                  "field": "_choices",
                  "index": "_answer",
                  "to_field": "answer",
                  "type": "take_by_field"
              },
              {
                  "fields": [
                      "_numbering",
                      "_choices"
                  ],
                  "to_field": "choices",
                  "type": "zip_field_values"
              },
              {
                  "field": "choices/*",
                  "process_every_value": true,
                  "separator": ". ",
                  "to_field": "choices_list",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "field": "choices_list",
                  "index": "_answer",
                  "to_field": "number_and_answer",
                  "type": "take_by_field"
              },
              {
                  "field": "choices/*/0",
                  "separator": ",",
                  "to_field": "numbers",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "add": [
                      ""
                  ],
                  "field": "choices_list",
                  "to_field": "choices_list",
                  "type": "add_constant"
              },
              {
                  "field": "choices_list",
                  "separator": "\n",
                  "to_field": "choices",
                  "type": "join_str"
              },
              {
                  "field_to_field": {
                      "number": "label"
                  },
                  "type": "rename_fields"
              }
          ],
          "task": {
              "inputs": [
                  "choices",
                  "sentence1",
                  "numbers",
                  "topic"
              ],
              "metrics": [
                  "metrics.accuracy"
              ],
              "outputs": [
                  "label"
              ],
              "type": "form_task"
          },
          "templates": "templates.qa.multiple_choice.original.all",
          "type": "task_card"
      }

References: :ref:`metrics.accuracy <metrics.accuracy>`, :ref:`templates.qa.multiple_choice.original.all <templates.qa.multiple_choice.original.all>`

|
|



.. _cards.mmlu.professional_law:

----------

professional_law
""""""""""""""""

.. note:: ID: ``cards.mmlu.professional_law``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "professional_law",
              "path": "cais/mmlu",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "mapper": {
                      "auxiliary_train": "train"
                  },
                  "type": "rename_splits"
              },
              {
                  "fields": {
                      "numbering": [
                          "A",
                          "B",
                          "C",
                          "D",
                          "E",
                          "F",
                          "G",
                          "H",
                          "I",
                          "J",
                          "K",
                          "L",
                          "M",
                          "N",
                          "O",
                          "P",
                          "Q",
                          "R",
                          "S",
                          "T",
                          "U",
                          "V",
                          "W",
                          "X",
                          "Y",
                          "Z"
                      ],
                      "topic": "professional law"
                  },
                  "type": "add_fields"
              },
              {
                  "field_to_field": {
                      "answer": "_answer",
                      "choices": "_choices",
                      "numbering": "_numbering",
                      "question": "sentence1",
                      "topic": "topic"
                  },
                  "type": "rename_fields"
              },
              {
                  "field": "_numbering",
                  "index": "_answer",
                  "to_field": "number",
                  "type": "take_by_field"
              },
              {
                  "field": "_choices",
                  "index": "_answer",
                  "to_field": "answer",
                  "type": "take_by_field"
              },
              {
                  "fields": [
                      "_numbering",
                      "_choices"
                  ],
                  "to_field": "choices",
                  "type": "zip_field_values"
              },
              {
                  "field": "choices/*",
                  "process_every_value": true,
                  "separator": ". ",
                  "to_field": "choices_list",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "field": "choices_list",
                  "index": "_answer",
                  "to_field": "number_and_answer",
                  "type": "take_by_field"
              },
              {
                  "field": "choices/*/0",
                  "separator": ",",
                  "to_field": "numbers",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "add": [
                      ""
                  ],
                  "field": "choices_list",
                  "to_field": "choices_list",
                  "type": "add_constant"
              },
              {
                  "field": "choices_list",
                  "separator": "\n",
                  "to_field": "choices",
                  "type": "join_str"
              },
              {
                  "field_to_field": {
                      "number": "label"
                  },
                  "type": "rename_fields"
              }
          ],
          "task": {
              "inputs": [
                  "choices",
                  "sentence1",
                  "numbers",
                  "topic"
              ],
              "metrics": [
                  "metrics.accuracy"
              ],
              "outputs": [
                  "label"
              ],
              "type": "form_task"
          },
          "templates": "templates.qa.multiple_choice.original.all",
          "type": "task_card"
      }

References: :ref:`metrics.accuracy <metrics.accuracy>`, :ref:`templates.qa.multiple_choice.original.all <templates.qa.multiple_choice.original.all>`

|
|



.. _cards.mmlu.high_school_microeconomics:

----------

high_school_microeconomics
""""""""""""""""""""""""""

.. note:: ID: ``cards.mmlu.high_school_microeconomics``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "high_school_microeconomics",
              "path": "cais/mmlu",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "mapper": {
                      "auxiliary_train": "train"
                  },
                  "type": "rename_splits"
              },
              {
                  "fields": {
                      "numbering": [
                          "A",
                          "B",
                          "C",
                          "D",
                          "E",
                          "F",
                          "G",
                          "H",
                          "I",
                          "J",
                          "K",
                          "L",
                          "M",
                          "N",
                          "O",
                          "P",
                          "Q",
                          "R",
                          "S",
                          "T",
                          "U",
                          "V",
                          "W",
                          "X",
                          "Y",
                          "Z"
                      ],
                      "topic": "high school microeconomics"
                  },
                  "type": "add_fields"
              },
              {
                  "field_to_field": {
                      "answer": "_answer",
                      "choices": "_choices",
                      "numbering": "_numbering",
                      "question": "sentence1",
                      "topic": "topic"
                  },
                  "type": "rename_fields"
              },
              {
                  "field": "_numbering",
                  "index": "_answer",
                  "to_field": "number",
                  "type": "take_by_field"
              },
              {
                  "field": "_choices",
                  "index": "_answer",
                  "to_field": "answer",
                  "type": "take_by_field"
              },
              {
                  "fields": [
                      "_numbering",
                      "_choices"
                  ],
                  "to_field": "choices",
                  "type": "zip_field_values"
              },
              {
                  "field": "choices/*",
                  "process_every_value": true,
                  "separator": ". ",
                  "to_field": "choices_list",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "field": "choices_list",
                  "index": "_answer",
                  "to_field": "number_and_answer",
                  "type": "take_by_field"
              },
              {
                  "field": "choices/*/0",
                  "separator": ",",
                  "to_field": "numbers",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "add": [
                      ""
                  ],
                  "field": "choices_list",
                  "to_field": "choices_list",
                  "type": "add_constant"
              },
              {
                  "field": "choices_list",
                  "separator": "\n",
                  "to_field": "choices",
                  "type": "join_str"
              },
              {
                  "field_to_field": {
                      "number": "label"
                  },
                  "type": "rename_fields"
              }
          ],
          "task": {
              "inputs": [
                  "choices",
                  "sentence1",
                  "numbers",
                  "topic"
              ],
              "metrics": [
                  "metrics.accuracy"
              ],
              "outputs": [
                  "label"
              ],
              "type": "form_task"
          },
          "templates": "templates.qa.multiple_choice.original.all",
          "type": "task_card"
      }

References: :ref:`metrics.accuracy <metrics.accuracy>`, :ref:`templates.qa.multiple_choice.original.all <templates.qa.multiple_choice.original.all>`

|
|



.. _cards.mmlu.high_school_government_and_politics:

----------

high_school_government_and_politics
"""""""""""""""""""""""""""""""""""

.. note:: ID: ``cards.mmlu.high_school_government_and_politics``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "high_school_government_and_politics",
              "path": "cais/mmlu",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "mapper": {
                      "auxiliary_train": "train"
                  },
                  "type": "rename_splits"
              },
              {
                  "fields": {
                      "numbering": [
                          "A",
                          "B",
                          "C",
                          "D",
                          "E",
                          "F",
                          "G",
                          "H",
                          "I",
                          "J",
                          "K",
                          "L",
                          "M",
                          "N",
                          "O",
                          "P",
                          "Q",
                          "R",
                          "S",
                          "T",
                          "U",
                          "V",
                          "W",
                          "X",
                          "Y",
                          "Z"
                      ],
                      "topic": "high school government and politics"
                  },
                  "type": "add_fields"
              },
              {
                  "field_to_field": {
                      "answer": "_answer",
                      "choices": "_choices",
                      "numbering": "_numbering",
                      "question": "sentence1",
                      "topic": "topic"
                  },
                  "type": "rename_fields"
              },
              {
                  "field": "_numbering",
                  "index": "_answer",
                  "to_field": "number",
                  "type": "take_by_field"
              },
              {
                  "field": "_choices",
                  "index": "_answer",
                  "to_field": "answer",
                  "type": "take_by_field"
              },
              {
                  "fields": [
                      "_numbering",
                      "_choices"
                  ],
                  "to_field": "choices",
                  "type": "zip_field_values"
              },
              {
                  "field": "choices/*",
                  "process_every_value": true,
                  "separator": ". ",
                  "to_field": "choices_list",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "field": "choices_list",
                  "index": "_answer",
                  "to_field": "number_and_answer",
                  "type": "take_by_field"
              },
              {
                  "field": "choices/*/0",
                  "separator": ",",
                  "to_field": "numbers",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "add": [
                      ""
                  ],
                  "field": "choices_list",
                  "to_field": "choices_list",
                  "type": "add_constant"
              },
              {
                  "field": "choices_list",
                  "separator": "\n",
                  "to_field": "choices",
                  "type": "join_str"
              },
              {
                  "field_to_field": {
                      "number": "label"
                  },
                  "type": "rename_fields"
              }
          ],
          "task": {
              "inputs": [
                  "choices",
                  "sentence1",
                  "numbers",
                  "topic"
              ],
              "metrics": [
                  "metrics.accuracy"
              ],
              "outputs": [
                  "label"
              ],
              "type": "form_task"
          },
          "templates": "templates.qa.multiple_choice.original.all",
          "type": "task_card"
      }

References: :ref:`metrics.accuracy <metrics.accuracy>`, :ref:`templates.qa.multiple_choice.original.all <templates.qa.multiple_choice.original.all>`

|
|



.. _cards.mmlu.professional_medicine:

----------

professional_medicine
"""""""""""""""""""""

.. note:: ID: ``cards.mmlu.professional_medicine``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "professional_medicine",
              "path": "cais/mmlu",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "mapper": {
                      "auxiliary_train": "train"
                  },
                  "type": "rename_splits"
              },
              {
                  "fields": {
                      "numbering": [
                          "A",
                          "B",
                          "C",
                          "D",
                          "E",
                          "F",
                          "G",
                          "H",
                          "I",
                          "J",
                          "K",
                          "L",
                          "M",
                          "N",
                          "O",
                          "P",
                          "Q",
                          "R",
                          "S",
                          "T",
                          "U",
                          "V",
                          "W",
                          "X",
                          "Y",
                          "Z"
                      ],
                      "topic": "professional medicine"
                  },
                  "type": "add_fields"
              },
              {
                  "field_to_field": {
                      "answer": "_answer",
                      "choices": "_choices",
                      "numbering": "_numbering",
                      "question": "sentence1",
                      "topic": "topic"
                  },
                  "type": "rename_fields"
              },
              {
                  "field": "_numbering",
                  "index": "_answer",
                  "to_field": "number",
                  "type": "take_by_field"
              },
              {
                  "field": "_choices",
                  "index": "_answer",
                  "to_field": "answer",
                  "type": "take_by_field"
              },
              {
                  "fields": [
                      "_numbering",
                      "_choices"
                  ],
                  "to_field": "choices",
                  "type": "zip_field_values"
              },
              {
                  "field": "choices/*",
                  "process_every_value": true,
                  "separator": ". ",
                  "to_field": "choices_list",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "field": "choices_list",
                  "index": "_answer",
                  "to_field": "number_and_answer",
                  "type": "take_by_field"
              },
              {
                  "field": "choices/*/0",
                  "separator": ",",
                  "to_field": "numbers",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "add": [
                      ""
                  ],
                  "field": "choices_list",
                  "to_field": "choices_list",
                  "type": "add_constant"
              },
              {
                  "field": "choices_list",
                  "separator": "\n",
                  "to_field": "choices",
                  "type": "join_str"
              },
              {
                  "field_to_field": {
                      "number": "label"
                  },
                  "type": "rename_fields"
              }
          ],
          "task": {
              "inputs": [
                  "choices",
                  "sentence1",
                  "numbers",
                  "topic"
              ],
              "metrics": [
                  "metrics.accuracy"
              ],
              "outputs": [
                  "label"
              ],
              "type": "form_task"
          },
          "templates": "templates.qa.multiple_choice.original.all",
          "type": "task_card"
      }

References: :ref:`metrics.accuracy <metrics.accuracy>`, :ref:`templates.qa.multiple_choice.original.all <templates.qa.multiple_choice.original.all>`

|
|



.. _cards.mmlu.medical_genetics:

----------

medical_genetics
""""""""""""""""

.. note:: ID: ``cards.mmlu.medical_genetics``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "medical_genetics",
              "path": "cais/mmlu",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "mapper": {
                      "auxiliary_train": "train"
                  },
                  "type": "rename_splits"
              },
              {
                  "fields": {
                      "numbering": [
                          "A",
                          "B",
                          "C",
                          "D",
                          "E",
                          "F",
                          "G",
                          "H",
                          "I",
                          "J",
                          "K",
                          "L",
                          "M",
                          "N",
                          "O",
                          "P",
                          "Q",
                          "R",
                          "S",
                          "T",
                          "U",
                          "V",
                          "W",
                          "X",
                          "Y",
                          "Z"
                      ],
                      "topic": "medical genetics"
                  },
                  "type": "add_fields"
              },
              {
                  "field_to_field": {
                      "answer": "_answer",
                      "choices": "_choices",
                      "numbering": "_numbering",
                      "question": "sentence1",
                      "topic": "topic"
                  },
                  "type": "rename_fields"
              },
              {
                  "field": "_numbering",
                  "index": "_answer",
                  "to_field": "number",
                  "type": "take_by_field"
              },
              {
                  "field": "_choices",
                  "index": "_answer",
                  "to_field": "answer",
                  "type": "take_by_field"
              },
              {
                  "fields": [
                      "_numbering",
                      "_choices"
                  ],
                  "to_field": "choices",
                  "type": "zip_field_values"
              },
              {
                  "field": "choices/*",
                  "process_every_value": true,
                  "separator": ". ",
                  "to_field": "choices_list",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "field": "choices_list",
                  "index": "_answer",
                  "to_field": "number_and_answer",
                  "type": "take_by_field"
              },
              {
                  "field": "choices/*/0",
                  "separator": ",",
                  "to_field": "numbers",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "add": [
                      ""
                  ],
                  "field": "choices_list",
                  "to_field": "choices_list",
                  "type": "add_constant"
              },
              {
                  "field": "choices_list",
                  "separator": "\n",
                  "to_field": "choices",
                  "type": "join_str"
              },
              {
                  "field_to_field": {
                      "number": "label"
                  },
                  "type": "rename_fields"
              }
          ],
          "task": {
              "inputs": [
                  "choices",
                  "sentence1",
                  "numbers",
                  "topic"
              ],
              "metrics": [
                  "metrics.accuracy"
              ],
              "outputs": [
                  "label"
              ],
              "type": "form_task"
          },
          "templates": "templates.qa.multiple_choice.original.all",
          "type": "task_card"
      }

References: :ref:`metrics.accuracy <metrics.accuracy>`, :ref:`templates.qa.multiple_choice.original.all <templates.qa.multiple_choice.original.all>`

|
|



.. _cards.wnli:

----------

wnli
^^^^

.. note:: ID: ``cards.wnli``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "wnli",
              "path": "glue",
              "type": "load_hf"
          },
          "preprocess_steps": [
              "splitters.small_no_test",
              {
                  "field_to_field": {
                      "sentence1": "premise",
                      "sentence2": "hypothesis"
                  },
                  "type": "rename_fields"
              },
              {
                  "mappers": {
                      "label": {
                          "0": "entailment",
                          "1": "not entailment"
                      }
                  },
                  "type": "map_instance_values"
              },
              {
                  "fields": {
                      "choices": [
                          "entailment",
                          "not entailment"
                      ]
                  },
                  "type": "add_fields"
              }
          ],
          "task": "tasks.nli",
          "templates": "templates.classification.nli.all",
          "type": "task_card"
      }

References: :ref:`tasks.nli <tasks.nli>`, :ref:`splitters.small_no_test <splitters.small_no_test>`, :ref:`templates.classification.nli.all <templates.classification.nli.all>`

|
|



.. _.cards.wmt:

----------

wmt
^^^



.. _cards.wmt.en_ro:

----------

en_ro
"""""

.. note:: ID: ``cards.wmt.en_ro``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "ro-en",
              "path": "wmt16",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "field_to_field": [
                      [
                          "translation/en",
                          "text"
                      ],
                      [
                          "translation/ro",
                          "translation"
                      ]
                  ],
                  "type": "copy_fields",
                  "use_query": true
              },
              {
                  "fields": {
                      "source_language": "english",
                      "target_language": "romanian"
                  },
                  "type": "add_fields"
              }
          ],
          "task": "tasks.translation.directed",
          "templates": "templates.translation.directed.all",
          "type": "task_card"
      }

References: :ref:`tasks.translation.directed <tasks.translation.directed>`, :ref:`templates.translation.directed.all <templates.translation.directed.all>`

|
|



.. _cards.wmt.en_fr:

----------

en_fr
"""""

.. note:: ID: ``cards.wmt.en_fr``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "fr-en",
              "path": "wmt14",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "field_to_field": [
                      [
                          "translation/en",
                          "text"
                      ],
                      [
                          "translation/fr",
                          "translation"
                      ]
                  ],
                  "type": "copy_fields",
                  "use_query": true
              },
              {
                  "fields": {
                      "source_language": "english",
                      "target_language": "french"
                  },
                  "type": "add_fields"
              }
          ],
          "task": "tasks.translation.directed",
          "templates": "templates.translation.directed.all",
          "type": "task_card"
      }

References: :ref:`tasks.translation.directed <tasks.translation.directed>`, :ref:`templates.translation.directed.all <templates.translation.directed.all>`

|
|



.. _cards.wmt.en_de:

----------

en_de
"""""

.. note:: ID: ``cards.wmt.en_de``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "de-en",
              "path": "wmt16",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "field_to_field": [
                      [
                          "translation/en",
                          "text"
                      ],
                      [
                          "translation/de",
                          "translation"
                      ]
                  ],
                  "type": "copy_fields",
                  "use_query": true
              },
              {
                  "fields": {
                      "source_language": "english",
                      "target_language": "deutch"
                  },
                  "type": "add_fields"
              }
          ],
          "task": "tasks.translation.directed",
          "templates": "templates.translation.directed.all",
          "type": "task_card"
      }

References: :ref:`tasks.translation.directed <tasks.translation.directed>`, :ref:`templates.translation.directed.all <templates.translation.directed.all>`

|
|



.. _.cards.xwinogrande:

----------

xwinogrande
^^^^^^^^^^^



.. _cards.xwinogrande.en:

----------

en
""

.. note:: ID: ``cards.xwinogrande.en``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "en",
              "path": "Muennighoff/xwinograd",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "fields": {
                      "numbering": [
                          "A",
                          "B",
                          "C",
                          "D",
                          "E",
                          "F",
                          "G",
                          "H",
                          "I",
                          "J",
                          "K",
                          "L",
                          "M",
                          "N",
                          "O",
                          "P",
                          "Q",
                          "R",
                          "S",
                          "T",
                          "U",
                          "V",
                          "W",
                          "X",
                          "Y",
                          "Z"
                      ],
                      "topic": "common sense"
                  },
                  "type": "add_fields"
              },
              {
                  "fields": [
                      "option1",
                      "option2"
                  ],
                  "to_field": "choices",
                  "type": "list_field_values"
              },
              {
                  "fields": {
                      "answer": "int"
                  },
                  "type": "cast_fields"
              },
              {
                  "add": -1,
                  "field": "answer",
                  "type": "add_constant"
              },
              {
                  "field_to_field": {
                      "answer": "_answer",
                      "choices": "_choices",
                      "numbering": "_numbering",
                      "sentence": "sentence1",
                      "topic": "topic"
                  },
                  "type": "rename_fields"
              },
              {
                  "field": "_numbering",
                  "index": "_answer",
                  "to_field": "number",
                  "type": "take_by_field"
              },
              {
                  "field": "_choices",
                  "index": "_answer",
                  "to_field": "answer",
                  "type": "take_by_field"
              },
              {
                  "fields": [
                      "_numbering",
                      "_choices"
                  ],
                  "to_field": "choices",
                  "type": "zip_field_values"
              },
              {
                  "field": "choices/*",
                  "process_every_value": true,
                  "separator": ". ",
                  "to_field": "choices_list",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "field": "choices_list",
                  "index": "_answer",
                  "to_field": "number_and_answer",
                  "type": "take_by_field"
              },
              {
                  "field": "choices/*/0",
                  "separator": ",",
                  "to_field": "numbers",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "add": [
                      ""
                  ],
                  "field": "choices_list",
                  "to_field": "choices_list",
                  "type": "add_constant"
              },
              {
                  "field": "choices_list",
                  "separator": "\n",
                  "to_field": "choices",
                  "type": "join_str"
              },
              {
                  "field_to_field": {
                      "number": "label"
                  },
                  "type": "rename_fields"
              }
          ],
          "task": {
              "inputs": [
                  "choices",
                  "sentence1",
                  "numbers",
                  "topic"
              ],
              "metrics": [
                  "metrics.accuracy"
              ],
              "outputs": [
                  "label"
              ],
              "type": "form_task"
          },
          "templates": "templates.qa.multiple_choice.original.all",
          "type": "task_card"
      }

References: :ref:`metrics.accuracy <metrics.accuracy>`, :ref:`templates.qa.multiple_choice.original.all <templates.qa.multiple_choice.original.all>`

|
|



.. _cards.xwinogrande.zh:

----------

zh
""

.. note:: ID: ``cards.xwinogrande.zh``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "zh",
              "path": "Muennighoff/xwinograd",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "fields": {
                      "numbering": [
                          "A",
                          "B",
                          "C",
                          "D",
                          "E",
                          "F",
                          "G",
                          "H",
                          "I",
                          "J",
                          "K",
                          "L",
                          "M",
                          "N",
                          "O",
                          "P",
                          "Q",
                          "R",
                          "S",
                          "T",
                          "U",
                          "V",
                          "W",
                          "X",
                          "Y",
                          "Z"
                      ],
                      "topic": "common sense"
                  },
                  "type": "add_fields"
              },
              {
                  "fields": [
                      "option1",
                      "option2"
                  ],
                  "to_field": "choices",
                  "type": "list_field_values"
              },
              {
                  "fields": {
                      "answer": "int"
                  },
                  "type": "cast_fields"
              },
              {
                  "add": -1,
                  "field": "answer",
                  "type": "add_constant"
              },
              {
                  "field_to_field": {
                      "answer": "_answer",
                      "choices": "_choices",
                      "numbering": "_numbering",
                      "sentence": "sentence1",
                      "topic": "topic"
                  },
                  "type": "rename_fields"
              },
              {
                  "field": "_numbering",
                  "index": "_answer",
                  "to_field": "number",
                  "type": "take_by_field"
              },
              {
                  "field": "_choices",
                  "index": "_answer",
                  "to_field": "answer",
                  "type": "take_by_field"
              },
              {
                  "fields": [
                      "_numbering",
                      "_choices"
                  ],
                  "to_field": "choices",
                  "type": "zip_field_values"
              },
              {
                  "field": "choices/*",
                  "process_every_value": true,
                  "separator": ". ",
                  "to_field": "choices_list",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "field": "choices_list",
                  "index": "_answer",
                  "to_field": "number_and_answer",
                  "type": "take_by_field"
              },
              {
                  "field": "choices/*/0",
                  "separator": ",",
                  "to_field": "numbers",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "add": [
                      ""
                  ],
                  "field": "choices_list",
                  "to_field": "choices_list",
                  "type": "add_constant"
              },
              {
                  "field": "choices_list",
                  "separator": "\n",
                  "to_field": "choices",
                  "type": "join_str"
              },
              {
                  "field_to_field": {
                      "number": "label"
                  },
                  "type": "rename_fields"
              }
          ],
          "task": {
              "inputs": [
                  "choices",
                  "sentence1",
                  "numbers",
                  "topic"
              ],
              "metrics": [
                  "metrics.accuracy"
              ],
              "outputs": [
                  "label"
              ],
              "type": "form_task"
          },
          "templates": "templates.qa.multiple_choice.original.all",
          "type": "task_card"
      }

References: :ref:`metrics.accuracy <metrics.accuracy>`, :ref:`templates.qa.multiple_choice.original.all <templates.qa.multiple_choice.original.all>`

|
|



.. _cards.xwinogrande.pt:

----------

pt
""

.. note:: ID: ``cards.xwinogrande.pt``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "pt",
              "path": "Muennighoff/xwinograd",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "fields": {
                      "numbering": [
                          "A",
                          "B",
                          "C",
                          "D",
                          "E",
                          "F",
                          "G",
                          "H",
                          "I",
                          "J",
                          "K",
                          "L",
                          "M",
                          "N",
                          "O",
                          "P",
                          "Q",
                          "R",
                          "S",
                          "T",
                          "U",
                          "V",
                          "W",
                          "X",
                          "Y",
                          "Z"
                      ],
                      "topic": "common sense"
                  },
                  "type": "add_fields"
              },
              {
                  "fields": [
                      "option1",
                      "option2"
                  ],
                  "to_field": "choices",
                  "type": "list_field_values"
              },
              {
                  "fields": {
                      "answer": "int"
                  },
                  "type": "cast_fields"
              },
              {
                  "add": -1,
                  "field": "answer",
                  "type": "add_constant"
              },
              {
                  "field_to_field": {
                      "answer": "_answer",
                      "choices": "_choices",
                      "numbering": "_numbering",
                      "sentence": "sentence1",
                      "topic": "topic"
                  },
                  "type": "rename_fields"
              },
              {
                  "field": "_numbering",
                  "index": "_answer",
                  "to_field": "number",
                  "type": "take_by_field"
              },
              {
                  "field": "_choices",
                  "index": "_answer",
                  "to_field": "answer",
                  "type": "take_by_field"
              },
              {
                  "fields": [
                      "_numbering",
                      "_choices"
                  ],
                  "to_field": "choices",
                  "type": "zip_field_values"
              },
              {
                  "field": "choices/*",
                  "process_every_value": true,
                  "separator": ". ",
                  "to_field": "choices_list",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "field": "choices_list",
                  "index": "_answer",
                  "to_field": "number_and_answer",
                  "type": "take_by_field"
              },
              {
                  "field": "choices/*/0",
                  "separator": ",",
                  "to_field": "numbers",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "add": [
                      ""
                  ],
                  "field": "choices_list",
                  "to_field": "choices_list",
                  "type": "add_constant"
              },
              {
                  "field": "choices_list",
                  "separator": "\n",
                  "to_field": "choices",
                  "type": "join_str"
              },
              {
                  "field_to_field": {
                      "number": "label"
                  },
                  "type": "rename_fields"
              }
          ],
          "task": {
              "inputs": [
                  "choices",
                  "sentence1",
                  "numbers",
                  "topic"
              ],
              "metrics": [
                  "metrics.accuracy"
              ],
              "outputs": [
                  "label"
              ],
              "type": "form_task"
          },
          "templates": "templates.qa.multiple_choice.original.all",
          "type": "task_card"
      }

References: :ref:`metrics.accuracy <metrics.accuracy>`, :ref:`templates.qa.multiple_choice.original.all <templates.qa.multiple_choice.original.all>`

|
|



.. _cards.xwinogrande.jp:

----------

jp
""

.. note:: ID: ``cards.xwinogrande.jp``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "jp",
              "path": "Muennighoff/xwinograd",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "fields": {
                      "numbering": [
                          "A",
                          "B",
                          "C",
                          "D",
                          "E",
                          "F",
                          "G",
                          "H",
                          "I",
                          "J",
                          "K",
                          "L",
                          "M",
                          "N",
                          "O",
                          "P",
                          "Q",
                          "R",
                          "S",
                          "T",
                          "U",
                          "V",
                          "W",
                          "X",
                          "Y",
                          "Z"
                      ],
                      "topic": "common sense"
                  },
                  "type": "add_fields"
              },
              {
                  "fields": [
                      "option1",
                      "option2"
                  ],
                  "to_field": "choices",
                  "type": "list_field_values"
              },
              {
                  "fields": {
                      "answer": "int"
                  },
                  "type": "cast_fields"
              },
              {
                  "add": -1,
                  "field": "answer",
                  "type": "add_constant"
              },
              {
                  "field_to_field": {
                      "answer": "_answer",
                      "choices": "_choices",
                      "numbering": "_numbering",
                      "sentence": "sentence1",
                      "topic": "topic"
                  },
                  "type": "rename_fields"
              },
              {
                  "field": "_numbering",
                  "index": "_answer",
                  "to_field": "number",
                  "type": "take_by_field"
              },
              {
                  "field": "_choices",
                  "index": "_answer",
                  "to_field": "answer",
                  "type": "take_by_field"
              },
              {
                  "fields": [
                      "_numbering",
                      "_choices"
                  ],
                  "to_field": "choices",
                  "type": "zip_field_values"
              },
              {
                  "field": "choices/*",
                  "process_every_value": true,
                  "separator": ". ",
                  "to_field": "choices_list",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "field": "choices_list",
                  "index": "_answer",
                  "to_field": "number_and_answer",
                  "type": "take_by_field"
              },
              {
                  "field": "choices/*/0",
                  "separator": ",",
                  "to_field": "numbers",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "add": [
                      ""
                  ],
                  "field": "choices_list",
                  "to_field": "choices_list",
                  "type": "add_constant"
              },
              {
                  "field": "choices_list",
                  "separator": "\n",
                  "to_field": "choices",
                  "type": "join_str"
              },
              {
                  "field_to_field": {
                      "number": "label"
                  },
                  "type": "rename_fields"
              }
          ],
          "task": {
              "inputs": [
                  "choices",
                  "sentence1",
                  "numbers",
                  "topic"
              ],
              "metrics": [
                  "metrics.accuracy"
              ],
              "outputs": [
                  "label"
              ],
              "type": "form_task"
          },
          "templates": "templates.qa.multiple_choice.original.all",
          "type": "task_card"
      }

References: :ref:`metrics.accuracy <metrics.accuracy>`, :ref:`templates.qa.multiple_choice.original.all <templates.qa.multiple_choice.original.all>`

|
|



.. _cards.xwinogrande.ru:

----------

ru
""

.. note:: ID: ``cards.xwinogrande.ru``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "ru",
              "path": "Muennighoff/xwinograd",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "fields": {
                      "numbering": [
                          "A",
                          "B",
                          "C",
                          "D",
                          "E",
                          "F",
                          "G",
                          "H",
                          "I",
                          "J",
                          "K",
                          "L",
                          "M",
                          "N",
                          "O",
                          "P",
                          "Q",
                          "R",
                          "S",
                          "T",
                          "U",
                          "V",
                          "W",
                          "X",
                          "Y",
                          "Z"
                      ],
                      "topic": "common sense"
                  },
                  "type": "add_fields"
              },
              {
                  "fields": [
                      "option1",
                      "option2"
                  ],
                  "to_field": "choices",
                  "type": "list_field_values"
              },
              {
                  "fields": {
                      "answer": "int"
                  },
                  "type": "cast_fields"
              },
              {
                  "add": -1,
                  "field": "answer",
                  "type": "add_constant"
              },
              {
                  "field_to_field": {
                      "answer": "_answer",
                      "choices": "_choices",
                      "numbering": "_numbering",
                      "sentence": "sentence1",
                      "topic": "topic"
                  },
                  "type": "rename_fields"
              },
              {
                  "field": "_numbering",
                  "index": "_answer",
                  "to_field": "number",
                  "type": "take_by_field"
              },
              {
                  "field": "_choices",
                  "index": "_answer",
                  "to_field": "answer",
                  "type": "take_by_field"
              },
              {
                  "fields": [
                      "_numbering",
                      "_choices"
                  ],
                  "to_field": "choices",
                  "type": "zip_field_values"
              },
              {
                  "field": "choices/*",
                  "process_every_value": true,
                  "separator": ". ",
                  "to_field": "choices_list",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "field": "choices_list",
                  "index": "_answer",
                  "to_field": "number_and_answer",
                  "type": "take_by_field"
              },
              {
                  "field": "choices/*/0",
                  "separator": ",",
                  "to_field": "numbers",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "add": [
                      ""
                  ],
                  "field": "choices_list",
                  "to_field": "choices_list",
                  "type": "add_constant"
              },
              {
                  "field": "choices_list",
                  "separator": "\n",
                  "to_field": "choices",
                  "type": "join_str"
              },
              {
                  "field_to_field": {
                      "number": "label"
                  },
                  "type": "rename_fields"
              }
          ],
          "task": {
              "inputs": [
                  "choices",
                  "sentence1",
                  "numbers",
                  "topic"
              ],
              "metrics": [
                  "metrics.accuracy"
              ],
              "outputs": [
                  "label"
              ],
              "type": "form_task"
          },
          "templates": "templates.qa.multiple_choice.original.all",
          "type": "task_card"
      }

References: :ref:`metrics.accuracy <metrics.accuracy>`, :ref:`templates.qa.multiple_choice.original.all <templates.qa.multiple_choice.original.all>`

|
|



.. _cards.cnn_dailymail:

----------

cnn_dailymail
^^^^^^^^^^^^^

.. note:: ID: ``cards.cnn_dailymail``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "3.0.0",
              "path": "cnn_dailymail",
              "type": "load_hf"
          },
          "preprocess_steps": [],
          "task": {
              "inputs": [
                  "article"
              ],
              "metrics": [
                  "metrics.rouge"
              ],
              "outputs": [
                  "highlights"
              ],
              "type": "form_task"
          },
          "templates": {
              "items": [
                  {
                      "input_format": "{article}",
                      "output_format": "{highlights}",
                      "type": "input_output_template"
                  }
              ],
              "type": "templates_list"
          },
          "type": "task_card"
      }

References: :ref:`metrics.rouge <metrics.rouge>`

|
|



.. _cards.squad:

----------

squad
^^^^^

.. note:: ID: ``cards.squad``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "path": "squad",
              "type": "load_hf"
          },
          "preprocess_steps": [
              "splitters.small_no_test",
              {
                  "field_to_field": [
                      [
                          "answers/text",
                          "answers"
                      ]
                  ],
                  "type": "copy_fields",
                  "use_query": true
              }
          ],
          "task": {
              "inputs": [
                  "context",
                  "question"
              ],
              "metrics": [
                  "metrics.squad"
              ],
              "outputs": [
                  "answers"
              ],
              "type": "form_task"
          },
          "templates": "templates.qa.contextual.all",
          "type": "task_card"
      }

References: :ref:`templates.qa.contextual.all <templates.qa.contextual.all>`, :ref:`splitters.small_no_test <splitters.small_no_test>`, :ref:`metrics.squad <metrics.squad>`

|
|



.. _cards.wsc:

----------

wsc
^^^

.. note:: ID: ``cards.wsc``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "name": "wsc",
              "path": "super_glue",
              "type": "load_hf"
          },
          "preprocess_steps": [
              "splitters.small_no_test",
              {
                  "mappers": {
                      "label": {
                          "0": "False",
                          "1": "True"
                      }
                  },
                  "type": "map_instance_values"
              },
              {
                  "fields": {
                      "choices": [
                          "False",
                          "True"
                      ]
                  },
                  "type": "add_fields"
              }
          ],
          "task": {
              "inputs": [
                  "choices",
                  "text",
                  "span1_text",
                  "span2_text"
              ],
              "metrics": [
                  "metrics.accuracy"
              ],
              "outputs": [
                  "label"
              ],
              "type": "form_task"
          },
          "templates": {
              "items": [
                  {
                      "input_format": "Given this sentence: {text} classify if \"{span2_text}\" refers to \"{span1_text}\".",
                      "output_format": "{label}",
                      "type": "input_output_template"
                  }
              ],
              "type": "templates_list"
          },
          "type": "task_card"
      }

References: :ref:`metrics.accuracy <metrics.accuracy>`, :ref:`splitters.small_no_test <splitters.small_no_test>`

|
|



.. _cards.sciq:

----------

sciq
^^^^

.. note:: ID: ``cards.sciq``  |  Type: :class:`TaskCard <unitxt.card.TaskCard>`

   .. code-block:: json

      {
          "loader": {
              "path": "sciq",
              "type": "load_hf"
          },
          "preprocess_steps": [
              {
                  "fields": {
                      "numbering": [
                          "A",
                          "B",
                          "C",
                          "D",
                          "E",
                          "F",
                          "G",
                          "H",
                          "I",
                          "J",
                          "K",
                          "L",
                          "M",
                          "N",
                          "O",
                          "P",
                          "Q",
                          "R",
                          "S",
                          "T",
                          "U",
                          "V",
                          "W",
                          "X",
                          "Y",
                          "Z"
                      ],
                      "topic": "physical commonsense"
                  },
                  "type": "add_fields"
              },
              {
                  "fields": [
                      "distractor1",
                      "distractor2",
                      "distractor3",
                      "correct_answer"
                  ],
                  "to_field": "choices",
                  "type": "list_field_values"
              },
              {
                  "field": "choices",
                  "type": "shuffle_field_values"
              },
              {
                  "index_of": "correct_answer",
                  "search_in": "choices",
                  "to_field": "index",
                  "type": "index_of"
              },
              {
                  "field_to_field": {
                      "choices": "_choices",
                      "index": "_index",
                      "numbering": "_numbering",
                      "question": "sentence1",
                      "support": "context",
                      "topic": "topic"
                  },
                  "type": "rename_fields"
              },
              {
                  "field": "_numbering",
                  "index": "_index",
                  "to_field": "number",
                  "type": "take_by_field"
              },
              {
                  "field": "_choices",
                  "index": "_index",
                  "to_field": "answer",
                  "type": "take_by_field"
              },
              {
                  "fields": [
                      "_numbering",
                      "_choices"
                  ],
                  "to_field": "choices",
                  "type": "zip_field_values"
              },
              {
                  "field": "choices/*",
                  "process_every_value": true,
                  "separator": ". ",
                  "to_field": "choices_list",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "field": "choices_list",
                  "index": "_index",
                  "to_field": "number_and_answer",
                  "type": "take_by_field"
              },
              {
                  "field": "choices/*/0",
                  "separator": ",",
                  "to_field": "numbers",
                  "type": "join_str",
                  "use_query": true
              },
              {
                  "add": [
                      ""
                  ],
                  "field": "choices_list",
                  "to_field": "choices_list",
                  "type": "add_constant"
              },
              {
                  "field": "choices_list",
                  "separator": "\n",
                  "to_field": "choices",
                  "type": "join_str"
              },
              {
                  "field_to_field": {
                      "number": "label"
                  },
                  "type": "rename_fields"
              }
          ],
          "task": {
              "inputs": [
                  "choices",
                  "sentence1",
                  "numbers",
                  "topic",
                  "context"
              ],
              "metrics": [
                  "metrics.accuracy"
              ],
              "outputs": [
                  "label"
              ],
              "type": "form_task"
          },
          "templates": "templates.qa.multiple_choice.context.all",
          "type": "task_card"
      }

References: :ref:`metrics.accuracy <metrics.accuracy>`, :ref:`templates.qa.multiple_choice.context.all <templates.qa.multiple_choice.context.all>`

|
|



.. _.operators:

----------

operators
---------



.. _.operators.balancers:

----------

balancers
^^^^^^^^^



.. _.operators.balancers.qa:

----------

qa
""



.. _operators.balancers.qa.by_answer:

----------

by_answer
'''''''''

.. note:: ID: ``operators.balancers.qa.by_answer``  |  Type: :class:`DeterministicBalancer <unitxt.operators.DeterministicBalancer>`

   .. code-block:: json

      {
          "fields": [
              "outputs/answer"
          ],
          "type": "deterministic_balancer"
      }


|
|



.. _.operators.balancers.ner:

----------

ner
"""



.. _operators.balancers.ner.zero_vs_many_entities:

----------

zero_vs_many_entities
'''''''''''''''''''''

.. note:: ID: ``operators.balancers.ner.zero_vs_many_entities``  |  Type: :class:`LengthBalancer <unitxt.operators.LengthBalancer>`

   .. code-block:: json

      {
          "fields": [
              "outputs/labels"
          ],
          "segments_boundaries": [
              1
          ],
          "type": "length_balancer"
      }


|
|



.. _.operators.balancers.multi_label:

----------

multi_label
"""""""""""



.. _operators.balancers.multi_label.zero_vs_many_labels:

----------

zero_vs_many_labels
'''''''''''''''''''

.. note:: ID: ``operators.balancers.multi_label.zero_vs_many_labels``  |  Type: :class:`LengthBalancer <unitxt.operators.LengthBalancer>`

   .. code-block:: json

      {
          "fields": [
              "outputs/labels"
          ],
          "segments_boundaries": [
              1
          ],
          "type": "length_balancer"
      }


|
|



.. _.operators.balancers.classification:

----------

classification
""""""""""""""



.. _operators.balancers.classification.by_label:

----------

by_label
''''''''

.. note:: ID: ``operators.balancers.classification.by_label``  |  Type: :class:`DeterministicBalancer <unitxt.operators.DeterministicBalancer>`

   .. code-block:: json

      {
          "fields": [
              "outputs/label"
          ],
          "type": "deterministic_balancer"
      }


|
|



.. _.instructions:

----------

instructions
------------



.. _.instructions.natural_instructions:

----------

natural_instructions
^^^^^^^^^^^^^^^^^^^^



.. _.instructions.natural_instructions.train:

----------

train
"""""



.. _.instructions.models:

----------

models
^^^^^^



.. _instructions.models.llama:

----------

llama
"""""

.. note:: ID: ``instructions.models.llama``  |  Type: :class:`TextualInstruction <unitxt.instructions.TextualInstruction>`

   .. code-block:: json

      {
          "text": "<<SYS>>\nYou are a helpful, respectful and honest assistant. Always answer as helpfully as possible, while being safe. Your answers should not include any harmful, unethical, racist, sexist, toxic, dangerous, or illegal content. Please ensure that your responses are socially unbiased and positive in nature.\n\nIf a question does not make any sense, or is not factually coherent, explain why instead of answering something not correct. If you don’t know the answer to aquestion, please don’t share false information.\n<</SYS>>\n\n",
          "type": "textual_instruction"
      }


|
|



.. _instructions.empty:

----------

empty
^^^^^

.. note:: ID: ``instructions.empty``  |  Type: :class:`TextualInstruction <unitxt.instructions.TextualInstruction>`

   .. code-block:: json

      {
          "text": "",
          "type": "textual_instruction"
      }


|
|



.. _.tasks:

----------

tasks
-----



.. _.tasks.translation:

----------

translation
^^^^^^^^^^^



.. _tasks.translation.directed:

----------

directed
""""""""

.. note:: ID: ``tasks.translation.directed``  |  Type: :class:`FormTask <unitxt.task.FormTask>`

   .. code-block:: json

      {
          "inputs": [
              "text",
              "source_language",
              "target_language"
          ],
          "metrics": [
              "metrics.bleu"
          ],
          "outputs": [
              "translation"
          ],
          "type": "form_task"
      }

References: :ref:`metrics.bleu <metrics.bleu>`

|
|



.. _tasks.nli:

----------

nli
^^^

.. note:: ID: ``tasks.nli``  |  Type: :class:`FormTask <unitxt.task.FormTask>`

   .. code-block:: json

      {
          "inputs": [
              "choices",
              "premise",
              "hypothesis"
          ],
          "metrics": [
              "metrics.accuracy"
          ],
          "outputs": [
              "label"
          ],
          "type": "form_task"
      }

References: :ref:`metrics.accuracy <metrics.accuracy>`

|
|



.. _.tasks.multiple_choice:

----------

multiple_choice
^^^^^^^^^^^^^^^



.. _.tasks.classification:

----------

classification
^^^^^^^^^^^^^^



.. _tasks.classification.multi_label:

----------

multi_label
"""""""""""

.. note:: ID: ``tasks.classification.multi_label``  |  Type: :class:`FormTask <unitxt.task.FormTask>`

   .. code-block:: json

      {
          "augmentable_inputs": [
              "text"
          ],
          "inputs": [
              "text",
              "text_type",
              "classes",
              "type_of_classes"
          ],
          "metrics": [
              "metrics.f1_micro_multi_label",
              "metrics.accuracy",
              "metrics.f1_macro_multi_label"
          ],
          "outputs": [
              "labels"
          ],
          "type": "form_task"
      }

References: :ref:`metrics.f1_micro_multi_label <metrics.f1_micro_multi_label>`, :ref:`metrics.accuracy <metrics.accuracy>`, :ref:`metrics.f1_macro_multi_label <metrics.f1_macro_multi_label>`

|
|



.. _tasks.classification.binary:

----------

binary
""""""

.. note:: ID: ``tasks.classification.binary``  |  Type: :class:`FormTask <unitxt.task.FormTask>`

   .. code-block:: json

      {
          "augmentable_inputs": [
              "text"
          ],
          "inputs": [
              "text",
              "text_type",
              "class"
          ],
          "metrics": [
              "metrics.f1_micro_multi_label",
              "metrics.f1_macro_multi_label",
              "metrics.accuracy"
          ],
          "outputs": [
              "class",
              "label"
          ],
          "type": "form_task"
      }

References: :ref:`metrics.f1_micro_multi_label <metrics.f1_micro_multi_label>`, :ref:`metrics.accuracy <metrics.accuracy>`, :ref:`metrics.f1_macro_multi_label <metrics.f1_macro_multi_label>`

|
|



.. _tasks.classification.multi_class:

----------

multi_class
"""""""""""

.. note:: ID: ``tasks.classification.multi_class``  |  Type: :class:`FormTask <unitxt.task.FormTask>`

   .. code-block:: json

      {
          "augmentable_inputs": [
              "text"
          ],
          "inputs": [
              "text",
              "text_type",
              "classes",
              "type_of_class"
          ],
          "metrics": [
              "metrics.f1_micro",
              "metrics.accuracy",
              "metrics.f1_macro"
          ],
          "outputs": [
              "label"
          ],
          "type": "form_task"
      }

References: :ref:`metrics.accuracy <metrics.accuracy>`, :ref:`metrics.f1_macro <metrics.f1_macro>`, :ref:`metrics.f1_micro <metrics.f1_micro>`

|
|



.. _.recipes:

----------

recipes
-------



.. _recipes.wnli_5_shot:

----------

wnli_5_shot
^^^^^^^^^^^

.. note:: ID: ``recipes.wnli_5_shot``  |  Type: :class:`SequentialRecipe <unitxt.recipe.SequentialRecipe>`

   .. code-block:: json

      {
          "steps": [
              {
                  "name": "wnli",
                  "path": "glue",
                  "type": "load_hf"
              },
              {
                  "mix": {
                      "test": "validation",
                      "train": "train[95%]",
                      "validation": "train[5%]"
                  },
                  "type": "split_random_mix"
              },
              {
                  "slices": {
                      "demos_pool": "train[:100]",
                      "test": "test",
                      "train": "train[100:]",
                      "validation": "validation"
                  },
                  "type": "slice_split"
              },
              {
                  "mappers": {
                      "label": {
                          "0": "entailment",
                          "1": "not entailment"
                      }
                  },
                  "type": "map_instance_values"
              },
              {
                  "fields": {
                      "choices": [
                          "entailment",
                          "not entailment"
                      ]
                  },
                  "type": "add_fields"
              },
              {
                  "fields": [
                      "choices"
                  ],
                  "type": "normalize_list_fields"
              },
              {
                  "inputs": [
                      "choices",
                      "sentence1",
                      "sentence2"
                  ],
                  "metrics": [
                      "metrics.accuracy"
                  ],
                  "outputs": [
                      "label"
                  ],
                  "type": "form_task"
              },
              {
                  "sampler": {
                      "sample_size": 5,
                      "type": "random_sampler"
                  },
                  "source_stream": "demos_pool",
                  "target_field": "demos",
                  "type": "spread_split"
              },
              {
                  "demos_field": "demos",
                  "instruction": {
                      "text": "classify if this sentence is entailment or not entailment.",
                      "type": "textual_instruction"
                  },
                  "template": {
                      "input_format": "Given this sentence: {sentence1}, classify if this sentence: {sentence2} is {choices}.",
                      "output_format": "{label}",
                      "type": "input_output_template"
                  },
                  "type": "render_templated_icl"
              }
          ],
          "type": "sequential_recipe"
      }

References: :ref:`metrics.accuracy <metrics.accuracy>`

|
|



.. _recipes.wnli_3_shot:

----------

wnli_3_shot
^^^^^^^^^^^

.. note:: ID: ``recipes.wnli_3_shot``  |  Type: :class:`StandardRecipe <unitxt.standard.StandardRecipe>`

   .. code-block:: json

      {
          "card": "cards.wnli",
          "demos_pool_size": 100,
          "num_demos": 3,
          "template_card_index": 0,
          "type": "standard_recipe"
      }

References: :ref:`cards.wnli <cards.wnli>`

|
|



.. _recipes.wnli_fixed:

----------

wnli_fixed
^^^^^^^^^^

.. note:: ID: ``recipes.wnli_fixed``  |  Type: :class:`SequentialRecipe <unitxt.recipe.SequentialRecipe>`

   .. code-block:: json

      {
          "steps": [
              {
                  "name": "wnli",
                  "path": "glue",
                  "type": "load_hf"
              },
              {
                  "mix": {
                      "test": "validation",
                      "train": "train[95%]",
                      "validation": "train[5%]"
                  },
                  "type": "split_random_mix"
              },
              {
                  "mappers": {
                      "label": {
                          "0": "entailment",
                          "1": "not entailment"
                      }
                  },
                  "type": "map_instance_values"
              },
              {
                  "fields": {
                      "choices": [
                          "entailment",
                          "not entailment"
                      ]
                  },
                  "type": "add_fields"
              },
              {
                  "inputs": [
                      "choices",
                      "sentence1",
                      "sentence2"
                  ],
                  "metrics": [
                      "metrics.accuracy"
                  ],
                  "outputs": [
                      "label"
                  ],
                  "type": "form_task"
              },
              {
                  "template": {
                      "input_format": "Given this sentence: {sentence1}, classify if this sentence: {sentence2} is {choices}.",
                      "output_format": "{label}",
                      "type": "input_output_template"
                  },
                  "type": "render_format_template"
              }
          ],
          "type": "sequential_recipe"
      }

References: :ref:`metrics.accuracy <metrics.accuracy>`

|
|



.. _recipes.wnli:

----------

wnli
^^^^

.. note:: ID: ``recipes.wnli``  |  Type: :class:`SequentialRecipe <unitxt.recipe.SequentialRecipe>`

   .. code-block:: json

      {
          "steps": [
              {
                  "name": "wnli",
                  "path": "glue",
                  "type": "load_hf"
              },
              {
                  "mix": {
                      "test": "validation",
                      "train": "train[95%]",
                      "validation": "train[5%]"
                  },
                  "type": "split_random_mix"
              },
              {
                  "mappers": {
                      "label": {
                          "0": "entailment",
                          "1": "not entailment"
                      }
                  },
                  "type": "map_instance_values"
              },
              {
                  "fields": {
                      "choices": [
                          "entailment",
                          "not entailment"
                      ],
                      "instruction": "classify the relationship between the two sentences from the choices."
                  },
                  "type": "add_fields"
              },
              {
                  "inputs": [
                      "choices",
                      "instruction",
                      "sentence1",
                      "sentence2"
                  ],
                  "metrics": [
                      "metrics.accuracy"
                  ],
                  "outputs": [
                      "label"
                  ],
                  "type": "form_task"
              },
              {
                  "type": "render_auto_format_template"
              }
          ],
          "type": "sequential_recipe"
      }

References: :ref:`metrics.accuracy <metrics.accuracy>`

|
|



.. _.benchmarks:

----------

benchmarks
----------



.. _benchmarks.glue:

----------

glue
^^^^

.. note:: ID: ``benchmarks.glue``  |  Type: :class:`WeightedFusion <unitxt.fusion.WeightedFusion>`

   .. code-block:: json

      {
          "include_splits": null,
          "origins": [
              "recipes.wnli_3_shot",
              "recipes.wnli_3_shot"
          ],
          "total_examples": 4,
          "type": "weighted_fusion",
          "weights": [
              1,
              1
          ]
      }

References: :ref:`recipes.wnli_3_shot <recipes.wnli_3_shot>`

|
|



.. _.processors:

----------

processors
----------



.. _processors.dict_of_lists_to_value_key_pairs:

----------

dict_of_lists_to_value_key_pairs
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. note:: ID: ``processors.dict_of_lists_to_value_key_pairs``  |  Type: :class:`DictOfListsToPairs <unitxt.processors.DictOfListsToPairs>`

   .. code-block:: json

      {
          "position_key_before_value": false,
          "type": "dict_of_lists_to_pairs"
      }


|
|



.. _processors.load_json:

----------

load_json
^^^^^^^^^

.. note:: ID: ``processors.load_json``  |  Type: :class:`LoadJson <unitxt.processors.LoadJson>`

   .. code-block:: json

      {
          "type": "load_json"
      }


|
|



.. _processors.to_list_by_comma:

----------

to_list_by_comma
^^^^^^^^^^^^^^^^

.. note:: ID: ``processors.to_list_by_comma``  |  Type: :class:`ToListByComma <unitxt.processors.ToListByComma>`

   .. code-block:: json

      {
          "type": "to_list_by_comma"
      }


|
|



.. _processors.first_character:

----------

first_character
^^^^^^^^^^^^^^^

.. note:: ID: ``processors.first_character``  |  Type: :class:`FirstCharacter <unitxt.processors.FirstCharacter>`

   .. code-block:: json

      {
          "type": "first_character"
      }


|
|



.. _processors.to_span_label_pairs:

----------

to_span_label_pairs
^^^^^^^^^^^^^^^^^^^

.. note:: ID: ``processors.to_span_label_pairs``  |  Type: :class:`RegexParser <unitxt.processors.RegexParser>`

   .. code-block:: json

      {
          "regex": "\\s*((?:[^,:\\\\]|\\\\.)+?)\\s*:\\s*((?:[^,:\\\\]|\\\\.)+?)\\s*(?=,|$)",
          "type": "regex_parser"
      }


|
|



.. _processors.string_or_not_hate:

----------

string_or_not_hate
^^^^^^^^^^^^^^^^^^

.. note:: ID: ``processors.string_or_not_hate``  |  Type: :class:`StringOrNotString <unitxt.processors.StringOrNotString>`

   .. code-block:: json

      {
          "string": "hate speech",
          "type": "string_or_not_string"
      }


|
|



.. _processors.hate_speech_or_not_hate_speech:

----------

hate_speech_or_not_hate_speech
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. note:: ID: ``processors.hate_speech_or_not_hate_speech``  |  Type: :class:`StringOrNotString <unitxt.processors.StringOrNotString>`

   .. code-block:: json

      {
          "string": "hate speech",
          "type": "string_or_not_string"
      }


|
|



.. _processors.to_pairs:

----------

to_pairs
^^^^^^^^

.. note:: ID: ``processors.to_pairs``  |  Type: :class:`RegexParser <unitxt.processors.RegexParser>`

   .. code-block:: json

      {
          "regex": "(\\w+):(\\w+)",
          "type": "regex_parser"
      }


|
|



.. _processors.to_string_stripped:

----------

to_string_stripped
^^^^^^^^^^^^^^^^^^

.. note:: ID: ``processors.to_string_stripped``  |  Type: :class:`ToStringStripped <unitxt.processors.ToStringStripped>`

   .. code-block:: json

      {
          "type": "to_string_stripped"
      }


|
|



.. _processors.lower_case_till_punc:

----------

lower_case_till_punc
^^^^^^^^^^^^^^^^^^^^

.. note:: ID: ``processors.lower_case_till_punc``  |  Type: :class:`LowerCaseTillPunc <unitxt.processors.LowerCaseTillPunc>`

   .. code-block:: json

      {
          "type": "lower_case_till_punc"
      }


|
|



.. _processors.list_to_empty_entity_tuples:

----------

list_to_empty_entity_tuples
^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. note:: ID: ``processors.list_to_empty_entity_tuples``  |  Type: :class:`ListToEmptyEntitiesTuples <unitxt.processors.ListToEmptyEntitiesTuples>`

   .. code-block:: json

      {
          "type": "list_to_empty_entities_tuples"
      }


|
|



.. _processors.toxic_or_not_toxic:

----------

toxic_or_not_toxic
^^^^^^^^^^^^^^^^^^

.. note:: ID: ``processors.toxic_or_not_toxic``  |  Type: :class:`StringOrNotString <unitxt.processors.StringOrNotString>`

   .. code-block:: json

      {
          "string": "toxic",
          "type": "string_or_not_string"
      }


|
|



.. _processors.take_first_non_empty_line:

----------

take_first_non_empty_line
^^^^^^^^^^^^^^^^^^^^^^^^^

.. note:: ID: ``processors.take_first_non_empty_line``  |  Type: :class:`TakeFirstNonEmptyLine <unitxt.processors.TakeFirstNonEmptyLine>`

   .. code-block:: json

      {
          "type": "take_first_non_empty_line"
      }


|
|



.. _processors.to_span_label_pairs_surface_only:

----------

to_span_label_pairs_surface_only
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. note:: ID: ``processors.to_span_label_pairs_surface_only``  |  Type: :class:`RegexParser <unitxt.processors.RegexParser>`

   .. code-block:: json

      {
          "regex": "\\s*((?:\\\\.|[^,])+?)\\s*(?:,|$)()",
          "termination_regex": "^\\s*None\\s*$",
          "type": "regex_parser"
      }


|
|



.. _processors.to_string:

----------

to_string
^^^^^^^^^

.. note:: ID: ``processors.to_string``  |  Type: :class:`ToString <unitxt.processors.ToString>`

   .. code-block:: json

      {
          "type": "to_string"
      }


|
|



.. _processors.lower_case:

----------

lower_case
^^^^^^^^^^

.. note:: ID: ``processors.lower_case``  |  Type: :class:`LowerCase <unitxt.processors.LowerCase>`

   .. code-block:: json

      {
          "type": "lower_case"
      }


|
|



.. _.splitters:

----------

splitters
---------



.. _splitters.large_no_test:

----------

large_no_test
^^^^^^^^^^^^^

.. note:: ID: ``splitters.large_no_test``  |  Type: :class:`SplitRandomMix <unitxt.splitters.SplitRandomMix>`

   .. code-block:: json

      {
          "mix": {
              "test": "validation",
              "train": "train[99%]",
              "validation": "train[1%]"
          },
          "type": "split_random_mix"
      }


|
|



.. _splitters.small_no_dev:

----------

small_no_dev
^^^^^^^^^^^^

.. note:: ID: ``splitters.small_no_dev``  |  Type: :class:`SplitRandomMix <unitxt.splitters.SplitRandomMix>`

   .. code-block:: json

      {
          "mix": {
              "test": "test",
              "train": "train[95%]",
              "validation": "train[5%]"
          },
          "type": "split_random_mix"
      }


|
|



.. _splitters.default:

----------

default
^^^^^^^

.. note:: ID: ``splitters.default``  |  Type: :class:`SplitRandomMix <unitxt.splitters.SplitRandomMix>`

   .. code-block:: json

      {
          "mix": {
              "test": "test",
              "train": "train",
              "validation": "validation"
          },
          "type": "split_random_mix"
      }


|
|



.. _splitters.diverse_labels_sampler:

----------

diverse_labels_sampler
^^^^^^^^^^^^^^^^^^^^^^

.. note:: ID: ``splitters.diverse_labels_sampler``  |  Type: :class:`DiverseLabelsSampler <unitxt.splitters.DiverseLabelsSampler>`

   .. code-block:: json

      {
          "type": "diverse_labels_sampler"
      }


|
|



.. _splitters.large_no_dev:

----------

large_no_dev
^^^^^^^^^^^^

.. note:: ID: ``splitters.large_no_dev``  |  Type: :class:`SplitRandomMix <unitxt.splitters.SplitRandomMix>`

   .. code-block:: json

      {
          "mix": {
              "test": "test",
              "train": "train[99%]",
              "validation": "train[1%]"
          },
          "type": "split_random_mix"
      }


|
|



.. _splitters.test_only:

----------

test_only
^^^^^^^^^

.. note:: ID: ``splitters.test_only``  |  Type: :class:`SplitRandomMix <unitxt.splitters.SplitRandomMix>`

   .. code-block:: json

      {
          "mix": {
              "test": "test",
              "train": "test[0%]",
              "validation": "test[0%]"
          },
          "type": "split_random_mix"
      }


|
|



.. _splitters.small_no_test:

----------

small_no_test
^^^^^^^^^^^^^

.. note:: ID: ``splitters.small_no_test``  |  Type: :class:`SplitRandomMix <unitxt.splitters.SplitRandomMix>`

   .. code-block:: json

      {
          "mix": {
              "test": "validation",
              "train": "train[95%]",
              "validation": "train[5%]"
          },
          "type": "split_random_mix"
      }


|
|

